
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENAND BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MINUS OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON BLOCKneural_program_id : EMPTYBLOCK : VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCKVAR_BLOCK : VARS_K BLOCKSTART VAR_DECL BLOCKENDVAR_DECL : TYPE COLON VAR_LIST SEMICOLON VAR_DECL_RVAR_DECL_R : VAR_DECL\n                  | EMPTYVAR_LIST : ID VAR_LIST2VAR_LIST2 : COMMA ID VAR_LIST2\n                 | EMPTYTYPE : INT_K NEURAL_TYPE\n            | FLOAT_K NEURAL_TYPE\n            | STRING_K NEURAL_TYPENEURAL_TYPE : EMPTYPROC_BLOCK : PROC_DECLPROC_DECL : PROC_DECL_RETURN\n                 | PROC_DECL_VOID\n                 | EMPTYPROC_DECL_VOID : FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECLneural_proc_void_id : EMPTYPROC_DECL_RETURN : FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECLneural_proc_return_id : EMPTYneural_param_decl : EMPTYPARAM_DECL : TYPE ID neuro PARAM_DECL_R\n                  | EMPTYneuro : EMPTYPARAM_DECL_R : COMMA PARAM_DECL\n                    | EMPTYPROC_BODY : STATEMENT PROC_BODY_RPROC_BODY_R : PROC_BODY\n                   | EMPTYSTATEMENT : ASSIGN SEMICOLON\n                 | FUNC_CALL SEMICOLON\n                 | READ SEMICOLON\n                 | WRITE SEMICOLON\n                 | FLOW\n                STATEMENT_R : STATEMENT STATEMENT_R\n                   | EMPTYFLOW : DECISION\n            | LOOPLOOP : WHILE_LOOP\n            | DO_WHILE_LOOP SEMICOLON\n            | FOR_LOOPDO_WHILE_LOOP : DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURALDW_PREV_NEURAL : EMPTYDW_END_NEURAL : EMPTYWHILE_LOOP : WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURALWHILE_PREV_NEURAL : EMPTYWHILE_POST_NEURAL : EMPTYWHILE_END_NEURAL : EMPTYFOR_LOOP : FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKENDDECISION : IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURALEXP_RESULT_NEURAL : EMPTYDECISION_END_NEURAL : EMPTYDECISION_ALT : ELSE\n                    | EMPTYELSE : ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKENDELSE_NEURAL : EMPTYASSIGN : VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURALASSI_H_EXP_NEURAL : EMPTYEQUALS_NEURAL : EMPTYASSIGN_VAR_N : EMPTYVAR : ID\n           | ARRAYARRAY : ID LBRACE INT RBRACEFUNC_CALL : ID LPAREN ARG_LIST RPARENARG_LIST : VAR ARG_LIST_R\n                | CONSTANT ARG_LIST_R\n                | ARG_LIST_RARG_LIST_R : COMMA ARG_LIST\n                  | EMPTYCONSTANT : INT\n                | FLOAT\n                | STRINGREAD : READ_K LPAREN ID_LIST RPARENID_LIST : ID READ_NEURAL ID_LIST_RREAD_NEURAL : EMPTYID_LIST_R : COMMA ID_LIST\n                 | EMPTYWRITE : WRITE_K LPAREN WRITE_LIST RPARENWRITE_LIST : H_EXPRESSION WRITE_LIST_R\n                  | CONSTANT CONSTANT_WRITE_N WRITE_LIST_RCONSTANT_WRITE_N : EMPTYWRITE_LIST_R : WRITE_NEURAL COMMA WRITE_LIST\n                    | WRITE_NEURAL EMPTYWRITE_NEURAL : EMPTYRETURN : RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLONEXPRESSION : TERM NEURAL_EXPRESSION EXPRESSION_RNEURAL_EXPRESSION : EMPTYEXPRESSION_R : PLUS NEURAL_PLUS EXPRESSION\n                    | MINUS NEURAL_MINUS EXPRESSION\n                    | EMPTYNEURAL_PLUS : EMPTYNEURAL_MINUS : EMPTYTERM : FACTOR NEURAL_TERM TERM_RNEURAL_TERM : EMPTYTERM_R : TIMES NEURAL_TIMES TERM\n              | DIVIDE NEURAL_DIVIDE TERM\n              | EMPTYNEURAL_TIMES : EMPTYNEURAL_DIVIDE : EMPTYFACTOR : ID NEURAL_ID_FAC\n              | CONSTANT NEURAL_CNT_FACT\n              | LPAREN H_EXPRESSION RPARENNEURAL_ID_FAC : EMPTYNEURAL_CNT_FACT : EMPTYS_EXPRESSION : EXPRESSION\n                    | EXPRESSION GT EXPRESSION\n                    | EXPRESSION LT EXPRESSION\n                    | EXPRESSION GTE EXPRESSION\n                    | EXPRESSION LTE EXPRESSION\n                    | EXPRESSION DOUBLEEQUAL EXPRESSIONH_EXPRESSION : S_EXPRESSION H_EXPRESSION_RH_EXPRESSION_R : OR H_EXPRESSION\n                      | AND H_EXPRESSION\n                      | EMPTYPRINCIPAL_BLOCK : MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKENDPRINCIPAL_BODY : STATEMENT PRINCIPAL_BODY_R\n                      | EMPTYPRINCIPAL_BODY_R : PRINCIPAL_BODYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,7,17,79,],[0,-1,-3,-117,]),'ID':([2,19,20,21,22,23,29,30,31,32,34,42,47,50,56,61,62,65,67,70,71,82,83,84,85,88,90,91,92,93,103,112,117,128,129,136,137,155,156,158,159,160,161,162,173,179,180,183,186,197,198,201,202,212,218,219,220,221,222,223,224,225,226,242,243,246,248,251,254,255,256,258,262,263,265,266,269,271,273,],[3,27,28,-121,-121,-121,-11,-14,-12,-13,41,58,78,58,-36,-39,-40,-41,-43,98,99,-32,-33,-34,-35,104,116,125,125,-42,-121,104,125,125,58,125,-61,125,125,125,125,125,125,125,58,58,58,116,125,-121,-121,-121,-121,58,125,-93,125,-94,125,-100,125,-101,58,58,125,125,-121,58,-121,-55,-56,-121,-52,-54,-47,-50,-51,58,-57,]),'SEMICOLON':([3,4,5,40,41,46,48,52,53,54,55,66,78,102,109,110,111,121,122,123,124,125,127,138,143,147,152,154,157,163,164,165,166,167,168,170,181,185,189,190,191,192,193,194,195,196,199,200,203,214,215,237,238,239,240,259,261,267,268,],[-121,6,-2,45,-121,-8,-10,82,83,84,85,93,-121,-9,-72,-73,-74,-121,-107,-121,-121,-121,-121,-66,-75,-80,-103,-113,-116,-121,-89,-121,-96,-102,-105,-106,-121,-104,-114,-115,-108,-109,-110,-111,-112,-88,-92,-95,-99,-59,-60,-90,-91,-97,-98,-121,270,-44,-46,]),'VARS_K':([6,],[9,]),'FUNCTION_K':([8,33,236,245,],[15,-4,15,15,]),'MAIN_K':([8,10,11,12,13,14,33,236,245,247,252,],[-121,18,-15,-16,-17,-18,-4,-121,-121,-19,-21,]),'BLOCKSTART':([9,35,69,96,97,100,101,133,134,135,169,204,205,206,227,228,244,264,],[16,42,-121,129,-45,-121,-121,179,-23,180,-121,226,-53,-121,242,-49,251,271,]),'VOID_K':([15,],[20,]),'INT_K':([15,16,43,44,45,177,],[21,21,21,21,21,21,]),'FLOAT_K':([15,16,43,44,45,177,],[22,22,22,22,22,22,]),'STRING_K':([15,16,43,44,45,177,],[23,23,23,23,23,23,]),'LPAREN':([18,27,28,36,37,38,39,58,59,60,64,68,91,92,94,95,103,117,128,136,137,155,156,158,159,160,161,162,186,197,198,201,202,218,219,220,221,222,223,224,225,229,232,243,246,],[26,-121,-121,43,-22,44,-20,88,90,91,92,-121,117,117,128,-48,-121,117,117,117,-61,117,117,117,117,117,117,117,117,-121,-121,-121,-121,117,-93,117,-94,117,-100,117,-101,243,246,117,117,]),'COLON':([21,22,23,25,29,30,31,32,],[-121,-121,-121,34,-11,-14,-12,-13,]),'BLOCKEND':([24,42,45,49,50,51,56,61,62,65,67,75,76,77,80,81,82,83,84,85,93,129,172,173,174,208,212,213,226,231,233,234,235,241,242,248,249,251,254,255,256,258,260,262,263,265,266,269,270,271,272,273,],[33,-121,-121,79,-121,-119,-36,-39,-40,-41,-43,-5,-6,-7,-118,-120,-32,-33,-34,-35,-42,-121,207,-121,-38,-37,-121,236,-121,245,-29,-30,-31,248,-121,-121,258,-121,-121,-55,-56,-121,269,-52,-54,-47,-50,-51,-87,-121,273,-57,]),'RPAREN':([26,43,44,63,72,73,74,88,99,104,105,106,107,108,109,110,111,112,113,115,116,118,119,120,121,122,123,124,125,126,127,131,132,139,140,141,142,144,145,146,148,149,150,151,152,153,154,157,163,164,165,166,167,168,170,171,176,177,178,182,184,185,187,188,189,190,191,192,193,194,195,196,199,200,203,210,216,217,237,238,239,240,250,253,],[35,-121,-121,-64,100,-25,101,-121,-121,-63,138,-121,-69,-121,-72,-73,-74,-121,-71,143,-121,147,-121,-121,-121,-107,-121,-121,-121,169,-121,-121,-26,-67,-68,-70,-65,-121,-77,185,-81,-121,-86,-121,-103,-83,-113,-116,-121,-89,-121,-96,-102,-105,-106,206,-24,-121,-28,-76,-79,-104,-85,-82,-114,-115,-108,-109,-110,-111,-112,-88,-92,-95,-99,-27,-78,-84,-90,-91,-97,-98,259,261,]),'COMMA':([41,63,78,88,99,104,106,108,109,110,111,112,116,119,120,121,122,123,124,125,127,131,132,142,144,145,149,150,151,152,153,154,157,163,164,165,166,167,168,170,185,189,190,191,192,193,194,195,196,199,200,203,237,238,239,240,],[47,-64,47,112,-121,-63,112,112,-72,-73,-74,112,-121,-121,-121,-121,-107,-121,-121,-121,-121,177,-26,-65,183,-77,186,-86,-121,-103,-83,-113,-116,-121,-89,-121,-96,-102,-105,-106,-104,-114,-115,-108,-109,-110,-111,-112,-88,-92,-95,-99,-90,-91,-97,-98,]),'READ_K':([42,50,56,61,62,65,67,82,83,84,85,93,129,173,179,180,212,226,242,248,251,254,255,256,258,262,263,265,266,269,271,273,],[59,59,-36,-39,-40,-41,-43,-32,-33,-34,-35,-42,59,59,59,59,59,59,59,-121,59,-121,-55,-56,-121,-52,-54,-47,-50,-51,59,-57,]),'WRITE_K':([42,50,56,61,62,65,67,82,83,84,85,93,129,173,179,180,212,226,242,248,251,254,255,256,258,262,263,265,266,269,271,273,],[60,60,-36,-39,-40,-41,-43,-32,-33,-34,-35,-42,60,60,60,60,60,60,60,-121,60,-121,-55,-56,-121,-52,-54,-47,-50,-51,60,-57,]),'IF_K':([42,50,56,61,62,65,67,82,83,84,85,93,129,173,179,180,212,226,242,248,251,254,255,256,258,262,263,265,266,269,271,273,],[64,64,-36,-39,-40,-41,-43,-32,-33,-34,-35,-42,64,64,64,64,64,64,64,-121,64,-121,-55,-56,-121,-52,-54,-47,-50,-51,64,-57,]),'WHILE_K':([42,50,56,61,62,65,67,82,83,84,85,93,129,173,179,180,207,212,226,242,248,251,254,255,256,258,262,263,265,266,269,271,273,],[68,68,-36,-39,-40,-41,-43,-32,-33,-34,-35,-42,68,68,68,68,229,68,68,68,-121,68,-121,-55,-56,-121,-52,-54,-47,-50,-51,68,-57,]),'DO_K':([42,50,56,61,62,65,67,82,83,84,85,93,129,173,179,180,212,226,230,242,248,251,254,255,256,258,262,263,265,266,269,271,273,],[69,69,-36,-39,-40,-41,-43,-32,-33,-34,-35,-42,69,69,69,69,69,69,244,69,-121,69,-121,-55,-56,-121,-52,-54,-47,-50,-51,69,-57,]),'FOR_K':([42,50,56,61,62,65,67,82,83,84,85,93,129,173,179,180,212,226,242,248,251,254,255,256,258,262,263,265,266,269,271,273,],[70,70,-36,-39,-40,-41,-43,-32,-33,-34,-35,-42,70,70,70,70,70,70,70,-121,70,-121,-55,-56,-121,-52,-54,-47,-50,-51,70,-57,]),'RETURN_K':([56,61,62,65,67,82,83,84,85,93,211,212,233,234,235,248,254,255,256,258,262,263,265,266,269,273,],[-36,-39,-40,-41,-43,-32,-33,-34,-35,-42,232,-121,-29,-30,-31,-121,-121,-55,-56,-121,-52,-54,-47,-50,-51,-57,]),'EQUALS':([57,58,63,86,87,98,142,],[-121,-63,-64,103,-62,130,-65,]),'LBRACE':([58,104,],[89,89,]),'INT':([88,89,91,92,103,112,117,128,130,136,137,155,156,158,159,160,161,162,186,197,198,201,202,209,218,219,220,221,222,223,224,225,243,246,],[109,114,109,109,-121,109,109,109,175,109,-61,109,109,109,109,109,109,109,109,-121,-121,-121,-121,230,109,-93,109,-94,109,-100,109,-101,109,109,]),'FLOAT':([88,91,92,103,112,117,128,136,137,155,156,158,159,160,161,162,186,197,198,201,202,218,219,220,221,222,223,224,225,243,246,],[110,110,110,-121,110,110,110,110,-61,110,110,110,110,110,110,110,110,-121,-121,-121,-121,110,-93,110,-94,110,-100,110,-101,110,110,]),'STRING':([88,91,92,103,112,117,128,136,137,155,156,158,159,160,161,162,186,197,198,201,202,218,219,220,221,222,223,224,225,243,246,],[111,111,111,-121,111,111,111,111,-61,111,111,111,111,111,111,111,111,-121,-121,-121,-121,111,-93,111,-94,111,-100,111,-101,111,111,]),'TIMES':([109,110,111,120,124,125,127,152,153,165,166,167,168,170,185,],[-72,-73,-74,-121,-121,-121,-121,-103,-106,201,-96,-102,-105,-106,-104,]),'DIVIDE':([109,110,111,120,124,125,127,152,153,165,166,167,168,170,185,],[-72,-73,-74,-121,-121,-121,-121,-103,-106,202,-96,-102,-105,-106,-104,]),'PLUS':([109,110,111,120,123,124,125,127,152,153,163,164,165,166,167,168,170,185,200,203,239,240,],[-72,-73,-74,-121,-121,-121,-121,-121,-103,-106,197,-89,-121,-96,-102,-105,-106,-104,-95,-99,-97,-98,]),'MINUS':([109,110,111,120,123,124,125,127,152,153,163,164,165,166,167,168,170,185,200,203,239,240,],[-72,-73,-74,-121,-121,-121,-121,-121,-103,-106,198,-89,-121,-96,-102,-105,-106,-104,-95,-99,-97,-98,]),'GT':([109,110,111,120,122,123,124,125,127,152,153,163,164,165,166,167,168,170,185,196,199,200,203,237,238,239,240,],[-72,-73,-74,-121,158,-121,-121,-121,-121,-103,-106,-121,-89,-121,-96,-102,-105,-106,-104,-88,-92,-95,-99,-90,-91,-97,-98,]),'LT':([109,110,111,120,122,123,124,125,127,152,153,163,164,165,166,167,168,170,185,196,199,200,203,237,238,239,240,],[-72,-73,-74,-121,159,-121,-121,-121,-121,-103,-106,-121,-89,-121,-96,-102,-105,-106,-104,-88,-92,-95,-99,-90,-91,-97,-98,]),'GTE':([109,110,111,120,122,123,124,125,127,152,153,163,164,165,166,167,168,170,185,196,199,200,203,237,238,239,240,],[-72,-73,-74,-121,160,-121,-121,-121,-121,-103,-106,-121,-89,-121,-96,-102,-105,-106,-104,-88,-92,-95,-99,-90,-91,-97,-98,]),'LTE':([109,110,111,120,122,123,124,125,127,152,153,163,164,165,166,167,168,170,185,196,199,200,203,237,238,239,240,],[-72,-73,-74,-121,161,-121,-121,-121,-121,-103,-106,-121,-89,-121,-96,-102,-105,-106,-104,-88,-92,-95,-99,-90,-91,-97,-98,]),'DOUBLEEQUAL':([109,110,111,120,122,123,124,125,127,152,153,163,164,165,166,167,168,170,185,196,199,200,203,237,238,239,240,],[-72,-73,-74,-121,162,-121,-121,-121,-121,-103,-106,-121,-89,-121,-96,-102,-105,-106,-104,-88,-92,-95,-99,-90,-91,-97,-98,]),'OR':([109,110,111,120,121,122,123,124,125,127,152,153,163,164,165,166,167,168,170,185,191,192,193,194,195,196,199,200,203,237,238,239,240,],[-72,-73,-74,-121,155,-107,-121,-121,-121,-121,-103,-106,-121,-89,-121,-96,-102,-105,-106,-104,-108,-109,-110,-111,-112,-88,-92,-95,-99,-90,-91,-97,-98,]),'AND':([109,110,111,120,121,122,123,124,125,127,152,153,163,164,165,166,167,168,170,185,191,192,193,194,195,196,199,200,203,237,238,239,240,],[-72,-73,-74,-121,156,-107,-121,-121,-121,-121,-103,-106,-121,-89,-121,-96,-102,-105,-106,-104,-108,-109,-110,-111,-112,-88,-92,-95,-99,-90,-91,-97,-98,]),'RBRACE':([114,],[142,]),'TO_K':([175,],[209,]),'ELSE_K':([248,256,257,],[-121,-58,264,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,8,21,22,23,27,28,41,42,43,44,45,50,57,68,69,78,88,99,100,101,103,106,108,112,116,119,120,121,123,124,125,127,129,131,144,149,151,163,165,169,173,177,181,197,198,201,202,206,212,226,236,242,245,248,251,254,258,259,271,],[5,14,30,30,30,37,39,48,51,73,73,77,51,87,95,97,48,113,132,134,134,137,113,113,113,145,150,153,157,164,166,168,170,174,178,184,187,150,199,203,205,174,73,215,219,221,223,225,228,235,174,14,174,14,256,174,263,266,268,174,]),'BLOCK':([6,],[7,]),'VAR_BLOCK':([6,],[8,]),'PROC_BLOCK':([8,],[10,]),'PROC_DECL':([8,236,245,],[11,247,252,]),'PROC_DECL_RETURN':([8,236,245,],[12,12,12,]),'PROC_DECL_VOID':([8,236,245,],[13,13,13,]),'PRINCIPAL_BLOCK':([10,],[17,]),'TYPE':([15,16,43,44,45,177,],[19,25,71,71,25,71,]),'VAR_DECL':([16,45,],[24,76,]),'NEURAL_TYPE':([21,22,23,],[29,31,32,]),'neural_proc_return_id':([27,],[36,]),'neural_proc_void_id':([28,],[38,]),'VAR_LIST':([34,],[40,]),'VAR_LIST2':([41,78,],[46,102,]),'PRINCIPAL_BODY':([42,50,],[49,81,]),'STATEMENT':([42,50,129,173,179,180,212,226,242,251,271,],[50,50,173,173,212,212,212,173,173,173,173,]),'ASSIGN':([42,50,129,173,179,180,212,226,242,251,271,],[52,52,52,52,52,52,52,52,52,52,52,]),'FUNC_CALL':([42,50,129,173,179,180,212,226,242,251,271,],[53,53,53,53,53,53,53,53,53,53,53,]),'READ':([42,50,129,173,179,180,212,226,242,251,271,],[54,54,54,54,54,54,54,54,54,54,54,]),'WRITE':([42,50,129,173,179,180,212,226,242,251,271,],[55,55,55,55,55,55,55,55,55,55,55,]),'FLOW':([42,50,129,173,179,180,212,226,242,251,271,],[56,56,56,56,56,56,56,56,56,56,56,]),'VAR':([42,50,88,112,129,173,179,180,212,226,242,251,271,],[57,57,106,106,57,57,57,57,57,57,57,57,57,]),'DECISION':([42,50,129,173,179,180,212,226,242,251,271,],[61,61,61,61,61,61,61,61,61,61,61,]),'LOOP':([42,50,129,173,179,180,212,226,242,251,271,],[62,62,62,62,62,62,62,62,62,62,62,]),'ARRAY':([42,50,88,112,129,173,179,180,212,226,242,251,271,],[63,63,63,63,63,63,63,63,63,63,63,63,63,]),'WHILE_LOOP':([42,50,129,173,179,180,212,226,242,251,271,],[65,65,65,65,65,65,65,65,65,65,65,]),'DO_WHILE_LOOP':([42,50,129,173,179,180,212,226,242,251,271,],[66,66,66,66,66,66,66,66,66,66,66,]),'FOR_LOOP':([42,50,129,173,179,180,212,226,242,251,271,],[67,67,67,67,67,67,67,67,67,67,67,]),'PARAM_DECL':([43,44,177,],[72,74,210,]),'VAR_DECL_R':([45,],[75,]),'PRINCIPAL_BODY_R':([50,],[80,]),'ASSIGN_VAR_N':([57,],[86,]),'WHILE_PREV_NEURAL':([68,],[94,]),'DW_PREV_NEURAL':([69,],[96,]),'ARG_LIST':([88,112,],[105,141,]),'ARG_LIST_R':([88,106,108,112,],[107,139,140,107,]),'CONSTANT':([88,91,92,112,117,128,136,155,156,158,159,160,161,162,186,218,220,222,224,243,246,],[108,120,127,108,127,127,127,127,127,127,127,127,127,127,120,127,127,127,127,127,127,]),'ID_LIST':([90,183,],[115,216,]),'WRITE_LIST':([91,186,],[118,217,]),'H_EXPRESSION':([91,92,117,128,136,155,156,186,243,246,],[119,126,146,171,181,189,190,119,250,253,]),'S_EXPRESSION':([91,92,117,128,136,155,156,186,243,246,],[121,121,121,121,121,121,121,121,121,121,]),'EXPRESSION':([91,92,117,128,136,155,156,158,159,160,161,162,186,218,220,243,246,],[122,122,122,122,122,122,122,191,192,193,194,195,122,237,238,122,122,]),'TERM':([91,92,117,128,136,155,156,158,159,160,161,162,186,218,220,222,224,243,246,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,239,240,123,123,]),'FACTOR':([91,92,117,128,136,155,156,158,159,160,161,162,186,218,220,222,224,243,246,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'neuro':([99,],[131,]),'neural_param_decl':([100,101,],[133,135,]),'EQUALS_NEURAL':([103,],[136,]),'READ_NEURAL':([116,],[144,]),'WRITE_LIST_R':([119,151,],[148,188,]),'WRITE_NEURAL':([119,151,],[149,149,]),'CONSTANT_WRITE_N':([120,],[151,]),'NEURAL_CNT_FACT':([120,127,],[152,152,]),'H_EXPRESSION_R':([121,],[154,]),'NEURAL_EXPRESSION':([123,],[163,]),'NEURAL_TERM':([124,],[165,]),'NEURAL_ID_FAC':([125,],[167,]),'STATEMENT_R':([129,173,226,242,251,271,],[172,208,241,249,260,272,]),'PARAM_DECL_R':([131,],[176,]),'ID_LIST_R':([144,],[182,]),'EXPRESSION_R':([163,],[196,]),'TERM_R':([165,],[200,]),'EXP_RESULT_NEURAL':([169,],[204,]),'PROC_BODY':([179,180,212,],[211,213,234,]),'ASSI_H_EXP_NEURAL':([181,],[214,]),'NEURAL_PLUS':([197,],[218,]),'NEURAL_MINUS':([198,],[220,]),'NEURAL_TIMES':([201,],[222,]),'NEURAL_DIVIDE':([202,],[224,]),'WHILE_POST_NEURAL':([206,],[227,]),'RETURN':([211,],[231,]),'PROC_BODY_R':([212,],[233,]),'DECISION_ALT':([248,],[254,]),'ELSE':([248,],[255,]),'ELSE_NEURAL':([248,],[257,]),'DECISION_END_NEURAL':([254,],[262,]),'WHILE_END_NEURAL':([258,],[265,]),'DW_END_NEURAL':([259,],[267,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK','PROGRAM',5,'p_program','new.py',181),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','new.py',186),
  ('BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK','BLOCK',3,'p_block','new.py',195),
  ('VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND','VAR_BLOCK',4,'p_var_block','new.py',198),
  ('VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R','VAR_DECL',5,'p_var_decl','new.py',201),
  ('VAR_DECL_R -> VAR_DECL','VAR_DECL_R',1,'p_var_decl_r','new.py',204),
  ('VAR_DECL_R -> EMPTY','VAR_DECL_R',1,'p_var_decl_r','new.py',205),
  ('VAR_LIST -> ID VAR_LIST2','VAR_LIST',2,'p_var_list','new.py',208),
  ('VAR_LIST2 -> COMMA ID VAR_LIST2','VAR_LIST2',3,'p_var_list2','new.py',212),
  ('VAR_LIST2 -> EMPTY','VAR_LIST2',1,'p_var_list2','new.py',213),
  ('TYPE -> INT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',238),
  ('TYPE -> FLOAT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',239),
  ('TYPE -> STRING_K NEURAL_TYPE','TYPE',2,'p_type','new.py',240),
  ('NEURAL_TYPE -> EMPTY','NEURAL_TYPE',1,'p_neural_type','new.py',247),
  ('PROC_BLOCK -> PROC_DECL','PROC_BLOCK',1,'p_proc_block','new.py',250),
  ('PROC_DECL -> PROC_DECL_RETURN','PROC_DECL',1,'p_proc_decl','new.py',253),
  ('PROC_DECL -> PROC_DECL_VOID','PROC_DECL',1,'p_proc_decl','new.py',254),
  ('PROC_DECL -> EMPTY','PROC_DECL',1,'p_proc_decl','new.py',255),
  ('PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL','PROC_DECL_VOID',12,'p_proc_decl_void','new.py',259),
  ('neural_proc_void_id -> EMPTY','neural_proc_void_id',1,'p_neural_proc_void_id','new.py',263),
  ('PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL','PROC_DECL_RETURN',13,'p_proc_decl_return','new.py',273),
  ('neural_proc_return_id -> EMPTY','neural_proc_return_id',1,'p_neural_proc_return_id','new.py',277),
  ('neural_param_decl -> EMPTY','neural_param_decl',1,'p_neural_param_decl','new.py',286),
  ('PARAM_DECL -> TYPE ID neuro PARAM_DECL_R','PARAM_DECL',4,'p_param_decl','new.py',289),
  ('PARAM_DECL -> EMPTY','PARAM_DECL',1,'p_param_decl','new.py',290),
  ('neuro -> EMPTY','neuro',1,'p_neuro','new.py',296),
  ('PARAM_DECL_R -> COMMA PARAM_DECL','PARAM_DECL_R',2,'p_param_decl_r','new.py',314),
  ('PARAM_DECL_R -> EMPTY','PARAM_DECL_R',1,'p_param_decl_r','new.py',315),
  ('PROC_BODY -> STATEMENT PROC_BODY_R','PROC_BODY',2,'p_proc_body','new.py',318),
  ('PROC_BODY_R -> PROC_BODY','PROC_BODY_R',1,'p_proc_body_r','new.py',321),
  ('PROC_BODY_R -> EMPTY','PROC_BODY_R',1,'p_proc_body_r','new.py',322),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','new.py',325),
  ('STATEMENT -> FUNC_CALL SEMICOLON','STATEMENT',2,'p_statement','new.py',326),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','new.py',327),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','new.py',328),
  ('STATEMENT -> FLOW','STATEMENT',1,'p_statement','new.py',329),
  ('STATEMENT_R -> STATEMENT STATEMENT_R','STATEMENT_R',2,'p_statement_r','new.py',333),
  ('STATEMENT_R -> EMPTY','STATEMENT_R',1,'p_statement_r','new.py',334),
  ('FLOW -> DECISION','FLOW',1,'p_flow','new.py',337),
  ('FLOW -> LOOP','FLOW',1,'p_flow','new.py',338),
  ('LOOP -> WHILE_LOOP','LOOP',1,'p_loop','new.py',341),
  ('LOOP -> DO_WHILE_LOOP SEMICOLON','LOOP',2,'p_loop','new.py',342),
  ('LOOP -> FOR_LOOP','LOOP',1,'p_loop','new.py',343),
  ('DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL','DO_WHILE_LOOP',10,'p_do_while_loop','new.py',346),
  ('DW_PREV_NEURAL -> EMPTY','DW_PREV_NEURAL',1,'p_dw_prev_neural','new.py',350),
  ('DW_END_NEURAL -> EMPTY','DW_END_NEURAL',1,'p_dw_end_neural','new.py',355),
  ('WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL','WHILE_LOOP',10,'p_while_loop','new.py',366),
  ('WHILE_PREV_NEURAL -> EMPTY','WHILE_PREV_NEURAL',1,'p_while_prev_neural','new.py',370),
  ('WHILE_POST_NEURAL -> EMPTY','WHILE_POST_NEURAL',1,'p_while_post_neural','new.py',375),
  ('WHILE_END_NEURAL -> EMPTY','WHILE_END_NEURAL',1,'p_while_end_neural','new.py',387),
  ('FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND','FOR_LOOP',10,'p_for_loop','new.py',397),
  ('DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL','DECISION',10,'p_decision','new.py',400),
  ('EXP_RESULT_NEURAL -> EMPTY','EXP_RESULT_NEURAL',1,'p_exp_result_neural','new.py',403),
  ('DECISION_END_NEURAL -> EMPTY','DECISION_END_NEURAL',1,'p_decision_end_neural','new.py',415),
  ('DECISION_ALT -> ELSE','DECISION_ALT',1,'p_decision_alt','new.py',420),
  ('DECISION_ALT -> EMPTY','DECISION_ALT',1,'p_decision_alt','new.py',421),
  ('ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND','ELSE',5,'p_else','new.py',424),
  ('ELSE_NEURAL -> EMPTY','ELSE_NEURAL',1,'p_else_neural','new.py',428),
  ('ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL','ASSIGN',6,'p_assign','new.py',436),
  ('ASSI_H_EXP_NEURAL -> EMPTY','ASSI_H_EXP_NEURAL',1,'p_assi_h_exp_neural','new.py',439),
  ('EQUALS_NEURAL -> EMPTY','EQUALS_NEURAL',1,'p_equals_neural','new.py',462),
  ('ASSIGN_VAR_N -> EMPTY','ASSIGN_VAR_N',1,'p_assing_var_n','new.py',466),
  ('VAR -> ID','VAR',1,'p_var','new.py',476),
  ('VAR -> ARRAY','VAR',1,'p_var','new.py',477),
  ('ARRAY -> ID LBRACE INT RBRACE','ARRAY',4,'p_array','new.py',481),
  ('FUNC_CALL -> ID LPAREN ARG_LIST RPAREN','FUNC_CALL',4,'p_func_call','new.py',484),
  ('ARG_LIST -> VAR ARG_LIST_R','ARG_LIST',2,'p_arg_list','new.py',487),
  ('ARG_LIST -> CONSTANT ARG_LIST_R','ARG_LIST',2,'p_arg_list','new.py',488),
  ('ARG_LIST -> ARG_LIST_R','ARG_LIST',1,'p_arg_list','new.py',489),
  ('ARG_LIST_R -> COMMA ARG_LIST','ARG_LIST_R',2,'p_arglist_r','new.py',492),
  ('ARG_LIST_R -> EMPTY','ARG_LIST_R',1,'p_arglist_r','new.py',493),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','new.py',496),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','new.py',497),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','new.py',498),
  ('READ -> READ_K LPAREN ID_LIST RPAREN','READ',4,'p_read','new.py',502),
  ('ID_LIST -> ID READ_NEURAL ID_LIST_R','ID_LIST',3,'p_id_list','new.py',505),
  ('READ_NEURAL -> EMPTY','READ_NEURAL',1,'p_read_neural','new.py',508),
  ('ID_LIST_R -> COMMA ID_LIST','ID_LIST_R',2,'p_id_list_r','new.py',513),
  ('ID_LIST_R -> EMPTY','ID_LIST_R',1,'p_id_list_r','new.py',514),
  ('WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN','WRITE',4,'p_write','new.py',517),
  ('WRITE_LIST -> H_EXPRESSION WRITE_LIST_R','WRITE_LIST',2,'p_write_list','new.py',520),
  ('WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R','WRITE_LIST',3,'p_write_list','new.py',521),
  ('CONSTANT_WRITE_N -> EMPTY','CONSTANT_WRITE_N',1,'p_constant_write_n','new.py',524),
  ('WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST','WRITE_LIST_R',3,'p_write_list_r','new.py',528),
  ('WRITE_LIST_R -> WRITE_NEURAL EMPTY','WRITE_LIST_R',2,'p_write_list_r','new.py',529),
  ('WRITE_NEURAL -> EMPTY','WRITE_NEURAL',1,'p_write_neural','new.py',532),
  ('RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','new.py',540),
  ('EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R','EXPRESSION',3,'p_expression','new.py',544),
  ('NEURAL_EXPRESSION -> EMPTY','NEURAL_EXPRESSION',1,'p_neural_expression','new.py',549),
  ('EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',578),
  ('EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',579),
  ('EXPRESSION_R -> EMPTY','EXPRESSION_R',1,'p_expression_r','new.py',580),
  ('NEURAL_PLUS -> EMPTY','NEURAL_PLUS',1,'p_neural_plus','new.py',584),
  ('NEURAL_MINUS -> EMPTY','NEURAL_MINUS',1,'p_neural_minus','new.py',590),
  ('TERM -> FACTOR NEURAL_TERM TERM_R','TERM',3,'p_term','new.py',595),
  ('NEURAL_TERM -> EMPTY','NEURAL_TERM',1,'p_neural_term','new.py',599),
  ('TERM_R -> TIMES NEURAL_TIMES TERM','TERM_R',3,'p_term_r','new.py',626),
  ('TERM_R -> DIVIDE NEURAL_DIVIDE TERM','TERM_R',3,'p_term_r','new.py',627),
  ('TERM_R -> EMPTY','TERM_R',1,'p_term_r','new.py',628),
  ('NEURAL_TIMES -> EMPTY','NEURAL_TIMES',1,'p_neural_times','new.py',632),
  ('NEURAL_DIVIDE -> EMPTY','NEURAL_DIVIDE',1,'p_neural_divide','new.py',637),
  ('FACTOR -> ID NEURAL_ID_FAC','FACTOR',2,'p_factor_','new.py',642),
  ('FACTOR -> CONSTANT NEURAL_CNT_FACT','FACTOR',2,'p_factor_','new.py',643),
  ('FACTOR -> LPAREN H_EXPRESSION RPAREN','FACTOR',3,'p_factor_','new.py',644),
  ('NEURAL_ID_FAC -> EMPTY','NEURAL_ID_FAC',1,'p_neural_id_fac','new.py',648),
  ('NEURAL_CNT_FACT -> EMPTY','NEURAL_CNT_FACT',1,'p_neural_cnt_fact','new.py',663),
  ('S_EXPRESSION -> EXPRESSION','S_EXPRESSION',1,'p_s_expression','new.py',674),
  ('S_EXPRESSION -> EXPRESSION GT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',675),
  ('S_EXPRESSION -> EXPRESSION LT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',676),
  ('S_EXPRESSION -> EXPRESSION GTE EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',677),
  ('S_EXPRESSION -> EXPRESSION LTE EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',678),
  ('S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',679),
  ('H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R','H_EXPRESSION',2,'p_h_expression','new.py',683),
  ('H_EXPRESSION_R -> OR H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',687),
  ('H_EXPRESSION_R -> AND H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',688),
  ('H_EXPRESSION_R -> EMPTY','H_EXPRESSION_R',1,'p_h_expression_r','new.py',689),
  ('PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND','PRINCIPAL_BLOCK',6,'p_principal_block','new.py',693),
  ('PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R','PRINCIPAL_BODY',2,'p_principal_body','new.py',697),
  ('PRINCIPAL_BODY -> EMPTY','PRINCIPAL_BODY',1,'p_principal_body','new.py',698),
  ('PRINCIPAL_BODY_R -> PRINCIPAL_BODY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',702),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','new.py',705),
]
