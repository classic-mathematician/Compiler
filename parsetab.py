
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENAND BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MINUS OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON BLOCKneural_program_id : EMPTYBLOCK : VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCKVAR_BLOCK : VARS_K BLOCKSTART VAR_DECL BLOCKENDVAR_DECL : TYPE COLON VAR_LIST SEMICOLON VAR_DECL_RVAR_DECL_R : VAR_DECL\n                  | EMPTYVAR_LIST : VAR VAR_LIST2VAR_LIST2 : COMMA VAR VAR_LIST2\n                 | EMPTYTYPE : INT_K NEURAL_TYPE\n            | FLOAT_K NEURAL_TYPE\n            | STRING_K NEURAL_TYPENEURAL_TYPE : EMPTYPROC_BLOCK : PROC_DECLPROC_DECL : PROC_DECL_RETURN\n                 | PROC_DECL_VOID\n                 | EMPTYPROC_DECL_VOID : FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECLneural_proc_void_id : EMPTYPROC_DECL_RETURN : FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECLPOST_FUNC : EMPTYneural_proc_return_id : EMPTYneural_param_decl : EMPTYPARAM_DECL : TYPE VAR neuro PARAM_DECL_R\n                  | EMPTYneuro : EMPTYPARAM_DECL_R : COMMA PARAM_DECL\n                    | EMPTYPROC_BODY : STATEMENT PROC_BODY_RFN_VARBLOCK : VARS_K BLOCKSTART LS_VARDECL BLOCKENDLS_VARDECL : TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_RLS_VARDECL_R : LS_VARDECL\n                    | EMPTYFNVAR_LS : VAR FNVAR_LS2FNVAR_LS2 : COMMA FNVAR_LS\n                 | EMPTYPROC_BODY_R : PROC_BODY\n                   | EMPTYSTATEMENT : ASSIGN SEMICOLON\n                 | FUNC_CALL SEMICOLON\n                 | READ SEMICOLON\n                 | WRITE SEMICOLON\n                 | FLOW\n                STATEMENT_R : STATEMENT STATEMENT_R\n                   | EMPTYFLOW : DECISION\n            | LOOPLOOP : WHILE_LOOP\n            | DO_WHILE_LOOP SEMICOLON\n            | FOR_LOOPDO_WHILE_LOOP : DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURALDW_PREV_NEURAL : EMPTYDW_END_NEURAL : EMPTYWHILE_LOOP : WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURALWHILE_PREV_NEURAL : EMPTYWHILE_POST_NEURAL : EMPTYWHILE_END_NEURAL : EMPTYFOR_LOOP : FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKENDDECISION : IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURALEXP_RESULT_NEURAL : EMPTYDECISION_END_NEURAL : EMPTYDECISION_ALT : ELSE\n                    | EMPTYELSE : ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKENDELSE_NEURAL : EMPTYASSIGN : VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURALASSI_H_EXP_NEURAL : EMPTYEQUALS_NEURAL : EMPTYASSIGN_VAR_N : EMPTYARR_AC : ID ARR_ID_NP DIM_ACDIM_AC : LBRACE H_EXPRESSION RBRACE DIM_AC_RDIM_AC_R : DIM_AC\n                | EMPTYVAR : ID\n           | ARRAY ARRAY : ID ARR_ID_NP DIMARR_ID_NP : EMPTYDIM : LBRACE INT LIM_NP RBRACE DIM_RLIM_NP : EMPTYDIM_R : DIM\n             | EMPTYFUNC_CALL : ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPARENPOST_VERIFY : EMPTYPRE_VERIFY : EMPTYEXP_LIST : H_EXPRESSION EXP_NEURAL EXP_LIST_2EXP_NEURAL : EMPTYEXP_LIST_2 : COMMA EXP_LIST\n                  | EMPTYCONSTANT : INT\n                | FLOAT\n                | STRINGREAD : READ_K LPAREN ID_LIST RPARENID_LIST : ID READ_NEURAL ID_LIST_RREAD_NEURAL : EMPTYID_LIST_R : COMMA ID_LIST\n                 | EMPTYWRITE : WRITE_K LPAREN WRITE_LIST RPARENWRITE_LIST : H_EXPRESSION WRITE_LIST_R\n                  | CONSTANT CONSTANT_WRITE_N WRITE_LIST_RCONSTANT_WRITE_N : EMPTYWRITE_LIST_R : WRITE_NEURAL COMMA WRITE_LIST\n                    | WRITE_NEURAL EMPTYWRITE_NEURAL : EMPTYRETURN : RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLONEXPRESSION : TERM NEURAL_EXPRESSION EXPRESSION_RNEURAL_EXPRESSION : EMPTYEXPRESSION_R : PLUS NEURAL_PLUS EXPRESSION\n                    | MINUS NEURAL_MINUS EXPRESSION\n                    | EMPTYNEURAL_PLUS : EMPTYNEURAL_MINUS : EMPTYTERM : FACTOR NEURAL_TERM TERM_RNEURAL_TERM : EMPTYTERM_R : TIMES NEURAL_TIMES TERM\n              | DIVIDE NEURAL_DIVIDE TERM\n              | EMPTYNEURAL_TIMES : EMPTYNEURAL_DIVIDE : EMPTYFACTOR : ID NEURAL_ID_FAC\n              | CONSTANT NEURAL_CNT_FACT\n              | LPAREN H_EXPRESSION RPARENNEURAL_ID_FAC : EMPTYNEURAL_CNT_FACT : EMPTYS_EXPRESSION : EXPRESSION S_EXPRESSION_RNEURAL_EXP : EMPTYS_EXPRESSION_R : CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP\n                      | EMPTYNEURAL_CONDI : EMPTYCONDI : GT\n             | LT\n             | LTE\n             | GTE\n             | DOUBLEEQUAL\n             | AND\n             | ORH_EXPRESSION : S_EXPRESSION H_EXPRESSION_RH_EXPRESSION_R : OR H_EXPRESSION\n                      | AND H_EXPRESSION\n                      | EMPTYPRINCIPAL_BLOCK : MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKENDMAIN_NEURAL : EMPTYPRINCIPAL_BODY : STATEMENT PRINCIPAL_BODY_R\n                      | EMPTYPRINCIPAL_BODY_R : PRINCIPAL_BODYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,7,17,91,],[0,-1,-3,-141,]),'ID':([2,19,20,21,22,23,30,31,32,33,35,50,54,55,66,72,77,78,80,82,85,94,95,96,97,102,103,104,105,118,119,122,136,137,145,146,161,162,165,167,168,169,170,171,172,173,184,188,190,200,203,208,209,211,212,215,216,225,232,237,238,239,240,241,242,243,244,245,266,267,270,271,272,275,278,284,285,286,288,295,297,298,300,301,304,310,312,],[3,28,29,-146,-146,-146,-11,-14,-12,-13,43,43,74,43,74,-44,-47,-48,-49,-51,110,-40,-41,-42,-43,121,133,133,-50,-146,133,133,133,74,133,-69,133,133,-146,-130,-131,-132,-133,-134,-135,-136,74,74,74,121,133,133,-129,-146,-146,-146,-146,74,133,133,-111,133,-112,133,-118,133,-119,74,74,133,133,-31,43,-146,74,-146,-63,-64,-146,43,-60,-62,-55,-58,-59,74,-65,]),'SEMICOLON':([3,4,5,41,42,43,44,49,51,62,63,68,69,70,71,81,89,126,127,128,129,130,131,132,133,135,144,149,153,158,160,163,164,166,174,175,176,177,178,179,181,191,192,193,194,202,206,207,210,213,214,217,228,229,230,236,259,260,261,262,263,264,281,282,289,292,294,296,302,303,309,],[-146,6,-2,48,-146,-75,-76,-8,-10,-146,-77,94,95,96,97,105,-9,-146,-90,-91,-92,-146,-146,-146,-146,-146,-146,-93,-98,-121,-137,-140,-125,-128,-146,-107,-146,-114,-120,-123,-124,-79,-81,-82,-146,-122,-138,-139,-106,-110,-113,-117,-67,-68,-83,-146,-127,-126,-108,-109,-115,-116,293,-146,-146,305,-35,-37,-52,-54,-36,]),'VARS_K':([6,142,143,],[9,189,189,]),'FUNCTION_K':([8,34,257,269,273,274,279,],[15,-4,-146,-146,15,-22,15,]),'MAIN_K':([8,10,11,12,13,14,34,257,269,273,274,279,283,291,],[-146,18,-15,-16,-17,-18,-4,-146,-146,-146,-22,-146,-19,-21,]),'BLOCKSTART':([9,45,84,87,88,108,109,113,114,115,180,189,218,219,220,246,247,268,299,],[16,54,-146,-146,-146,137,-53,142,-24,143,-146,226,245,-61,-146,266,-57,278,310,]),'VOID_K':([15,],[20,]),'INT_K':([15,16,46,47,48,140,226,293,],[21,21,21,21,21,21,21,21,]),'FLOAT_K':([15,16,46,47,48,140,226,293,],[22,22,22,22,22,22,22,22,]),'STRING_K':([15,16,46,47,48,140,226,293,],[23,23,23,23,23,23,23,23,]),'LPAREN':([18,26,27,28,29,37,38,39,40,74,75,76,79,83,100,101,103,104,106,107,118,119,122,136,145,146,161,162,165,167,168,169,170,171,172,173,203,208,209,211,212,215,216,232,237,238,239,240,241,242,243,244,248,251,267,270,],[-146,36,-142,-146,-146,46,-23,47,-20,-146,102,103,104,-146,119,-85,122,122,136,-56,-146,122,122,122,122,-69,122,122,-146,-130,-131,-132,-133,-134,-135,-136,122,122,-129,-146,-146,-146,-146,122,122,-111,122,-112,122,-118,122,-119,267,270,122,122,]),'COLON':([21,22,23,25,30,31,32,33,256,],[-146,-146,-146,35,-11,-14,-12,-13,272,]),'BLOCKEND':([24,48,54,59,60,61,65,66,67,72,77,78,80,82,92,93,94,95,96,97,105,137,183,184,185,222,225,227,245,250,252,253,254,255,265,266,275,276,278,284,285,286,288,290,293,297,298,300,301,304,305,306,307,308,310,311,312,],[34,-146,-146,-5,-6,-7,91,-146,-144,-44,-47,-48,-49,-51,-143,-145,-40,-41,-42,-43,-50,-146,221,-146,-46,-45,-146,257,-146,269,-30,-38,-39,271,275,-146,-146,288,-146,-146,-63,-64,-146,304,-146,-60,-62,-55,-58,-59,-105,-32,-33,-34,-146,312,-65,]),'RPAREN':([36,43,44,46,47,56,57,58,63,86,111,112,120,121,123,124,125,126,127,128,129,130,131,132,133,134,135,139,140,141,144,147,148,150,151,152,154,155,156,157,158,159,160,163,164,166,174,175,176,177,178,179,181,182,187,191,192,193,195,196,197,198,199,201,202,204,205,206,207,210,213,214,217,231,233,234,235,236,258,259,260,261,262,263,264,277,280,],[45,-75,-76,-146,-146,87,-26,88,-77,-146,-146,-27,149,-146,153,-146,-146,-146,-90,-91,-92,-146,-146,-146,-146,180,-146,-25,-146,-29,-146,-146,-146,-146,-95,202,-99,-146,-104,-146,-121,-101,-137,-140,-125,-128,-146,-107,-146,-114,-120,-123,-124,220,-28,-79,-81,-82,230,-84,-146,-87,-94,-97,-122,-103,-100,-138,-139,-106,-110,-113,-117,-86,-89,-96,-102,-146,-88,-127,-126,-108,-109,-115,-116,289,292,]),'COMMA':([42,43,44,62,63,86,111,112,121,124,125,126,127,128,129,130,131,132,133,135,144,148,150,151,155,156,157,158,159,160,163,164,166,174,175,176,177,178,179,181,191,192,193,197,198,202,206,207,210,213,214,217,236,259,260,261,262,263,264,282,],[50,-75,-76,50,-77,-146,140,-27,-146,-146,-146,-146,-90,-91,-92,-146,-146,-146,-146,-146,-146,-146,200,-95,203,-104,-146,-121,-101,-137,-140,-125,-128,-146,-107,-146,-114,-120,-123,-124,-79,-81,-82,232,-87,-122,-138,-139,-106,-110,-113,-117,-146,-127,-126,-108,-109,-115,-116,295,]),'LBRACE':([43,52,53,74,101,144,],[-146,64,-78,-146,-78,64,]),'EQUALS':([44,63,73,74,98,99,110,144,191,192,193,],[-76,-77,-146,-75,118,-70,138,-146,-79,-81,-82,]),'READ_K':([54,66,72,77,78,80,82,94,95,96,97,105,137,184,188,190,225,245,266,271,275,278,284,285,286,288,297,298,300,301,304,310,312,],[75,75,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,75,75,75,75,75,75,75,-31,-146,75,-146,-63,-64,-146,-60,-62,-55,-58,-59,75,-65,]),'WRITE_K':([54,66,72,77,78,80,82,94,95,96,97,105,137,184,188,190,225,245,266,271,275,278,284,285,286,288,297,298,300,301,304,310,312,],[76,76,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,76,76,76,76,76,76,76,-31,-146,76,-146,-63,-64,-146,-60,-62,-55,-58,-59,76,-65,]),'IF_K':([54,66,72,77,78,80,82,94,95,96,97,105,137,184,188,190,225,245,266,271,275,278,284,285,286,288,297,298,300,301,304,310,312,],[79,79,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,79,79,79,79,79,79,79,-31,-146,79,-146,-63,-64,-146,-60,-62,-55,-58,-59,79,-65,]),'WHILE_K':([54,66,72,77,78,80,82,94,95,96,97,105,137,184,188,190,221,225,245,266,271,275,278,284,285,286,288,297,298,300,301,304,310,312,],[83,83,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,83,83,83,83,248,83,83,83,-31,-146,83,-146,-63,-64,-146,-60,-62,-55,-58,-59,83,-65,]),'DO_K':([54,66,72,77,78,80,82,94,95,96,97,105,137,184,188,190,225,245,249,266,271,275,278,284,285,286,288,297,298,300,301,304,310,312,],[84,84,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,84,84,84,84,84,84,268,84,-31,-146,84,-146,-63,-64,-146,-60,-62,-55,-58,-59,84,-65,]),'FOR_K':([54,66,72,77,78,80,82,94,95,96,97,105,137,184,188,190,225,245,266,271,275,278,284,285,286,288,297,298,300,301,304,310,312,],[85,85,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,85,85,85,85,85,85,85,-31,-146,85,-146,-63,-64,-146,-60,-62,-55,-58,-59,85,-65,]),'INT':([64,103,104,118,119,122,136,138,145,146,161,162,165,167,168,169,170,171,172,173,203,208,209,211,212,215,216,223,232,237,238,239,240,241,242,243,244,267,270,],[90,127,127,-146,127,127,127,186,127,-69,127,127,-146,-130,-131,-132,-133,-134,-135,-136,127,127,-129,-146,-146,-146,-146,249,127,127,-111,127,-112,127,-118,127,-119,127,127,]),'RETURN_K':([72,77,78,80,82,94,95,96,97,105,224,225,252,253,254,275,284,285,286,288,297,298,300,301,304,312,],[-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,251,-146,-30,-38,-39,-146,-146,-63,-64,-146,-60,-62,-55,-58,-59,-65,]),'RBRACE':([90,116,117,],[-146,144,-80,]),'FLOAT':([103,104,118,119,122,136,145,146,161,162,165,167,168,169,170,171,172,173,203,208,209,211,212,215,216,232,237,238,239,240,241,242,243,244,267,270,],[128,128,-146,128,128,128,128,-69,128,128,-146,-130,-131,-132,-133,-134,-135,-136,128,128,-129,-146,-146,-146,-146,128,128,-111,128,-112,128,-118,128,-119,128,128,]),'STRING':([103,104,118,119,122,136,145,146,161,162,165,167,168,169,170,171,172,173,203,208,209,211,212,215,216,232,237,238,239,240,241,242,243,244,267,270,],[129,129,-146,129,129,129,129,-69,129,129,-146,-130,-131,-132,-133,-134,-135,-136,129,129,-129,-146,-146,-146,-146,129,129,-111,129,-112,129,-118,129,-119,129,129,]),'TIMES':([125,127,128,129,132,133,135,158,159,176,177,178,179,181,202,],[-146,-90,-91,-92,-146,-146,-146,-121,-124,215,-114,-120,-123,-124,-122,]),'DIVIDE':([125,127,128,129,132,133,135,158,159,176,177,178,179,181,202,],[-146,-90,-91,-92,-146,-146,-146,-121,-124,216,-114,-120,-123,-124,-122,]),'PLUS':([125,127,128,129,131,132,133,135,158,159,174,175,176,177,178,179,181,202,214,217,263,264,],[-146,-90,-91,-92,-146,-146,-146,-146,-121,-124,211,-107,-146,-114,-120,-123,-124,-122,-113,-117,-115,-116,]),'MINUS':([125,127,128,129,131,132,133,135,158,159,174,175,176,177,178,179,181,202,214,217,263,264,],[-146,-90,-91,-92,-146,-146,-146,-146,-121,-124,212,-107,-146,-114,-120,-123,-124,-122,-113,-117,-115,-116,]),'GT':([125,127,128,129,130,131,132,133,135,158,159,174,175,176,177,178,179,181,202,210,213,214,217,261,262,263,264,],[-146,-90,-91,-92,167,-146,-146,-146,-146,-121,-124,-146,-107,-146,-114,-120,-123,-124,-122,-106,-110,-113,-117,-108,-109,-115,-116,]),'LT':([125,127,128,129,130,131,132,133,135,158,159,174,175,176,177,178,179,181,202,210,213,214,217,261,262,263,264,],[-146,-90,-91,-92,168,-146,-146,-146,-146,-121,-124,-146,-107,-146,-114,-120,-123,-124,-122,-106,-110,-113,-117,-108,-109,-115,-116,]),'LTE':([125,127,128,129,130,131,132,133,135,158,159,174,175,176,177,178,179,181,202,210,213,214,217,261,262,263,264,],[-146,-90,-91,-92,169,-146,-146,-146,-146,-121,-124,-146,-107,-146,-114,-120,-123,-124,-122,-106,-110,-113,-117,-108,-109,-115,-116,]),'GTE':([125,127,128,129,130,131,132,133,135,158,159,174,175,176,177,178,179,181,202,210,213,214,217,261,262,263,264,],[-146,-90,-91,-92,170,-146,-146,-146,-146,-121,-124,-146,-107,-146,-114,-120,-123,-124,-122,-106,-110,-113,-117,-108,-109,-115,-116,]),'DOUBLEEQUAL':([125,127,128,129,130,131,132,133,135,158,159,174,175,176,177,178,179,181,202,210,213,214,217,261,262,263,264,],[-146,-90,-91,-92,171,-146,-146,-146,-146,-121,-124,-146,-107,-146,-114,-120,-123,-124,-122,-106,-110,-113,-117,-108,-109,-115,-116,]),'AND':([125,126,127,128,129,130,131,132,133,135,158,159,164,166,174,175,176,177,178,179,181,202,210,213,214,217,236,259,260,261,262,263,264,],[-146,162,-90,-91,-92,172,-146,-146,-146,-146,-121,-124,-125,-128,-146,-107,-146,-114,-120,-123,-124,-122,-106,-110,-113,-117,-146,-127,-126,-108,-109,-115,-116,]),'OR':([125,126,127,128,129,130,131,132,133,135,158,159,164,166,174,175,176,177,178,179,181,202,210,213,214,217,236,259,260,261,262,263,264,],[-146,161,-90,-91,-92,173,-146,-146,-146,-146,-121,-124,-125,-128,-146,-107,-146,-114,-120,-123,-124,-122,-106,-110,-113,-117,-146,-127,-126,-108,-109,-115,-116,]),'TO_K':([186,],[223,]),'ELSE_K':([275,286,287,],[-146,-66,299,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,8,18,21,22,23,28,29,42,43,46,47,48,54,62,66,73,74,83,84,86,87,88,90,111,118,121,124,125,126,130,131,132,133,135,137,140,144,147,148,150,155,157,165,174,176,180,184,194,197,211,212,215,216,220,225,236,245,257,266,269,273,275,278,279,282,284,288,289,293,310,],[5,14,27,31,31,31,38,40,51,53,57,57,61,67,51,67,99,101,107,109,112,114,114,117,141,146,151,156,159,163,166,175,177,179,181,185,57,193,196,198,201,204,156,209,213,217,219,185,229,233,238,240,242,244,247,254,260,185,274,185,274,14,286,185,14,296,298,301,303,308,185,]),'BLOCK':([6,],[7,]),'VAR_BLOCK':([6,],[8,]),'PROC_BLOCK':([8,],[10,]),'PROC_DECL':([8,273,279,],[11,283,291,]),'PROC_DECL_RETURN':([8,273,279,],[12,12,12,]),'PROC_DECL_VOID':([8,273,279,],[13,13,13,]),'PRINCIPAL_BLOCK':([10,],[17,]),'TYPE':([15,16,46,47,48,140,226,293,],[19,25,55,55,25,55,256,256,]),'VAR_DECL':([16,48,],[24,60,]),'MAIN_NEURAL':([18,],[26,]),'NEURAL_TYPE':([21,22,23,],[30,32,33,]),'neural_proc_return_id':([28,],[37,]),'neural_proc_void_id':([29,],[39,]),'VAR_LIST':([35,],[41,]),'VAR':([35,50,54,55,66,137,184,188,190,225,245,266,272,278,295,310,],[42,62,73,86,73,73,73,73,73,73,73,73,282,73,282,73,]),'ARRAY':([35,50,54,55,66,137,184,188,190,225,245,266,272,278,295,310,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'VAR_LIST2':([42,62,],[49,89,]),'ARR_ID_NP':([43,74,],[52,52,]),'PARAM_DECL':([46,47,140,],[56,58,187,]),'VAR_DECL_R':([48,],[59,]),'DIM':([52,144,],[63,192,]),'PRINCIPAL_BODY':([54,66,],[65,93,]),'STATEMENT':([54,66,137,184,188,190,225,245,266,278,310,],[66,66,184,184,225,225,225,184,184,184,184,]),'ASSIGN':([54,66,137,184,188,190,225,245,266,278,310,],[68,68,68,68,68,68,68,68,68,68,68,]),'FUNC_CALL':([54,66,137,184,188,190,225,245,266,278,310,],[69,69,69,69,69,69,69,69,69,69,69,]),'READ':([54,66,137,184,188,190,225,245,266,278,310,],[70,70,70,70,70,70,70,70,70,70,70,]),'WRITE':([54,66,137,184,188,190,225,245,266,278,310,],[71,71,71,71,71,71,71,71,71,71,71,]),'FLOW':([54,66,137,184,188,190,225,245,266,278,310,],[72,72,72,72,72,72,72,72,72,72,72,]),'DECISION':([54,66,137,184,188,190,225,245,266,278,310,],[77,77,77,77,77,77,77,77,77,77,77,]),'LOOP':([54,66,137,184,188,190,225,245,266,278,310,],[78,78,78,78,78,78,78,78,78,78,78,]),'WHILE_LOOP':([54,66,137,184,188,190,225,245,266,278,310,],[80,80,80,80,80,80,80,80,80,80,80,]),'DO_WHILE_LOOP':([54,66,137,184,188,190,225,245,266,278,310,],[81,81,81,81,81,81,81,81,81,81,81,]),'FOR_LOOP':([54,66,137,184,188,190,225,245,266,278,310,],[82,82,82,82,82,82,82,82,82,82,82,]),'PRINCIPAL_BODY_R':([66,],[92,]),'ASSIGN_VAR_N':([73,],[98,]),'PRE_VERIFY':([74,],[100,]),'WHILE_PREV_NEURAL':([83,],[106,]),'DW_PREV_NEURAL':([84,],[108,]),'neuro':([86,],[111,]),'neural_param_decl':([87,88,],[113,115,]),'LIM_NP':([90,],[116,]),'ID_LIST':([102,200,],[120,234,]),'WRITE_LIST':([103,203,],[123,235,]),'H_EXPRESSION':([103,104,119,122,136,145,161,162,203,232,267,270,],[124,134,148,152,182,194,206,207,124,148,277,280,]),'CONSTANT':([103,104,119,122,136,145,161,162,203,208,232,237,239,241,243,267,270,],[125,135,135,135,135,135,135,135,125,135,135,135,135,135,135,135,135,]),'S_EXPRESSION':([103,104,119,122,136,145,161,162,203,232,267,270,],[126,126,126,126,126,126,126,126,126,126,126,126,]),'EXPRESSION':([103,104,119,122,136,145,161,162,203,208,232,237,239,267,270,],[130,130,130,130,130,130,130,130,130,236,130,261,262,130,130,]),'TERM':([103,104,119,122,136,145,161,162,203,208,232,237,239,241,243,267,270,],[131,131,131,131,131,131,131,131,131,131,131,131,131,263,264,131,131,]),'FACTOR':([103,104,119,122,136,145,161,162,203,208,232,237,239,241,243,267,270,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'PARAM_DECL_R':([111,],[139,]),'EQUALS_NEURAL':([118,],[145,]),'EXP_LIST':([119,232,],[147,258,]),'READ_NEURAL':([121,],[150,]),'WRITE_LIST_R':([124,157,],[154,205,]),'WRITE_NEURAL':([124,157,],[155,155,]),'CONSTANT_WRITE_N':([125,],[157,]),'NEURAL_CNT_FACT':([125,135,],[158,158,]),'H_EXPRESSION_R':([126,],[160,]),'S_EXPRESSION_R':([130,],[164,]),'CONDI':([130,],[165,]),'NEURAL_EXPRESSION':([131,],[174,]),'NEURAL_TERM':([132,],[176,]),'NEURAL_ID_FAC':([133,],[178,]),'STATEMENT_R':([137,184,245,266,278,310,],[183,222,265,276,290,311,]),'FN_VARBLOCK':([142,143,],[188,190,]),'DIM_R':([144,],[191,]),'POST_VERIFY':([147,],[195,]),'EXP_NEURAL':([148,],[197,]),'ID_LIST_R':([150,],[199,]),'NEURAL_CONDI':([165,],[208,]),'EXPRESSION_R':([174,],[210,]),'TERM_R':([176,],[214,]),'EXP_RESULT_NEURAL':([180,],[218,]),'PROC_BODY':([188,190,225,],[224,227,253,]),'ASSI_H_EXP_NEURAL':([194,],[228,]),'EXP_LIST_2':([197,],[231,]),'NEURAL_PLUS':([211,],[237,]),'NEURAL_MINUS':([212,],[239,]),'NEURAL_TIMES':([215,],[241,]),'NEURAL_DIVIDE':([216,],[243,]),'WHILE_POST_NEURAL':([220,],[246,]),'RETURN':([224,],[250,]),'PROC_BODY_R':([225,],[252,]),'LS_VARDECL':([226,293,],[255,307,]),'NEURAL_EXP':([236,],[259,]),'POST_FUNC':([257,269,],[273,279,]),'FNVAR_LS':([272,295,],[281,309,]),'DECISION_ALT':([275,],[284,]),'ELSE':([275,],[285,]),'ELSE_NEURAL':([275,],[287,]),'FNVAR_LS2':([282,],[294,]),'DECISION_END_NEURAL':([284,],[297,]),'WHILE_END_NEURAL':([288,],[300,]),'DW_END_NEURAL':([289,],[302,]),'LS_VARDECL_R':([293,],[306,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK','PROGRAM',5,'p_program','new.py',183),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','new.py',188),
  ('BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK','BLOCK',3,'p_block','new.py',202),
  ('VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND','VAR_BLOCK',4,'p_var_block','new.py',205),
  ('VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R','VAR_DECL',5,'p_var_decl','new.py',208),
  ('VAR_DECL_R -> VAR_DECL','VAR_DECL_R',1,'p_var_decl_r','new.py',211),
  ('VAR_DECL_R -> EMPTY','VAR_DECL_R',1,'p_var_decl_r','new.py',212),
  ('VAR_LIST -> VAR VAR_LIST2','VAR_LIST',2,'p_var_list','new.py',215),
  ('VAR_LIST2 -> COMMA VAR VAR_LIST2','VAR_LIST2',3,'p_var_list2','new.py',219),
  ('VAR_LIST2 -> EMPTY','VAR_LIST2',1,'p_var_list2','new.py',220),
  ('TYPE -> INT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',249),
  ('TYPE -> FLOAT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',250),
  ('TYPE -> STRING_K NEURAL_TYPE','TYPE',2,'p_type','new.py',251),
  ('NEURAL_TYPE -> EMPTY','NEURAL_TYPE',1,'p_neural_type','new.py',259),
  ('PROC_BLOCK -> PROC_DECL','PROC_BLOCK',1,'p_proc_block','new.py',262),
  ('PROC_DECL -> PROC_DECL_RETURN','PROC_DECL',1,'p_proc_decl','new.py',265),
  ('PROC_DECL -> PROC_DECL_VOID','PROC_DECL',1,'p_proc_decl','new.py',266),
  ('PROC_DECL -> EMPTY','PROC_DECL',1,'p_proc_decl','new.py',267),
  ('PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_VOID',14,'p_proc_decl_void','new.py',271),
  ('neural_proc_void_id -> EMPTY','neural_proc_void_id',1,'p_neural_proc_void_id','new.py',276),
  ('PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_RETURN',15,'p_proc_decl_return','new.py',290),
  ('POST_FUNC -> EMPTY','POST_FUNC',1,'p_post_func','new.py',295),
  ('neural_proc_return_id -> EMPTY','neural_proc_return_id',1,'p_neural_proc_return_id','new.py',302),
  ('neural_param_decl -> EMPTY','neural_param_decl',1,'p_neural_param_decl','new.py',319),
  ('PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R','PARAM_DECL',4,'p_param_decl','new.py',322),
  ('PARAM_DECL -> EMPTY','PARAM_DECL',1,'p_param_decl','new.py',323),
  ('neuro -> EMPTY','neuro',1,'p_neuro','new.py',328),
  ('PARAM_DECL_R -> COMMA PARAM_DECL','PARAM_DECL_R',2,'p_param_decl_r','new.py',345),
  ('PARAM_DECL_R -> EMPTY','PARAM_DECL_R',1,'p_param_decl_r','new.py',346),
  ('PROC_BODY -> STATEMENT PROC_BODY_R','PROC_BODY',2,'p_proc_body','new.py',349),
  ('FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND','FN_VARBLOCK',4,'p_fn_varblock','new.py',352),
  ('LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R','LS_VARDECL',5,'p_ls_vardecl','new.py',363),
  ('LS_VARDECL_R -> LS_VARDECL','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',367),
  ('LS_VARDECL_R -> EMPTY','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',368),
  ('FNVAR_LS -> VAR FNVAR_LS2','FNVAR_LS',2,'p_fnvar_ls','new.py',372),
  ('FNVAR_LS2 -> COMMA FNVAR_LS','FNVAR_LS2',2,'p_fnvar_ls2','new.py',377),
  ('FNVAR_LS2 -> EMPTY','FNVAR_LS2',1,'p_fnvar_ls2','new.py',378),
  ('PROC_BODY_R -> PROC_BODY','PROC_BODY_R',1,'p_proc_body_r','new.py',398),
  ('PROC_BODY_R -> EMPTY','PROC_BODY_R',1,'p_proc_body_r','new.py',399),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','new.py',403),
  ('STATEMENT -> FUNC_CALL SEMICOLON','STATEMENT',2,'p_statement','new.py',404),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','new.py',405),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','new.py',406),
  ('STATEMENT -> FLOW','STATEMENT',1,'p_statement','new.py',407),
  ('STATEMENT_R -> STATEMENT STATEMENT_R','STATEMENT_R',2,'p_statement_r','new.py',412),
  ('STATEMENT_R -> EMPTY','STATEMENT_R',1,'p_statement_r','new.py',413),
  ('FLOW -> DECISION','FLOW',1,'p_flow','new.py',417),
  ('FLOW -> LOOP','FLOW',1,'p_flow','new.py',418),
  ('LOOP -> WHILE_LOOP','LOOP',1,'p_loop','new.py',422),
  ('LOOP -> DO_WHILE_LOOP SEMICOLON','LOOP',2,'p_loop','new.py',423),
  ('LOOP -> FOR_LOOP','LOOP',1,'p_loop','new.py',424),
  ('DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL','DO_WHILE_LOOP',10,'p_do_while_loop','new.py',428),
  ('DW_PREV_NEURAL -> EMPTY','DW_PREV_NEURAL',1,'p_dw_prev_neural','new.py',432),
  ('DW_END_NEURAL -> EMPTY','DW_END_NEURAL',1,'p_dw_end_neural','new.py',437),
  ('WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL','WHILE_LOOP',10,'p_while_loop','new.py',448),
  ('WHILE_PREV_NEURAL -> EMPTY','WHILE_PREV_NEURAL',1,'p_while_prev_neural','new.py',452),
  ('WHILE_POST_NEURAL -> EMPTY','WHILE_POST_NEURAL',1,'p_while_post_neural','new.py',457),
  ('WHILE_END_NEURAL -> EMPTY','WHILE_END_NEURAL',1,'p_while_end_neural','new.py',469),
  ('FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND','FOR_LOOP',10,'p_for_loop','new.py',479),
  ('DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL','DECISION',10,'p_decision','new.py',482),
  ('EXP_RESULT_NEURAL -> EMPTY','EXP_RESULT_NEURAL',1,'p_exp_result_neural','new.py',485),
  ('DECISION_END_NEURAL -> EMPTY','DECISION_END_NEURAL',1,'p_decision_end_neural','new.py',497),
  ('DECISION_ALT -> ELSE','DECISION_ALT',1,'p_decision_alt','new.py',502),
  ('DECISION_ALT -> EMPTY','DECISION_ALT',1,'p_decision_alt','new.py',503),
  ('ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND','ELSE',5,'p_else','new.py',506),
  ('ELSE_NEURAL -> EMPTY','ELSE_NEURAL',1,'p_else_neural','new.py',510),
  ('ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL','ASSIGN',6,'p_assign','new.py',518),
  ('ASSI_H_EXP_NEURAL -> EMPTY','ASSI_H_EXP_NEURAL',1,'p_assi_h_exp_neural','new.py',522),
  ('EQUALS_NEURAL -> EMPTY','EQUALS_NEURAL',1,'p_equals_neural','new.py',547),
  ('ASSIGN_VAR_N -> EMPTY','ASSIGN_VAR_N',1,'p_assing_var_n','new.py',551),
  ('ARR_AC -> ID ARR_ID_NP DIM_AC','ARR_AC',3,'p_arr_ac','new.py',576),
  ('DIM_AC -> LBRACE H_EXPRESSION RBRACE DIM_AC_R','DIM_AC',4,'p_dim_ac','new.py',609),
  ('DIM_AC_R -> DIM_AC','DIM_AC_R',1,'p_dim_ac_r','new.py',613),
  ('DIM_AC_R -> EMPTY','DIM_AC_R',1,'p_dim_ac_r','new.py',614),
  ('VAR -> ID','VAR',1,'p_var','new.py',617),
  ('VAR -> ARRAY','VAR',1,'p_var','new.py',618),
  ('ARRAY -> ID ARR_ID_NP DIM','ARRAY',3,'p_array','new.py',626),
  ('ARR_ID_NP -> EMPTY','ARR_ID_NP',1,'p_arr_id_np','new.py',662),
  ('DIM -> LBRACE INT LIM_NP RBRACE DIM_R','DIM',5,'p_dim','new.py',672),
  ('LIM_NP -> EMPTY','LIM_NP',1,'p_lim_np','new.py',679),
  ('DIM_R -> DIM','DIM_R',1,'p_dim_r','new.py',688),
  ('DIM_R -> EMPTY','DIM_R',1,'p_dim_r','new.py',689),
  ('FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN','FUNC_CALL',6,'p_func_call','new.py',695),
  ('POST_VERIFY -> EMPTY','POST_VERIFY',1,'p_post_verify','new.py',699),
  ('PRE_VERIFY -> EMPTY','PRE_VERIFY',1,'p_pre_verify','new.py',721),
  ('EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2','EXP_LIST',3,'p_exp_list','new.py',741),
  ('EXP_NEURAL -> EMPTY','EXP_NEURAL',1,'p_exp_neural','new.py',745),
  ('EXP_LIST_2 -> COMMA EXP_LIST','EXP_LIST_2',2,'p_exp_list_2','new.py',760),
  ('EXP_LIST_2 -> EMPTY','EXP_LIST_2',1,'p_exp_list_2','new.py',761),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','new.py',765),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','new.py',766),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','new.py',767),
  ('READ -> READ_K LPAREN ID_LIST RPAREN','READ',4,'p_read','new.py',772),
  ('ID_LIST -> ID READ_NEURAL ID_LIST_R','ID_LIST',3,'p_id_list','new.py',775),
  ('READ_NEURAL -> EMPTY','READ_NEURAL',1,'p_read_neural','new.py',778),
  ('ID_LIST_R -> COMMA ID_LIST','ID_LIST_R',2,'p_id_list_r','new.py',783),
  ('ID_LIST_R -> EMPTY','ID_LIST_R',1,'p_id_list_r','new.py',784),
  ('WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN','WRITE',4,'p_write','new.py',787),
  ('WRITE_LIST -> H_EXPRESSION WRITE_LIST_R','WRITE_LIST',2,'p_write_list','new.py',790),
  ('WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R','WRITE_LIST',3,'p_write_list','new.py',791),
  ('CONSTANT_WRITE_N -> EMPTY','CONSTANT_WRITE_N',1,'p_constant_write_n','new.py',794),
  ('WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST','WRITE_LIST_R',3,'p_write_list_r','new.py',801),
  ('WRITE_LIST_R -> WRITE_NEURAL EMPTY','WRITE_LIST_R',2,'p_write_list_r','new.py',802),
  ('WRITE_NEURAL -> EMPTY','WRITE_NEURAL',1,'p_write_neural','new.py',805),
  ('RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','new.py',812),
  ('EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R','EXPRESSION',3,'p_expression','new.py',817),
  ('NEURAL_EXPRESSION -> EMPTY','NEURAL_EXPRESSION',1,'p_neural_expression','new.py',822),
  ('EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',851),
  ('EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',852),
  ('EXPRESSION_R -> EMPTY','EXPRESSION_R',1,'p_expression_r','new.py',853),
  ('NEURAL_PLUS -> EMPTY','NEURAL_PLUS',1,'p_neural_plus','new.py',857),
  ('NEURAL_MINUS -> EMPTY','NEURAL_MINUS',1,'p_neural_minus','new.py',863),
  ('TERM -> FACTOR NEURAL_TERM TERM_R','TERM',3,'p_term','new.py',868),
  ('NEURAL_TERM -> EMPTY','NEURAL_TERM',1,'p_neural_term','new.py',872),
  ('TERM_R -> TIMES NEURAL_TIMES TERM','TERM_R',3,'p_term_r','new.py',900),
  ('TERM_R -> DIVIDE NEURAL_DIVIDE TERM','TERM_R',3,'p_term_r','new.py',901),
  ('TERM_R -> EMPTY','TERM_R',1,'p_term_r','new.py',902),
  ('NEURAL_TIMES -> EMPTY','NEURAL_TIMES',1,'p_neural_times','new.py',906),
  ('NEURAL_DIVIDE -> EMPTY','NEURAL_DIVIDE',1,'p_neural_divide','new.py',911),
  ('FACTOR -> ID NEURAL_ID_FAC','FACTOR',2,'p_factor_','new.py',916),
  ('FACTOR -> CONSTANT NEURAL_CNT_FACT','FACTOR',2,'p_factor_','new.py',917),
  ('FACTOR -> LPAREN H_EXPRESSION RPAREN','FACTOR',3,'p_factor_','new.py',918),
  ('NEURAL_ID_FAC -> EMPTY','NEURAL_ID_FAC',1,'p_neural_id_fac','new.py',922),
  ('NEURAL_CNT_FACT -> EMPTY','NEURAL_CNT_FACT',1,'p_neural_cnt_fact','new.py',946),
  ('S_EXPRESSION -> EXPRESSION S_EXPRESSION_R','S_EXPRESSION',2,'p_s_expression','new.py',972),
  ('NEURAL_EXP -> EMPTY','NEURAL_EXP',1,'p_neural_exp','new.py',976),
  ('S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP','S_EXPRESSION_R',4,'p_s_expression_r','new.py',1002),
  ('S_EXPRESSION_R -> EMPTY','S_EXPRESSION_R',1,'p_s_expression_r','new.py',1003),
  ('NEURAL_CONDI -> EMPTY','NEURAL_CONDI',1,'p_neural_condi','new.py',1007),
  ('CONDI -> GT','CONDI',1,'p_condi','new.py',1014),
  ('CONDI -> LT','CONDI',1,'p_condi','new.py',1015),
  ('CONDI -> LTE','CONDI',1,'p_condi','new.py',1016),
  ('CONDI -> GTE','CONDI',1,'p_condi','new.py',1017),
  ('CONDI -> DOUBLEEQUAL','CONDI',1,'p_condi','new.py',1018),
  ('CONDI -> AND','CONDI',1,'p_condi','new.py',1019),
  ('CONDI -> OR','CONDI',1,'p_condi','new.py',1020),
  ('H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R','H_EXPRESSION',2,'p_h_expression','new.py',1029),
  ('H_EXPRESSION_R -> OR H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',1033),
  ('H_EXPRESSION_R -> AND H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',1034),
  ('H_EXPRESSION_R -> EMPTY','H_EXPRESSION_R',1,'p_h_expression_r','new.py',1035),
  ('PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND','PRINCIPAL_BLOCK',7,'p_principal_block','new.py',1039),
  ('MAIN_NEURAL -> EMPTY','MAIN_NEURAL',1,'p_main_neural','new.py',1043),
  ('PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R','PRINCIPAL_BODY',2,'p_principal_body','new.py',1053),
  ('PRINCIPAL_BODY -> EMPTY','PRINCIPAL_BODY',1,'p_principal_body','new.py',1054),
  ('PRINCIPAL_BODY_R -> PRINCIPAL_BODY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',1058),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','new.py',1061),
]
