
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENAND BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MINUS OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON BLOCKneural_program_id : EMPTYBLOCK : VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCKVAR_BLOCK : VARS_K BLOCKSTART VAR_DECL BLOCKENDVAR_DECL : TYPE COLON VAR_LIST SEMICOLON VAR_DECL_RVAR_DECL_R : VAR_DECL\n                  | EMPTYVAR_LIST : ID VAR_LIST2VAR_LIST2 : COMMA ID VAR_LIST2\n                 | EMPTYTYPE : INT_K NEURAL_TYPE\n            | FLOAT_K NEURAL_TYPE\n            | STRING_K NEURAL_TYPENEURAL_TYPE : EMPTYPROC_BLOCK : PROC_DECLPROC_DECL : PROC_DECL_RETURN\n                 | PROC_DECL_VOID\n                 | EMPTYPROC_DECL_VOID : FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECLneural_proc_void_id : EMPTYPROC_DECL_RETURN : FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECLPOST_FUNC : EMPTYneural_proc_return_id : EMPTYneural_param_decl : EMPTYPARAM_DECL : TYPE ID neuro PARAM_DECL_R\n                  | EMPTYneuro : EMPTYPARAM_DECL_R : COMMA PARAM_DECL\n                    | EMPTYPROC_BODY : STATEMENT PROC_BODY_RFN_VARBLOCK : VARS_K BLOCKSTART LS_VARDECL BLOCKENDLS_VARDECL : TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_RLS_VARDECL_R : LS_VARDECL\n                    | EMPTYFNVAR_LS : ID FNVAR_LS2FNVAR_LS2 : COMMA ID FNVAR_LS2\n                 | EMPTYPROC_BODY_R : PROC_BODY\n                   | EMPTYSTATEMENT : ASSIGN SEMICOLON\n                 | V_FUNC_CALL SEMICOLON\n                 | READ SEMICOLON\n                 | WRITE SEMICOLON\n                 | FLOW\n                STATEMENT_R : STATEMENT STATEMENT_R\n                   | EMPTYFLOW : DECISION\n            | LOOPLOOP : WHILE_LOOP\n            | DO_WHILE_LOOP SEMICOLON\n            | FOR_LOOPDO_WHILE_LOOP : DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURALDW_PREV_NEURAL : EMPTYDW_END_NEURAL : EMPTYWHILE_LOOP : WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURALWHILE_PREV_NEURAL : EMPTYWHILE_POST_NEURAL : EMPTYWHILE_END_NEURAL : EMPTYFOR_LOOP : FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKENDDECISION : IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURALEXP_RESULT_NEURAL : EMPTYDECISION_END_NEURAL : EMPTYDECISION_ALT : ELSE\n                    | EMPTYELSE : ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKENDELSE_NEURAL : EMPTYASSIGN : VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURALASSI_H_EXP_NEURAL : EMPTYEQUALS_NEURAL : EMPTYASSIGN_VAR_N : EMPTYVAR : ID\n           | ARRAYARRAY : ID LBRACE INT RBRACEV_FUNC_CALL : ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPARENPOST_VERIFY : EMPTYPRE_VERIFY : EMPTYEXP_LIST : H_EXPRESSION EXP_NEURAL EXP_LIST_2EXP_NEURAL : EMPTYEXP_LIST_2 : COMMA EXP_LIST\n                  | EMPTYCONSTANT : INT\n                | FLOAT\n                | STRINGREAD : READ_K LPAREN ID_LIST RPARENID_LIST : ID READ_NEURAL ID_LIST_RREAD_NEURAL : EMPTYID_LIST_R : COMMA ID_LIST\n                 | EMPTYWRITE : WRITE_K LPAREN WRITE_LIST RPARENWRITE_LIST : H_EXPRESSION WRITE_LIST_R\n                  | CONSTANT CONSTANT_WRITE_N WRITE_LIST_RCONSTANT_WRITE_N : EMPTYWRITE_LIST_R : WRITE_NEURAL COMMA WRITE_LIST\n                    | WRITE_NEURAL EMPTYWRITE_NEURAL : EMPTYRETURN : RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLONEXPRESSION : TERM NEURAL_EXPRESSION EXPRESSION_RNEURAL_EXPRESSION : EMPTYEXPRESSION_R : PLUS NEURAL_PLUS EXPRESSION\n                    | MINUS NEURAL_MINUS EXPRESSION\n                    | EMPTYNEURAL_PLUS : EMPTYNEURAL_MINUS : EMPTYTERM : FACTOR NEURAL_TERM TERM_RNEURAL_TERM : EMPTYTERM_R : TIMES NEURAL_TIMES TERM\n              | DIVIDE NEURAL_DIVIDE TERM\n              | EMPTYNEURAL_TIMES : EMPTYNEURAL_DIVIDE : EMPTYFACTOR : ID NEURAL_ID_FAC\n              | CONSTANT NEURAL_CNT_FACT\n              | LPAREN H_EXPRESSION RPARENNEURAL_ID_FAC : EMPTYNEURAL_CNT_FACT : EMPTYS_EXPRESSION : EXPRESSION S_EXPRESSION_RNEURAL_EXP : EMPTYS_EXPRESSION_R : CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP\n                      | EMPTYNEURAL_CONDI : EMPTYCONDI : GT\n             | LT\n             | LTE\n             | GTE\n             | DOUBLEEQUAL\n             | AND\n             | ORH_EXPRESSION : S_EXPRESSION H_EXPRESSION_RH_EXPRESSION_R : OR H_EXPRESSION\n                      | AND H_EXPRESSION\n                      | EMPTYPRINCIPAL_BLOCK : MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKENDMAIN_NEURAL : EMPTYPRINCIPAL_BODY : STATEMENT PRINCIPAL_BODY_R\n                      | EMPTYPRINCIPAL_BODY_R : PRINCIPAL_BODYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,7,17,85,],[0,-1,-3,-132,]),'ID':([2,19,20,21,22,23,30,31,32,33,35,48,50,51,60,66,71,72,75,77,80,88,89,90,91,97,98,99,100,111,112,116,130,131,138,139,155,156,159,161,162,163,164,165,166,167,178,182,184,191,194,199,200,202,203,206,207,216,223,228,229,230,231,232,233,234,235,236,257,258,261,262,263,266,269,275,276,277,279,286,288,289,291,292,295,301,304,],[3,28,29,-137,-137,-137,-11,-14,-12,-13,42,58,68,81,68,-44,-47,-48,-49,-51,105,-40,-41,-42,-43,115,127,127,-50,-137,127,127,127,68,127,-69,127,127,-137,-121,-122,-123,-124,-125,-126,-127,68,68,68,115,127,127,-120,-137,-137,-137,-137,68,127,127,-102,127,-103,127,-109,127,-110,68,68,127,127,-31,273,-137,68,-137,-63,-64,-137,300,-60,-62,-55,-58,-59,68,-65,]),'SEMICOLON':([3,4,5,41,42,47,49,58,62,63,64,65,76,84,120,121,122,123,124,125,126,127,129,143,147,152,154,157,158,160,168,169,170,171,172,173,175,185,193,197,198,201,204,205,208,219,220,221,227,250,251,252,253,254,255,272,273,280,283,285,287,293,294,300,302,],[-137,6,-2,46,-137,-8,-10,-137,88,89,90,91,100,-9,-137,-81,-82,-83,-137,-137,-137,-137,-137,-84,-89,-112,-128,-131,-116,-119,-137,-98,-137,-105,-111,-114,-115,-137,-113,-129,-130,-97,-101,-104,-108,-67,-68,-74,-137,-118,-117,-99,-100,-106,-107,284,-137,-137,296,-35,-37,-52,-54,-137,-36,]),'VARS_K':([6,136,137,],[9,183,183,]),'FUNCTION_K':([8,34,248,260,264,265,270,],[15,-4,-137,-137,15,-22,15,]),'MAIN_K':([8,10,11,12,13,14,34,248,260,264,265,270,274,282,],[-137,18,-15,-16,-17,-18,-4,-137,-137,-137,-22,-137,-19,-21,]),'BLOCKSTART':([9,43,79,82,83,103,104,108,109,110,174,183,209,210,211,237,238,259,290,],[16,50,-137,-137,-137,131,-53,136,-24,137,-137,217,236,-61,-137,257,-57,269,301,]),'VOID_K':([15,],[20,]),'INT_K':([15,16,44,45,46,134,217,284,],[21,21,21,21,21,21,21,21,]),'FLOAT_K':([15,16,44,45,46,134,217,284,],[22,22,22,22,22,22,22,22,]),'STRING_K':([15,16,44,45,46,134,217,284,],[23,23,23,23,23,23,23,23,]),'LPAREN':([18,26,27,28,29,37,38,39,40,68,69,70,74,78,94,96,98,99,101,102,111,112,116,130,138,139,155,156,159,161,162,163,164,165,166,167,194,199,200,202,203,206,207,223,228,229,230,231,232,233,234,235,239,242,258,261,],[-137,36,-133,-137,-137,44,-23,45,-20,-137,97,98,99,-137,112,-76,116,116,130,-56,-137,116,116,116,116,-69,116,116,-137,-121,-122,-123,-124,-125,-126,-127,116,116,-120,-137,-137,-137,-137,116,116,-102,116,-103,116,-109,116,-110,258,261,116,116,]),'COLON':([21,22,23,25,30,31,32,33,247,],[-137,-137,-137,35,-11,-14,-12,-13,263,]),'BLOCKEND':([24,46,50,55,56,57,59,60,61,66,71,72,75,77,86,87,88,89,90,91,100,131,177,178,179,213,216,218,236,241,243,244,245,246,256,257,266,267,269,275,276,277,279,281,284,288,289,291,292,295,296,297,298,299,301,303,304,],[34,-137,-137,-5,-6,-7,85,-137,-135,-44,-47,-48,-49,-51,-134,-136,-40,-41,-42,-43,-50,-137,212,-137,-46,-45,-137,248,-137,260,-30,-38,-39,262,266,-137,-137,279,-137,-137,-63,-64,-137,295,-137,-60,-62,-55,-58,-59,-96,-32,-33,-34,-137,304,-65,]),'RPAREN':([36,44,45,52,53,54,81,106,107,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,133,134,135,140,141,144,145,146,148,149,150,151,152,153,154,157,158,160,168,169,170,171,172,173,175,176,181,186,187,188,189,190,192,193,195,196,197,198,201,204,205,208,222,224,225,226,227,249,250,251,252,253,254,255,268,271,],[43,-137,-137,82,-26,83,-137,-137,-27,143,-137,147,-137,-137,-137,-81,-82,-83,-137,-137,-137,-137,174,-137,-25,-137,-29,-137,-137,-137,-86,193,-90,-137,-95,-137,-112,-92,-128,-131,-116,-119,-137,-98,-137,-105,-111,-114,-115,211,-28,221,-75,-137,-78,-85,-88,-113,-94,-91,-129,-130,-97,-101,-104,-108,-77,-80,-87,-93,-137,-79,-118,-117,-99,-100,-106,-107,280,283,]),'COMMA':([42,58,81,106,107,115,118,119,120,121,122,123,124,125,126,127,129,141,144,145,149,150,151,152,153,154,157,158,160,168,169,170,171,172,173,175,188,189,193,197,198,201,204,205,208,227,250,251,252,253,254,255,273,300,],[48,48,-137,134,-27,-137,-137,-137,-137,-81,-82,-83,-137,-137,-137,-137,-137,-137,191,-86,194,-95,-137,-112,-92,-128,-131,-116,-119,-137,-98,-137,-105,-111,-114,-115,223,-78,-113,-129,-130,-97,-101,-104,-108,-137,-118,-117,-99,-100,-106,-107,286,286,]),'READ_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,178,182,184,216,236,257,262,266,269,275,276,277,279,288,289,291,292,295,301,304,],[69,69,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,69,69,69,69,69,69,69,-31,-137,69,-137,-63,-64,-137,-60,-62,-55,-58,-59,69,-65,]),'WRITE_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,178,182,184,216,236,257,262,266,269,275,276,277,279,288,289,291,292,295,301,304,],[70,70,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,70,70,70,70,70,70,70,-31,-137,70,-137,-63,-64,-137,-60,-62,-55,-58,-59,70,-65,]),'IF_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,178,182,184,216,236,257,262,266,269,275,276,277,279,288,289,291,292,295,301,304,],[74,74,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,74,74,74,74,74,74,74,-31,-137,74,-137,-63,-64,-137,-60,-62,-55,-58,-59,74,-65,]),'WHILE_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,178,182,184,212,216,236,257,262,266,269,275,276,277,279,288,289,291,292,295,301,304,],[78,78,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,78,78,78,78,239,78,78,78,-31,-137,78,-137,-63,-64,-137,-60,-62,-55,-58,-59,78,-65,]),'DO_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,178,182,184,216,236,240,257,262,266,269,275,276,277,279,288,289,291,292,295,301,304,],[79,79,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,79,79,79,79,79,79,259,79,-31,-137,79,-137,-63,-64,-137,-60,-62,-55,-58,-59,79,-65,]),'FOR_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,178,182,184,216,236,257,262,266,269,275,276,277,279,288,289,291,292,295,301,304,],[80,80,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,80,80,80,80,80,80,80,-31,-137,80,-137,-63,-64,-137,-60,-62,-55,-58,-59,80,-65,]),'RETURN_K':([66,71,72,75,77,88,89,90,91,100,215,216,243,244,245,266,275,276,277,279,288,289,291,292,295,304,],[-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,242,-137,-30,-38,-39,-137,-137,-63,-64,-137,-60,-62,-55,-58,-59,-65,]),'EQUALS':([67,68,73,92,93,105,142,],[-137,-71,-72,111,-70,132,-73,]),'LBRACE':([68,],[95,]),'INT':([95,98,99,111,112,116,130,132,138,139,155,156,159,161,162,163,164,165,166,167,194,199,200,202,203,206,207,214,223,228,229,230,231,232,233,234,235,258,261,],[113,121,121,-137,121,121,121,180,121,-69,121,121,-137,-121,-122,-123,-124,-125,-126,-127,121,121,-120,-137,-137,-137,-137,240,121,121,-102,121,-103,121,-109,121,-110,121,121,]),'FLOAT':([98,99,111,112,116,130,138,139,155,156,159,161,162,163,164,165,166,167,194,199,200,202,203,206,207,223,228,229,230,231,232,233,234,235,258,261,],[122,122,-137,122,122,122,122,-69,122,122,-137,-121,-122,-123,-124,-125,-126,-127,122,122,-120,-137,-137,-137,-137,122,122,-102,122,-103,122,-109,122,-110,122,122,]),'STRING':([98,99,111,112,116,130,138,139,155,156,159,161,162,163,164,165,166,167,194,199,200,202,203,206,207,223,228,229,230,231,232,233,234,235,258,261,],[123,123,-137,123,123,123,123,-69,123,123,-137,-121,-122,-123,-124,-125,-126,-127,123,123,-120,-137,-137,-137,-137,123,123,-102,123,-103,123,-109,123,-110,123,123,]),'RBRACE':([113,],[142,]),'TIMES':([119,121,122,123,126,127,129,152,153,170,171,172,173,175,193,],[-137,-81,-82,-83,-137,-137,-137,-112,-115,206,-105,-111,-114,-115,-113,]),'DIVIDE':([119,121,122,123,126,127,129,152,153,170,171,172,173,175,193,],[-137,-81,-82,-83,-137,-137,-137,-112,-115,207,-105,-111,-114,-115,-113,]),'PLUS':([119,121,122,123,125,126,127,129,152,153,168,169,170,171,172,173,175,193,205,208,254,255,],[-137,-81,-82,-83,-137,-137,-137,-137,-112,-115,202,-98,-137,-105,-111,-114,-115,-113,-104,-108,-106,-107,]),'MINUS':([119,121,122,123,125,126,127,129,152,153,168,169,170,171,172,173,175,193,205,208,254,255,],[-137,-81,-82,-83,-137,-137,-137,-137,-112,-115,203,-98,-137,-105,-111,-114,-115,-113,-104,-108,-106,-107,]),'GT':([119,121,122,123,124,125,126,127,129,152,153,168,169,170,171,172,173,175,193,201,204,205,208,252,253,254,255,],[-137,-81,-82,-83,161,-137,-137,-137,-137,-112,-115,-137,-98,-137,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'LT':([119,121,122,123,124,125,126,127,129,152,153,168,169,170,171,172,173,175,193,201,204,205,208,252,253,254,255,],[-137,-81,-82,-83,162,-137,-137,-137,-137,-112,-115,-137,-98,-137,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'LTE':([119,121,122,123,124,125,126,127,129,152,153,168,169,170,171,172,173,175,193,201,204,205,208,252,253,254,255,],[-137,-81,-82,-83,163,-137,-137,-137,-137,-112,-115,-137,-98,-137,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'GTE':([119,121,122,123,124,125,126,127,129,152,153,168,169,170,171,172,173,175,193,201,204,205,208,252,253,254,255,],[-137,-81,-82,-83,164,-137,-137,-137,-137,-112,-115,-137,-98,-137,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'DOUBLEEQUAL':([119,121,122,123,124,125,126,127,129,152,153,168,169,170,171,172,173,175,193,201,204,205,208,252,253,254,255,],[-137,-81,-82,-83,165,-137,-137,-137,-137,-112,-115,-137,-98,-137,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'AND':([119,120,121,122,123,124,125,126,127,129,152,153,158,160,168,169,170,171,172,173,175,193,201,204,205,208,227,250,251,252,253,254,255,],[-137,156,-81,-82,-83,166,-137,-137,-137,-137,-112,-115,-116,-119,-137,-98,-137,-105,-111,-114,-115,-113,-97,-101,-104,-108,-137,-118,-117,-99,-100,-106,-107,]),'OR':([119,120,121,122,123,124,125,126,127,129,152,153,158,160,168,169,170,171,172,173,175,193,201,204,205,208,227,250,251,252,253,254,255,],[-137,155,-81,-82,-83,167,-137,-137,-137,-137,-112,-115,-116,-119,-137,-98,-137,-105,-111,-114,-115,-113,-97,-101,-104,-108,-137,-118,-117,-99,-100,-106,-107,]),'TO_K':([180,],[214,]),'ELSE_K':([266,277,278,],[-137,-66,290,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,8,18,21,22,23,28,29,42,44,45,46,50,58,60,67,68,78,79,81,82,83,106,111,115,118,119,120,124,125,126,127,129,131,134,140,141,144,149,151,159,168,170,174,178,185,188,202,203,206,207,211,216,227,236,248,257,260,264,266,269,270,273,275,279,280,284,300,301,],[5,14,27,31,31,31,38,40,49,53,53,57,61,49,61,93,96,102,104,107,109,109,135,139,145,150,153,157,160,169,171,173,175,179,53,187,189,192,195,150,200,204,208,210,179,220,224,229,231,233,235,238,245,251,179,265,179,265,14,277,179,14,287,289,292,294,299,287,179,]),'BLOCK':([6,],[7,]),'VAR_BLOCK':([6,],[8,]),'PROC_BLOCK':([8,],[10,]),'PROC_DECL':([8,264,270,],[11,274,282,]),'PROC_DECL_RETURN':([8,264,270,],[12,12,12,]),'PROC_DECL_VOID':([8,264,270,],[13,13,13,]),'PRINCIPAL_BLOCK':([10,],[17,]),'TYPE':([15,16,44,45,46,134,217,284,],[19,25,51,51,25,51,247,247,]),'VAR_DECL':([16,46,],[24,56,]),'MAIN_NEURAL':([18,],[26,]),'NEURAL_TYPE':([21,22,23,],[30,32,33,]),'neural_proc_return_id':([28,],[37,]),'neural_proc_void_id':([29,],[39,]),'VAR_LIST':([35,],[41,]),'VAR_LIST2':([42,58,],[47,84,]),'PARAM_DECL':([44,45,134,],[52,54,181,]),'VAR_DECL_R':([46,],[55,]),'PRINCIPAL_BODY':([50,60,],[59,87,]),'STATEMENT':([50,60,131,178,182,184,216,236,257,269,301,],[60,60,178,178,216,216,216,178,178,178,178,]),'ASSIGN':([50,60,131,178,182,184,216,236,257,269,301,],[62,62,62,62,62,62,62,62,62,62,62,]),'V_FUNC_CALL':([50,60,131,178,182,184,216,236,257,269,301,],[63,63,63,63,63,63,63,63,63,63,63,]),'READ':([50,60,131,178,182,184,216,236,257,269,301,],[64,64,64,64,64,64,64,64,64,64,64,]),'WRITE':([50,60,131,178,182,184,216,236,257,269,301,],[65,65,65,65,65,65,65,65,65,65,65,]),'FLOW':([50,60,131,178,182,184,216,236,257,269,301,],[66,66,66,66,66,66,66,66,66,66,66,]),'VAR':([50,60,131,178,182,184,216,236,257,269,301,],[67,67,67,67,67,67,67,67,67,67,67,]),'DECISION':([50,60,131,178,182,184,216,236,257,269,301,],[71,71,71,71,71,71,71,71,71,71,71,]),'LOOP':([50,60,131,178,182,184,216,236,257,269,301,],[72,72,72,72,72,72,72,72,72,72,72,]),'ARRAY':([50,60,131,178,182,184,216,236,257,269,301,],[73,73,73,73,73,73,73,73,73,73,73,]),'WHILE_LOOP':([50,60,131,178,182,184,216,236,257,269,301,],[75,75,75,75,75,75,75,75,75,75,75,]),'DO_WHILE_LOOP':([50,60,131,178,182,184,216,236,257,269,301,],[76,76,76,76,76,76,76,76,76,76,76,]),'FOR_LOOP':([50,60,131,178,182,184,216,236,257,269,301,],[77,77,77,77,77,77,77,77,77,77,77,]),'PRINCIPAL_BODY_R':([60,],[86,]),'ASSIGN_VAR_N':([67,],[92,]),'PRE_VERIFY':([68,],[94,]),'WHILE_PREV_NEURAL':([78,],[101,]),'DW_PREV_NEURAL':([79,],[103,]),'neuro':([81,],[106,]),'neural_param_decl':([82,83,],[108,110,]),'ID_LIST':([97,191,],[114,225,]),'WRITE_LIST':([98,194,],[117,226,]),'H_EXPRESSION':([98,99,112,116,130,138,155,156,194,223,258,261,],[118,128,141,146,176,185,197,198,118,141,268,271,]),'CONSTANT':([98,99,112,116,130,138,155,156,194,199,223,228,230,232,234,258,261,],[119,129,129,129,129,129,129,129,119,129,129,129,129,129,129,129,129,]),'S_EXPRESSION':([98,99,112,116,130,138,155,156,194,223,258,261,],[120,120,120,120,120,120,120,120,120,120,120,120,]),'EXPRESSION':([98,99,112,116,130,138,155,156,194,199,223,228,230,258,261,],[124,124,124,124,124,124,124,124,124,227,124,252,253,124,124,]),'TERM':([98,99,112,116,130,138,155,156,194,199,223,228,230,232,234,258,261,],[125,125,125,125,125,125,125,125,125,125,125,125,125,254,255,125,125,]),'FACTOR':([98,99,112,116,130,138,155,156,194,199,223,228,230,232,234,258,261,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'PARAM_DECL_R':([106,],[133,]),'EQUALS_NEURAL':([111,],[138,]),'EXP_LIST':([112,223,],[140,249,]),'READ_NEURAL':([115,],[144,]),'WRITE_LIST_R':([118,151,],[148,196,]),'WRITE_NEURAL':([118,151,],[149,149,]),'CONSTANT_WRITE_N':([119,],[151,]),'NEURAL_CNT_FACT':([119,129,],[152,152,]),'H_EXPRESSION_R':([120,],[154,]),'S_EXPRESSION_R':([124,],[158,]),'CONDI':([124,],[159,]),'NEURAL_EXPRESSION':([125,],[168,]),'NEURAL_TERM':([126,],[170,]),'NEURAL_ID_FAC':([127,],[172,]),'STATEMENT_R':([131,178,236,257,269,301,],[177,213,256,267,281,303,]),'FN_VARBLOCK':([136,137,],[182,184,]),'POST_VERIFY':([140,],[186,]),'EXP_NEURAL':([141,],[188,]),'ID_LIST_R':([144,],[190,]),'NEURAL_CONDI':([159,],[199,]),'EXPRESSION_R':([168,],[201,]),'TERM_R':([170,],[205,]),'EXP_RESULT_NEURAL':([174,],[209,]),'PROC_BODY':([182,184,216,],[215,218,244,]),'ASSI_H_EXP_NEURAL':([185,],[219,]),'EXP_LIST_2':([188,],[222,]),'NEURAL_PLUS':([202,],[228,]),'NEURAL_MINUS':([203,],[230,]),'NEURAL_TIMES':([206,],[232,]),'NEURAL_DIVIDE':([207,],[234,]),'WHILE_POST_NEURAL':([211,],[237,]),'RETURN':([215,],[241,]),'PROC_BODY_R':([216,],[243,]),'LS_VARDECL':([217,284,],[246,298,]),'NEURAL_EXP':([227,],[250,]),'POST_FUNC':([248,260,],[264,270,]),'FNVAR_LS':([263,],[272,]),'DECISION_ALT':([266,],[275,]),'ELSE':([266,],[276,]),'ELSE_NEURAL':([266,],[278,]),'FNVAR_LS2':([273,300,],[285,302,]),'DECISION_END_NEURAL':([275,],[288,]),'WHILE_END_NEURAL':([279,],[291,]),'DW_END_NEURAL':([280,],[293,]),'LS_VARDECL_R':([284,],[297,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK','PROGRAM',5,'p_program','new.py',183),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','new.py',188),
  ('BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK','BLOCK',3,'p_block','new.py',202),
  ('VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND','VAR_BLOCK',4,'p_var_block','new.py',205),
  ('VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R','VAR_DECL',5,'p_var_decl','new.py',208),
  ('VAR_DECL_R -> VAR_DECL','VAR_DECL_R',1,'p_var_decl_r','new.py',211),
  ('VAR_DECL_R -> EMPTY','VAR_DECL_R',1,'p_var_decl_r','new.py',212),
  ('VAR_LIST -> ID VAR_LIST2','VAR_LIST',2,'p_var_list','new.py',215),
  ('VAR_LIST2 -> COMMA ID VAR_LIST2','VAR_LIST2',3,'p_var_list2','new.py',219),
  ('VAR_LIST2 -> EMPTY','VAR_LIST2',1,'p_var_list2','new.py',220),
  ('TYPE -> INT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',246),
  ('TYPE -> FLOAT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',247),
  ('TYPE -> STRING_K NEURAL_TYPE','TYPE',2,'p_type','new.py',248),
  ('NEURAL_TYPE -> EMPTY','NEURAL_TYPE',1,'p_neural_type','new.py',255),
  ('PROC_BLOCK -> PROC_DECL','PROC_BLOCK',1,'p_proc_block','new.py',258),
  ('PROC_DECL -> PROC_DECL_RETURN','PROC_DECL',1,'p_proc_decl','new.py',261),
  ('PROC_DECL -> PROC_DECL_VOID','PROC_DECL',1,'p_proc_decl','new.py',262),
  ('PROC_DECL -> EMPTY','PROC_DECL',1,'p_proc_decl','new.py',263),
  ('PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_VOID',14,'p_proc_decl_void','new.py',267),
  ('neural_proc_void_id -> EMPTY','neural_proc_void_id',1,'p_neural_proc_void_id','new.py',272),
  ('PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_RETURN',15,'p_proc_decl_return','new.py',286),
  ('POST_FUNC -> EMPTY','POST_FUNC',1,'p_post_func','new.py',291),
  ('neural_proc_return_id -> EMPTY','neural_proc_return_id',1,'p_neural_proc_return_id','new.py',298),
  ('neural_param_decl -> EMPTY','neural_param_decl',1,'p_neural_param_decl','new.py',315),
  ('PARAM_DECL -> TYPE ID neuro PARAM_DECL_R','PARAM_DECL',4,'p_param_decl','new.py',318),
  ('PARAM_DECL -> EMPTY','PARAM_DECL',1,'p_param_decl','new.py',319),
  ('neuro -> EMPTY','neuro',1,'p_neuro','new.py',324),
  ('PARAM_DECL_R -> COMMA PARAM_DECL','PARAM_DECL_R',2,'p_param_decl_r','new.py',342),
  ('PARAM_DECL_R -> EMPTY','PARAM_DECL_R',1,'p_param_decl_r','new.py',343),
  ('PROC_BODY -> STATEMENT PROC_BODY_R','PROC_BODY',2,'p_proc_body','new.py',346),
  ('FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND','FN_VARBLOCK',4,'p_fn_varblock','new.py',349),
  ('LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R','LS_VARDECL',5,'p_ls_vardecl','new.py',360),
  ('LS_VARDECL_R -> LS_VARDECL','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',364),
  ('LS_VARDECL_R -> EMPTY','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',365),
  ('FNVAR_LS -> ID FNVAR_LS2','FNVAR_LS',2,'p_fnvar_ls','new.py',369),
  ('FNVAR_LS2 -> COMMA ID FNVAR_LS2','FNVAR_LS2',3,'p_fnvar_ls2','new.py',373),
  ('FNVAR_LS2 -> EMPTY','FNVAR_LS2',1,'p_fnvar_ls2','new.py',374),
  ('PROC_BODY_R -> PROC_BODY','PROC_BODY_R',1,'p_proc_body_r','new.py',394),
  ('PROC_BODY_R -> EMPTY','PROC_BODY_R',1,'p_proc_body_r','new.py',395),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','new.py',398),
  ('STATEMENT -> V_FUNC_CALL SEMICOLON','STATEMENT',2,'p_statement','new.py',399),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','new.py',400),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','new.py',401),
  ('STATEMENT -> FLOW','STATEMENT',1,'p_statement','new.py',402),
  ('STATEMENT_R -> STATEMENT STATEMENT_R','STATEMENT_R',2,'p_statement_r','new.py',407),
  ('STATEMENT_R -> EMPTY','STATEMENT_R',1,'p_statement_r','new.py',408),
  ('FLOW -> DECISION','FLOW',1,'p_flow','new.py',411),
  ('FLOW -> LOOP','FLOW',1,'p_flow','new.py',412),
  ('LOOP -> WHILE_LOOP','LOOP',1,'p_loop','new.py',415),
  ('LOOP -> DO_WHILE_LOOP SEMICOLON','LOOP',2,'p_loop','new.py',416),
  ('LOOP -> FOR_LOOP','LOOP',1,'p_loop','new.py',417),
  ('DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL','DO_WHILE_LOOP',10,'p_do_while_loop','new.py',420),
  ('DW_PREV_NEURAL -> EMPTY','DW_PREV_NEURAL',1,'p_dw_prev_neural','new.py',424),
  ('DW_END_NEURAL -> EMPTY','DW_END_NEURAL',1,'p_dw_end_neural','new.py',429),
  ('WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL','WHILE_LOOP',10,'p_while_loop','new.py',440),
  ('WHILE_PREV_NEURAL -> EMPTY','WHILE_PREV_NEURAL',1,'p_while_prev_neural','new.py',444),
  ('WHILE_POST_NEURAL -> EMPTY','WHILE_POST_NEURAL',1,'p_while_post_neural','new.py',449),
  ('WHILE_END_NEURAL -> EMPTY','WHILE_END_NEURAL',1,'p_while_end_neural','new.py',461),
  ('FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND','FOR_LOOP',10,'p_for_loop','new.py',471),
  ('DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL','DECISION',10,'p_decision','new.py',474),
  ('EXP_RESULT_NEURAL -> EMPTY','EXP_RESULT_NEURAL',1,'p_exp_result_neural','new.py',477),
  ('DECISION_END_NEURAL -> EMPTY','DECISION_END_NEURAL',1,'p_decision_end_neural','new.py',489),
  ('DECISION_ALT -> ELSE','DECISION_ALT',1,'p_decision_alt','new.py',494),
  ('DECISION_ALT -> EMPTY','DECISION_ALT',1,'p_decision_alt','new.py',495),
  ('ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND','ELSE',5,'p_else','new.py',498),
  ('ELSE_NEURAL -> EMPTY','ELSE_NEURAL',1,'p_else_neural','new.py',502),
  ('ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL','ASSIGN',6,'p_assign','new.py',510),
  ('ASSI_H_EXP_NEURAL -> EMPTY','ASSI_H_EXP_NEURAL',1,'p_assi_h_exp_neural','new.py',513),
  ('EQUALS_NEURAL -> EMPTY','EQUALS_NEURAL',1,'p_equals_neural','new.py',538),
  ('ASSIGN_VAR_N -> EMPTY','ASSIGN_VAR_N',1,'p_assing_var_n','new.py',542),
  ('VAR -> ID','VAR',1,'p_var','new.py',570),
  ('VAR -> ARRAY','VAR',1,'p_var','new.py',571),
  ('ARRAY -> ID LBRACE INT RBRACE','ARRAY',4,'p_array','new.py',575),
  ('V_FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN','V_FUNC_CALL',6,'p_v_func_call','new.py',578),
  ('POST_VERIFY -> EMPTY','POST_VERIFY',1,'p_post_verify','new.py',584),
  ('PRE_VERIFY -> EMPTY','PRE_VERIFY',1,'p_pre_verify','new.py',606),
  ('EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2','EXP_LIST',3,'p_exp_list','new.py',618),
  ('EXP_NEURAL -> EMPTY','EXP_NEURAL',1,'p_exp_neural','new.py',622),
  ('EXP_LIST_2 -> COMMA EXP_LIST','EXP_LIST_2',2,'p_exp_list_2','new.py',637),
  ('EXP_LIST_2 -> EMPTY','EXP_LIST_2',1,'p_exp_list_2','new.py',638),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','new.py',642),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','new.py',643),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','new.py',644),
  ('READ -> READ_K LPAREN ID_LIST RPAREN','READ',4,'p_read','new.py',649),
  ('ID_LIST -> ID READ_NEURAL ID_LIST_R','ID_LIST',3,'p_id_list','new.py',652),
  ('READ_NEURAL -> EMPTY','READ_NEURAL',1,'p_read_neural','new.py',655),
  ('ID_LIST_R -> COMMA ID_LIST','ID_LIST_R',2,'p_id_list_r','new.py',660),
  ('ID_LIST_R -> EMPTY','ID_LIST_R',1,'p_id_list_r','new.py',661),
  ('WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN','WRITE',4,'p_write','new.py',664),
  ('WRITE_LIST -> H_EXPRESSION WRITE_LIST_R','WRITE_LIST',2,'p_write_list','new.py',667),
  ('WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R','WRITE_LIST',3,'p_write_list','new.py',668),
  ('CONSTANT_WRITE_N -> EMPTY','CONSTANT_WRITE_N',1,'p_constant_write_n','new.py',671),
  ('WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST','WRITE_LIST_R',3,'p_write_list_r','new.py',678),
  ('WRITE_LIST_R -> WRITE_NEURAL EMPTY','WRITE_LIST_R',2,'p_write_list_r','new.py',679),
  ('WRITE_NEURAL -> EMPTY','WRITE_NEURAL',1,'p_write_neural','new.py',682),
  ('RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','new.py',689),
  ('EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R','EXPRESSION',3,'p_expression','new.py',693),
  ('NEURAL_EXPRESSION -> EMPTY','NEURAL_EXPRESSION',1,'p_neural_expression','new.py',698),
  ('EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',727),
  ('EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',728),
  ('EXPRESSION_R -> EMPTY','EXPRESSION_R',1,'p_expression_r','new.py',729),
  ('NEURAL_PLUS -> EMPTY','NEURAL_PLUS',1,'p_neural_plus','new.py',733),
  ('NEURAL_MINUS -> EMPTY','NEURAL_MINUS',1,'p_neural_minus','new.py',739),
  ('TERM -> FACTOR NEURAL_TERM TERM_R','TERM',3,'p_term','new.py',744),
  ('NEURAL_TERM -> EMPTY','NEURAL_TERM',1,'p_neural_term','new.py',748),
  ('TERM_R -> TIMES NEURAL_TIMES TERM','TERM_R',3,'p_term_r','new.py',776),
  ('TERM_R -> DIVIDE NEURAL_DIVIDE TERM','TERM_R',3,'p_term_r','new.py',777),
  ('TERM_R -> EMPTY','TERM_R',1,'p_term_r','new.py',778),
  ('NEURAL_TIMES -> EMPTY','NEURAL_TIMES',1,'p_neural_times','new.py',782),
  ('NEURAL_DIVIDE -> EMPTY','NEURAL_DIVIDE',1,'p_neural_divide','new.py',787),
  ('FACTOR -> ID NEURAL_ID_FAC','FACTOR',2,'p_factor_','new.py',792),
  ('FACTOR -> CONSTANT NEURAL_CNT_FACT','FACTOR',2,'p_factor_','new.py',793),
  ('FACTOR -> LPAREN H_EXPRESSION RPAREN','FACTOR',3,'p_factor_','new.py',794),
  ('NEURAL_ID_FAC -> EMPTY','NEURAL_ID_FAC',1,'p_neural_id_fac','new.py',798),
  ('NEURAL_CNT_FACT -> EMPTY','NEURAL_CNT_FACT',1,'p_neural_cnt_fact','new.py',822),
  ('S_EXPRESSION -> EXPRESSION S_EXPRESSION_R','S_EXPRESSION',2,'p_s_expression','new.py',848),
  ('NEURAL_EXP -> EMPTY','NEURAL_EXP',1,'p_neural_exp','new.py',852),
  ('S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP','S_EXPRESSION_R',4,'p_s_expression_r','new.py',878),
  ('S_EXPRESSION_R -> EMPTY','S_EXPRESSION_R',1,'p_s_expression_r','new.py',879),
  ('NEURAL_CONDI -> EMPTY','NEURAL_CONDI',1,'p_neural_condi','new.py',883),
  ('CONDI -> GT','CONDI',1,'p_condi','new.py',890),
  ('CONDI -> LT','CONDI',1,'p_condi','new.py',891),
  ('CONDI -> LTE','CONDI',1,'p_condi','new.py',892),
  ('CONDI -> GTE','CONDI',1,'p_condi','new.py',893),
  ('CONDI -> DOUBLEEQUAL','CONDI',1,'p_condi','new.py',894),
  ('CONDI -> AND','CONDI',1,'p_condi','new.py',895),
  ('CONDI -> OR','CONDI',1,'p_condi','new.py',896),
  ('H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R','H_EXPRESSION',2,'p_h_expression','new.py',905),
  ('H_EXPRESSION_R -> OR H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',909),
  ('H_EXPRESSION_R -> AND H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',910),
  ('H_EXPRESSION_R -> EMPTY','H_EXPRESSION_R',1,'p_h_expression_r','new.py',911),
  ('PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND','PRINCIPAL_BLOCK',7,'p_principal_block','new.py',915),
  ('MAIN_NEURAL -> EMPTY','MAIN_NEURAL',1,'p_main_neural','new.py',919),
  ('PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R','PRINCIPAL_BODY',2,'p_principal_body','new.py',929),
  ('PRINCIPAL_BODY -> EMPTY','PRINCIPAL_BODY',1,'p_principal_body','new.py',930),
  ('PRINCIPAL_BODY_R -> PRINCIPAL_BODY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',934),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','new.py',937),
]
