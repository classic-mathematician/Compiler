
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENAND BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MINUS OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON BLOCKneural_program_id : EMPTYBLOCK : VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCKVAR_BLOCK : VARS_K BLOCKSTART VAR_DECL BLOCKENDVAR_DECL : TYPE COLON VAR_LIST SEMICOLON VAR_DECL_RVAR_DECL_R : VAR_DECL\n                  | EMPTYVAR_LIST : VAR VAR_LIST2VAR_LIST2 : COMMA VAR VAR_LIST2\n                 | EMPTYTYPE : INT_K NEURAL_TYPE\n            | FLOAT_K NEURAL_TYPE\n            | STRING_K NEURAL_TYPENEURAL_TYPE : EMPTYPROC_BLOCK : PROC_DECLPROC_DECL : PROC_DECL_RETURN\n                 | PROC_DECL_VOID\n                 | EMPTYPROC_DECL_VOID : FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECLneural_proc_void_id : EMPTYPROC_DECL_RETURN : FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECLPOST_FUNC : EMPTYneural_proc_return_id : EMPTYneural_param_decl : EMPTYPARAM_DECL : TYPE VAR neuro PARAM_DECL_R\n                  | EMPTYneuro : EMPTYPARAM_DECL_R : COMMA PARAM_DECL\n                    | EMPTYPROC_BODY : STATEMENT PROC_BODY_RFN_VARBLOCK : VARS_K BLOCKSTART LS_VARDECL BLOCKENDLS_VARDECL : TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_RLS_VARDECL_R : LS_VARDECL\n                    | EMPTYFNVAR_LS : VAR FNVAR_LS2FNVAR_LS2 : COMMA FNVAR_LS\n                 | EMPTYPROC_BODY_R : PROC_BODY\n                   | EMPTYSTATEMENT : ASSIGN SEMICOLON\n                 | ASSIGN1 SEMICOLON\n                 | FUNC_CALL SEMICOLON\n                 | READ SEMICOLON\n                 | WRITE SEMICOLON\n                 | RETURN\n                 | FLOW\n                STATEMENT_R : STATEMENT STATEMENT_R\n                   | EMPTYFLOW : DECISION\n            | LOOPLOOP : WHILE_LOOP\n            | DO_WHILE_LOOP SEMICOLON\n            | FOR_LOOPDO_WHILE_LOOP : DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURALDW_PREV_NEURAL : EMPTYDW_END_NEURAL : EMPTYWHILE_LOOP : WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURALWHILE_PREV_NEURAL : EMPTYWHILE_POST_NEURAL : EMPTYWHILE_END_NEURAL : EMPTYFOR_LOOP : FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKENDDECISION : IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURALEXP_RESULT_NEURAL : EMPTYDECISION_END_NEURAL : EMPTYDECISION_ALT : ELSE\n                    | EMPTYELSE : ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKENDELSE_NEURAL : EMPTYRIGHT_ASSIGN : H_EXPRESSION\n                    | FUNC_CALL\n                    | ARR_AC1ARR_AC1 : ID ARR_ID_NP1 DIM_ACASSIGN : VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURALASSIGN1 : ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURALN : EMPTYASSI_H_EXP_NEURAL : EMPTYEQUALS_NEURAL : EMPTYASSIGN_VAR_N : EMPTYARR_AC : ID ARR_ID_NP1 DIM_ACARR_ID_NP1 : EMPTYDIM_AC : LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_RDIM_AC_PREV : EMPTYDIM_AC_R : DIM_AC\n                | EMPTYVAR : ID\n           | ARRAYARRAY : ID ARR_ID_NP DIMARR_ID_NP : EMPTYDIM : LBRACE INT LIM_NP RBRACE DIM_RLIM_NP : EMPTYDIM_R : DIM\n             | EMPTYFUNC_CALL : ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPARENPOST_VERIFY : EMPTYPRE_VERIFY : EMPTYEXP_LIST : H_EXPRESSION EXP_NEURAL EXP_LIST_2EXP_NEURAL : EMPTYEXP_LIST_2 : COMMA EXP_LIST\n                  | EMPTYCONSTANT : INT\n                | FLOAT\n                | STRINGREAD : READ_K LPAREN ID_LIST RPARENID_LIST : ID READ_NEURAL ID_LIST_RREAD_NEURAL : EMPTYID_LIST_R : COMMA ID_LIST\n                 | EMPTYWRITE : WRITE_K LPAREN WRITE_LIST RPARENWRITE_LIST : RIGHT_ASSIGN WRITE_LIST_R\n                  | CONSTANT CONSTANT_WRITE_N WRITE_LIST_RCONSTANT_WRITE_N : EMPTYWRITE_LIST_R : WRITE_NEURAL COMMA WRITE_LIST\n                    | WRITE_NEURAL EMPTYWRITE_NEURAL : EMPTYRETURN : RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLONEXPRESSION : TERM NEURAL_EXPRESSION EXPRESSION_RNEURAL_EXPRESSION : EMPTYEXPRESSION_R : PLUS NEURAL_PLUS EXPRESSION\n                    | MINUS NEURAL_MINUS EXPRESSION\n                    | EMPTYNEURAL_PLUS : EMPTYNEURAL_MINUS : EMPTYTERM : FACTOR NEURAL_TERM TERM_RNEURAL_TERM : EMPTYTERM_R : TIMES NEURAL_TIMES TERM\n              | DIVIDE NEURAL_DIVIDE TERM\n              | EMPTYNEURAL_TIMES : EMPTYNEURAL_DIVIDE : EMPTYFACTOR : ID NEURAL_ID_FAC\n              | CONSTANT NEURAL_CNT_FACT\n              | MINUS CONSTANT NEURAL_CNT_FACT\n              | LPAREN H_EXPRESSION RPARENNEURAL_ID_FAC : EMPTYNEURAL_CNT_FACT : EMPTYS_EXPRESSION : EXPRESSION S_EXPRESSION_RNEURAL_EXP : EMPTYS_EXPRESSION_R : CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP\n                      | EMPTYNEURAL_CONDI : EMPTYCONDI : GT\n             | LT\n             | LTE\n             | GTE\n             | DOUBLEEQUAL\n             | AND\n             | ORH_EXPRESSION : S_EXPRESSION H_EXPRESSION_RH_EXPRESSION_R : OR H_EXPRESSION\n                      | AND H_EXPRESSION\n                      | EMPTYPRINCIPAL_BLOCK : MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKENDMAIN_NEURAL : EMPTYPRINCIPAL_BODY : STATEMENT PRINCIPAL_BODY_R\n                      | EMPTYO : EMPTYPRINCIPAL_BODY_R : PRINCIPAL_BODYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,7,17,95,],[0,-1,-3,-152,]),'ID':([2,19,20,21,22,23,30,31,32,33,35,50,54,55,66,73,74,81,82,84,86,89,98,99,100,101,102,109,110,111,112,113,126,127,128,130,133,153,154,162,163,164,180,181,187,189,190,191,192,193,194,195,207,211,213,226,229,235,236,238,239,242,243,246,254,262,268,269,270,271,272,273,274,275,276,299,300,304,305,307,310,315,316,317,319,324,326,327,329,330,333,338,340,],[3,28,29,-158,-158,-158,-11,-14,-12,-13,43,43,77,43,77,-45,-46,-49,-50,-51,-53,118,-40,-41,-42,-43,-44,132,144,150,150,-52,-158,-158,150,150,150,150,77,144,-77,144,150,150,-158,-141,-142,-143,-144,-145,-146,-147,77,77,77,132,144,150,-140,-158,-158,-158,-158,-115,77,150,150,-121,150,-122,150,-128,150,-129,77,77,150,-31,43,-158,77,-158,-65,-66,-158,43,-62,-64,-57,-60,-61,77,-67,]),'SEMICOLON':([3,4,5,41,42,43,44,49,51,62,63,68,69,70,71,72,85,93,137,138,139,140,141,142,143,144,145,146,147,150,151,161,168,172,177,179,182,184,185,186,188,196,197,198,199,200,201,202,203,214,215,216,217,218,228,232,233,234,237,240,241,244,245,257,258,259,260,264,267,289,290,291,292,293,294,295,296,297,312,313,320,323,325,331,332,337,],[-158,6,-2,48,-158,-85,-86,-8,-10,-158,-87,98,99,100,101,102,113,-9,-69,-70,-71,-100,-101,-102,-158,-158,-158,-158,-158,-158,-158,-158,-103,-108,-131,-148,-151,-130,-134,-136,-139,-158,-117,-158,-124,-158,246,-134,-135,-89,-91,-92,-158,-158,-133,-149,-150,-72,-116,-120,-123,-127,-132,-73,-76,-74,-93,-158,-158,-81,-83,-84,-138,-137,-118,-119,-125,-126,322,-158,-158,-35,-37,-54,-56,-36,]),'VARS_K':([6,159,160,],[9,212,212,]),'FUNCTION_K':([8,34,281,287,302,303,306,],[15,-4,-158,-158,15,-22,15,]),'MAIN_K':([8,10,11,12,13,14,34,281,287,302,303,306,311,314,],[-158,18,-15,-16,-17,-18,-4,-158,-158,-158,-22,-158,-21,-19,]),'BLOCKSTART':([9,45,88,91,92,116,117,121,122,123,204,212,247,248,249,277,278,301,328,],[16,54,-158,-158,-158,154,-55,159,-24,160,-158,255,276,-63,-158,299,-59,310,338,]),'VOID_K':([15,],[20,]),'INT_K':([15,16,46,47,48,157,255,322,],[21,21,21,21,21,21,21,21,]),'FLOAT_K':([15,16,46,47,48,157,255,322,],[22,22,22,22,22,22,22,22,]),'STRING_K':([15,16,46,47,48,157,255,322,],[23,23,23,23,23,23,23,23,]),'LPAREN':([18,26,27,28,29,37,38,39,40,77,78,79,80,83,87,106,108,110,111,112,114,115,126,127,128,130,133,144,153,162,163,164,180,181,185,187,189,190,191,192,193,194,195,229,235,236,238,239,242,243,262,268,269,270,271,272,273,274,275,279,300,],[-158,36,-153,-158,-158,46,-23,47,-20,-158,109,110,111,112,-158,128,-95,133,133,133,153,-58,-158,-158,133,133,133,-158,133,133,-77,133,133,133,-95,-158,-141,-142,-143,-144,-145,-146,-147,133,133,-140,-158,-158,-158,-158,133,133,-121,133,-122,133,-128,133,-129,300,133,]),'COLON':([21,22,23,25,30,31,32,33,286,],[-158,-158,-158,35,-11,-14,-12,-13,305,]),'BLOCKEND':([24,48,54,59,60,61,65,66,67,73,74,81,82,84,86,96,97,98,99,100,101,102,113,154,206,207,208,246,251,253,254,256,276,282,283,284,285,298,299,307,308,310,315,316,317,319,321,322,326,327,329,330,333,334,335,336,338,339,340,],[34,-158,-158,-5,-6,-7,95,-158,-155,-45,-46,-49,-50,-51,-53,-154,-157,-40,-41,-42,-43,-44,-52,-158,250,-158,-48,-115,-47,281,-158,287,-158,-30,-38,-39,304,307,-158,-158,319,-158,-158,-65,-66,-158,333,-158,-62,-64,-57,-60,-61,-32,-33,-34,-158,340,-67,]),'RPAREN':([36,43,44,46,47,56,57,58,63,90,119,120,131,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,151,152,156,157,158,161,165,166,169,170,171,173,174,175,176,177,178,179,182,184,185,186,188,196,197,198,199,200,202,203,205,210,214,215,216,219,220,221,222,225,227,228,230,231,232,233,234,237,240,241,244,245,260,261,263,264,265,266,267,288,289,290,291,292,293,294,295,296,297,309,],[45,-85,-86,-158,-158,91,-26,92,-87,-158,-158,-27,168,-158,172,-158,-158,-69,-70,-71,-100,-101,-102,-158,-158,-158,-158,-158,201,-158,-158,204,-25,-158,-29,-158,-158,-158,-158,-105,228,-109,-158,-114,-158,-131,-111,-148,-151,-130,-134,-136,-139,-158,-117,-158,-124,-158,-134,-135,249,-28,-89,-91,-92,260,-94,-158,-97,-104,-107,-133,-113,-110,-149,-150,-72,-116,-120,-123,-127,-132,-93,-96,-99,-158,-106,-112,-158,-98,-81,-83,-84,-138,-137,-118,-119,-125,-126,320,]),'COMMA':([42,43,44,62,63,90,119,120,132,135,136,137,138,139,140,141,142,143,144,145,146,147,150,151,161,166,169,170,174,175,176,177,178,179,182,184,185,186,188,196,197,198,199,200,202,203,214,215,216,221,222,228,232,233,234,237,240,241,244,245,260,264,267,289,290,291,292,293,294,295,296,297,313,],[50,-85,-86,50,-87,-158,157,-27,-158,-158,-158,-69,-70,-71,-100,-101,-102,-158,-158,-158,-158,-158,-158,-158,-158,-158,226,-105,229,-114,-158,-131,-111,-148,-151,-130,-134,-136,-139,-158,-117,-158,-124,-158,-134,-135,-89,-91,-92,262,-97,-133,-149,-150,-72,-116,-120,-123,-127,-132,-93,-158,-158,-81,-83,-84,-138,-137,-118,-119,-125,-126,324,]),'LBRACE':([43,52,53,77,107,108,144,161,183,185,264,],[-158,64,-88,-158,130,-80,-158,64,130,-80,130,]),'EQUALS':([44,63,75,76,77,103,104,105,118,129,161,214,215,216,264,289,290,291,],[-86,-87,-158,-158,-85,126,-78,127,155,-79,-158,-89,-91,-92,-158,-81,-83,-84,]),'READ_K':([54,66,73,74,81,82,84,86,98,99,100,101,102,113,154,207,211,213,246,254,276,299,304,307,310,315,316,317,319,326,327,329,330,333,338,340,],[78,78,-45,-46,-49,-50,-51,-53,-40,-41,-42,-43,-44,-52,78,78,78,78,-115,78,78,78,-31,-158,78,-158,-65,-66,-158,-62,-64,-57,-60,-61,78,-67,]),'WRITE_K':([54,66,73,74,81,82,84,86,98,99,100,101,102,113,154,207,211,213,246,254,276,299,304,307,310,315,316,317,319,326,327,329,330,333,338,340,],[79,79,-45,-46,-49,-50,-51,-53,-40,-41,-42,-43,-44,-52,79,79,79,79,-115,79,79,79,-31,-158,79,-158,-65,-66,-158,-62,-64,-57,-60,-61,79,-67,]),'RETURN_K':([54,66,73,74,81,82,84,86,98,99,100,101,102,113,154,207,211,213,246,254,276,299,304,307,310,315,316,317,319,326,327,329,330,333,338,340,],[80,80,-45,-46,-49,-50,-51,-53,-40,-41,-42,-43,-44,-52,80,80,80,80,-115,80,80,80,-31,-158,80,-158,-65,-66,-158,-62,-64,-57,-60,-61,80,-67,]),'IF_K':([54,66,73,74,81,82,84,86,98,99,100,101,102,113,154,207,211,213,246,254,276,299,304,307,310,315,316,317,319,326,327,329,330,333,338,340,],[83,83,-45,-46,-49,-50,-51,-53,-40,-41,-42,-43,-44,-52,83,83,83,83,-115,83,83,83,-31,-158,83,-158,-65,-66,-158,-62,-64,-57,-60,-61,83,-67,]),'WHILE_K':([54,66,73,74,81,82,84,86,98,99,100,101,102,113,154,207,211,213,246,250,254,276,299,304,307,310,315,316,317,319,326,327,329,330,333,338,340,],[87,87,-45,-46,-49,-50,-51,-53,-40,-41,-42,-43,-44,-52,87,87,87,87,-115,279,87,87,87,-31,-158,87,-158,-65,-66,-158,-62,-64,-57,-60,-61,87,-67,]),'DO_K':([54,66,73,74,81,82,84,86,98,99,100,101,102,113,154,207,211,213,246,254,276,280,299,304,307,310,315,316,317,319,326,327,329,330,333,338,340,],[88,88,-45,-46,-49,-50,-51,-53,-40,-41,-42,-43,-44,-52,88,88,88,88,-115,88,88,301,88,-31,-158,88,-158,-65,-66,-158,-62,-64,-57,-60,-61,88,-67,]),'FOR_K':([54,66,73,74,81,82,84,86,98,99,100,101,102,113,154,207,211,213,246,254,276,299,304,307,310,315,316,317,319,326,327,329,330,333,338,340,],[89,89,-45,-46,-49,-50,-51,-53,-40,-41,-42,-43,-44,-52,89,89,89,89,-115,89,89,89,-31,-158,89,-158,-65,-66,-158,-62,-64,-57,-60,-61,89,-67,]),'INT':([64,110,111,112,126,127,128,130,133,148,153,155,162,163,164,180,181,187,189,190,191,192,193,194,195,229,235,236,238,239,242,243,252,262,268,269,270,271,272,273,274,275,300,],[94,140,140,140,-158,-158,140,140,140,140,140,209,140,-77,140,140,140,-158,-141,-142,-143,-144,-145,-146,-147,140,140,-140,-158,-158,-158,-158,280,140,140,-121,140,-122,140,-128,140,-129,140,]),'RBRACE':([94,124,125,140,141,142,143,145,146,147,150,151,167,177,179,182,184,186,188,196,197,198,199,200,202,203,223,224,228,232,233,237,240,241,244,245,267,292,293,294,295,296,297,],[-158,161,-90,-100,-101,-102,-158,-158,-158,-158,-158,-158,-158,-131,-148,-151,-130,-136,-139,-158,-117,-158,-124,-158,-134,-135,264,-82,-133,-149,-150,-116,-120,-123,-127,-132,-158,-138,-137,-118,-119,-125,-126,]),'FLOAT':([110,111,112,126,127,128,130,133,148,153,162,163,164,180,181,187,189,190,191,192,193,194,195,229,235,236,238,239,242,243,262,268,269,270,271,272,273,274,275,300,],[141,141,141,-158,-158,141,141,141,141,141,141,-77,141,141,141,-158,-141,-142,-143,-144,-145,-146,-147,141,141,-140,-158,-158,-158,-158,141,141,-121,141,-122,141,-128,141,-129,141,]),'STRING':([110,111,112,126,127,128,130,133,148,153,162,163,164,180,181,187,189,190,191,192,193,194,195,229,235,236,238,239,242,243,262,268,269,270,271,272,273,274,275,300,],[142,142,142,-158,-158,142,142,142,142,142,142,-77,142,142,142,-158,-141,-142,-143,-144,-145,-146,-147,142,142,-140,-158,-158,-158,-158,142,142,-121,142,-122,142,-128,142,-129,142,]),'MINUS':([110,111,112,126,127,128,130,133,136,140,141,142,144,146,147,150,151,153,162,163,164,177,178,180,181,184,185,187,189,190,191,192,193,194,195,196,197,198,199,200,202,203,228,229,235,236,238,239,241,242,243,244,245,262,268,269,270,271,272,273,274,275,296,297,300,],[148,148,148,-158,-158,148,148,148,-158,-100,-101,-102,-158,-158,-158,-158,-158,148,148,-77,148,-131,-135,148,148,-130,-134,-158,-141,-142,-143,-144,-145,-146,-147,239,-117,-158,-124,-158,-134,-135,-133,148,148,-140,-158,-158,-123,-158,-158,-127,-132,148,148,-121,148,-122,148,-128,148,-129,-125,-126,148,]),'TIMES':([136,140,141,142,144,147,150,151,177,178,184,185,198,199,200,202,203,228,245,],[-158,-100,-101,-102,-158,-158,-158,-158,-131,-135,-130,-134,242,-124,-158,-134,-135,-133,-132,]),'DIVIDE':([136,140,141,142,144,147,150,151,177,178,184,185,198,199,200,202,203,228,245,],[-158,-100,-101,-102,-158,-158,-158,-158,-131,-135,-130,-134,243,-124,-158,-134,-135,-133,-132,]),'PLUS':([136,140,141,142,144,146,147,150,151,177,178,184,185,196,197,198,199,200,202,203,228,241,244,245,296,297,],[-158,-100,-101,-102,-158,-158,-158,-158,-158,-131,-135,-130,-134,238,-117,-158,-124,-158,-134,-135,-133,-123,-127,-132,-125,-126,]),'GT':([136,140,141,142,144,145,146,147,150,151,177,178,184,185,196,197,198,199,200,202,203,228,237,240,241,244,245,294,295,296,297,],[-158,-100,-101,-102,-158,189,-158,-158,-158,-158,-131,-135,-130,-134,-158,-117,-158,-124,-158,-134,-135,-133,-116,-120,-123,-127,-132,-118,-119,-125,-126,]),'LT':([136,140,141,142,144,145,146,147,150,151,177,178,184,185,196,197,198,199,200,202,203,228,237,240,241,244,245,294,295,296,297,],[-158,-100,-101,-102,-158,190,-158,-158,-158,-158,-131,-135,-130,-134,-158,-117,-158,-124,-158,-134,-135,-133,-116,-120,-123,-127,-132,-118,-119,-125,-126,]),'LTE':([136,140,141,142,144,145,146,147,150,151,177,178,184,185,196,197,198,199,200,202,203,228,237,240,241,244,245,294,295,296,297,],[-158,-100,-101,-102,-158,191,-158,-158,-158,-158,-131,-135,-130,-134,-158,-117,-158,-124,-158,-134,-135,-133,-116,-120,-123,-127,-132,-118,-119,-125,-126,]),'GTE':([136,140,141,142,144,145,146,147,150,151,177,178,184,185,196,197,198,199,200,202,203,228,237,240,241,244,245,294,295,296,297,],[-158,-100,-101,-102,-158,192,-158,-158,-158,-158,-131,-135,-130,-134,-158,-117,-158,-124,-158,-134,-135,-133,-116,-120,-123,-127,-132,-118,-119,-125,-126,]),'DOUBLEEQUAL':([136,140,141,142,144,145,146,147,150,151,177,178,184,185,196,197,198,199,200,202,203,228,237,240,241,244,245,294,295,296,297,],[-158,-100,-101,-102,-158,193,-158,-158,-158,-158,-131,-135,-130,-134,-158,-117,-158,-124,-158,-134,-135,-133,-116,-120,-123,-127,-132,-118,-119,-125,-126,]),'AND':([136,140,141,142,143,144,145,146,147,150,151,177,178,184,185,186,188,196,197,198,199,200,202,203,228,237,240,241,244,245,267,292,293,294,295,296,297,],[-158,-100,-101,-102,181,-158,194,-158,-158,-158,-158,-131,-135,-130,-134,-136,-139,-158,-117,-158,-124,-158,-134,-135,-133,-116,-120,-123,-127,-132,-158,-138,-137,-118,-119,-125,-126,]),'OR':([136,140,141,142,143,144,145,146,147,150,151,177,178,184,185,186,188,196,197,198,199,200,202,203,228,237,240,241,244,245,267,292,293,294,295,296,297,],[-158,-100,-101,-102,180,-158,195,-158,-158,-158,-158,-131,-135,-130,-134,-136,-139,-158,-117,-158,-124,-158,-134,-135,-133,-116,-120,-123,-127,-132,-158,-138,-137,-118,-119,-125,-126,]),'TO_K':([209,],[252,]),'ELSE_K':([307,317,318,],[-158,-68,328,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,8,18,21,22,23,28,29,42,43,46,47,48,54,62,66,75,76,77,87,88,90,91,92,94,119,126,127,132,135,136,143,144,145,146,147,150,151,154,157,161,165,166,167,169,174,176,187,196,198,200,204,207,217,218,221,238,239,242,243,249,254,264,267,276,281,287,299,302,306,307,310,313,315,319,320,322,338,],[5,14,27,31,31,31,38,40,51,53,57,57,61,67,51,67,104,104,108,115,117,120,122,122,125,158,163,163,170,175,178,182,185,188,197,199,202,203,208,57,216,220,222,224,227,230,175,236,240,244,203,248,208,258,258,263,269,271,273,275,278,284,291,293,208,303,303,208,14,14,317,208,325,327,330,332,336,208,]),'BLOCK':([6,],[7,]),'VAR_BLOCK':([6,],[8,]),'PROC_BLOCK':([8,],[10,]),'PROC_DECL':([8,302,306,],[11,311,314,]),'PROC_DECL_RETURN':([8,302,306,],[12,12,12,]),'PROC_DECL_VOID':([8,302,306,],[13,13,13,]),'PRINCIPAL_BLOCK':([10,],[17,]),'TYPE':([15,16,46,47,48,157,255,322,],[19,25,55,55,25,55,286,286,]),'VAR_DECL':([16,48,],[24,60,]),'MAIN_NEURAL':([18,],[26,]),'NEURAL_TYPE':([21,22,23,],[30,32,33,]),'neural_proc_return_id':([28,],[37,]),'neural_proc_void_id':([29,],[39,]),'VAR_LIST':([35,],[41,]),'VAR':([35,50,54,55,66,154,207,211,213,254,276,299,305,310,324,338,],[42,62,75,90,75,75,75,75,75,75,75,75,313,75,313,75,]),'ARRAY':([35,50,54,55,66,154,207,211,213,254,276,299,305,310,324,338,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'VAR_LIST2':([42,62,],[49,93,]),'ARR_ID_NP':([43,77,],[52,52,]),'PARAM_DECL':([46,47,157,],[56,58,210,]),'VAR_DECL_R':([48,],[59,]),'DIM':([52,161,],[63,215,]),'PRINCIPAL_BODY':([54,66,],[65,97,]),'STATEMENT':([54,66,154,207,211,213,254,276,299,310,338,],[66,66,207,207,254,254,254,207,207,207,207,]),'ASSIGN':([54,66,154,207,211,213,254,276,299,310,338,],[68,68,68,68,68,68,68,68,68,68,68,]),'ASSIGN1':([54,66,154,207,211,213,254,276,299,310,338,],[69,69,69,69,69,69,69,69,69,69,69,]),'FUNC_CALL':([54,66,110,154,162,164,207,211,213,229,254,276,299,310,338,],[70,70,138,70,138,138,70,70,70,138,70,70,70,70,70,]),'READ':([54,66,154,207,211,213,254,276,299,310,338,],[71,71,71,71,71,71,71,71,71,71,71,]),'WRITE':([54,66,154,207,211,213,254,276,299,310,338,],[72,72,72,72,72,72,72,72,72,72,72,]),'RETURN':([54,66,154,207,211,213,254,276,299,310,338,],[73,73,73,73,73,73,73,73,73,73,73,]),'FLOW':([54,66,154,207,211,213,254,276,299,310,338,],[74,74,74,74,74,74,74,74,74,74,74,]),'ARR_AC':([54,66,154,207,211,213,254,276,299,310,338,],[76,76,76,76,76,76,76,76,76,76,76,]),'DECISION':([54,66,154,207,211,213,254,276,299,310,338,],[81,81,81,81,81,81,81,81,81,81,81,]),'LOOP':([54,66,154,207,211,213,254,276,299,310,338,],[82,82,82,82,82,82,82,82,82,82,82,]),'WHILE_LOOP':([54,66,154,207,211,213,254,276,299,310,338,],[84,84,84,84,84,84,84,84,84,84,84,]),'DO_WHILE_LOOP':([54,66,154,207,211,213,254,276,299,310,338,],[85,85,85,85,85,85,85,85,85,85,85,]),'FOR_LOOP':([54,66,154,207,211,213,254,276,299,310,338,],[86,86,86,86,86,86,86,86,86,86,86,]),'PRINCIPAL_BODY_R':([66,],[96,]),'ASSIGN_VAR_N':([75,76,],[103,105,]),'PRE_VERIFY':([77,144,],[106,106,]),'ARR_ID_NP1':([77,144,],[107,183,]),'WHILE_PREV_NEURAL':([87,],[114,]),'DW_PREV_NEURAL':([88,],[116,]),'neuro':([90,],[119,]),'neural_param_decl':([91,92,],[121,123,]),'LIM_NP':([94,],[124,]),'DIM_AC':([107,183,264,],[129,234,290,]),'ID_LIST':([109,226,],[131,265,]),'WRITE_LIST':([110,229,],[134,266,]),'RIGHT_ASSIGN':([110,162,164,229,],[135,217,218,135,]),'CONSTANT':([110,111,112,128,130,133,148,153,162,164,180,181,229,235,262,268,270,272,274,300,],[136,151,151,151,151,151,200,151,151,151,151,151,136,151,151,151,151,151,151,151,]),'H_EXPRESSION':([110,111,112,128,130,133,153,162,164,180,181,229,262,300,],[137,149,152,166,167,171,205,137,137,232,233,137,166,309,]),'ARR_AC1':([110,162,164,229,],[139,139,139,139,]),'S_EXPRESSION':([110,111,112,128,130,133,153,162,164,180,181,229,262,300,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'EXPRESSION':([110,111,112,128,130,133,153,162,164,180,181,229,235,262,268,270,300,],[145,145,145,145,145,145,145,145,145,145,145,145,267,145,294,295,145,]),'TERM':([110,111,112,128,130,133,153,162,164,180,181,229,235,262,268,270,272,274,300,],[146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,296,297,146,]),'FACTOR':([110,111,112,128,130,133,153,162,164,180,181,229,235,262,268,270,272,274,300,],[147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,]),'PARAM_DECL_R':([119,],[156,]),'EQUALS_NEURAL':([126,127,],[162,164,]),'EXP_LIST':([128,262,],[165,288,]),'READ_NEURAL':([132,],[169,]),'WRITE_LIST_R':([135,176,],[173,231,]),'WRITE_NEURAL':([135,176,],[174,174,]),'CONSTANT_WRITE_N':([136,],[176,]),'NEURAL_CNT_FACT':([136,151,200,],[177,177,245,]),'H_EXPRESSION_R':([143,],[179,]),'NEURAL_ID_FAC':([144,150,],[184,184,]),'S_EXPRESSION_R':([145,],[186,]),'CONDI':([145,],[187,]),'NEURAL_EXPRESSION':([146,],[196,]),'NEURAL_TERM':([147,],[198,]),'STATEMENT_R':([154,207,276,299,310,338,],[206,251,298,308,321,339,]),'FN_VARBLOCK':([159,160,],[211,213,]),'DIM_R':([161,],[214,]),'POST_VERIFY':([165,],[219,]),'EXP_NEURAL':([166,],[221,]),'DIM_AC_PREV':([167,],[223,]),'ID_LIST_R':([169,],[225,]),'NEURAL_CONDI':([187,],[235,]),'EXPRESSION_R':([196,],[237,]),'TERM_R':([198,],[241,]),'EXP_RESULT_NEURAL':([204,],[247,]),'PROC_BODY':([211,213,254,],[253,256,283,]),'ASSI_H_EXP_NEURAL':([217,218,],[257,259,]),'EXP_LIST_2':([221,],[261,]),'NEURAL_PLUS':([238,],[268,]),'NEURAL_MINUS':([239,],[270,]),'NEURAL_TIMES':([242,],[272,]),'NEURAL_DIVIDE':([243,],[274,]),'WHILE_POST_NEURAL':([249,],[277,]),'PROC_BODY_R':([254,],[282,]),'LS_VARDECL':([255,322,],[285,335,]),'DIM_AC_R':([264,],[289,]),'NEURAL_EXP':([267,],[292,]),'POST_FUNC':([281,287,],[302,306,]),'FNVAR_LS':([305,324,],[312,337,]),'DECISION_ALT':([307,],[315,]),'ELSE':([307,],[316,]),'ELSE_NEURAL':([307,],[318,]),'FNVAR_LS2':([313,],[323,]),'DECISION_END_NEURAL':([315,],[326,]),'WHILE_END_NEURAL':([319,],[329,]),'DW_END_NEURAL':([320,],[331,]),'LS_VARDECL_R':([322,],[334,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK','PROGRAM',5,'p_program','new.py',183),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','new.py',188),
  ('BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK','BLOCK',3,'p_block','new.py',202),
  ('VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND','VAR_BLOCK',4,'p_var_block','new.py',205),
  ('VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R','VAR_DECL',5,'p_var_decl','new.py',208),
  ('VAR_DECL_R -> VAR_DECL','VAR_DECL_R',1,'p_var_decl_r','new.py',211),
  ('VAR_DECL_R -> EMPTY','VAR_DECL_R',1,'p_var_decl_r','new.py',212),
  ('VAR_LIST -> VAR VAR_LIST2','VAR_LIST',2,'p_var_list','new.py',215),
  ('VAR_LIST2 -> COMMA VAR VAR_LIST2','VAR_LIST2',3,'p_var_list2','new.py',219),
  ('VAR_LIST2 -> EMPTY','VAR_LIST2',1,'p_var_list2','new.py',220),
  ('TYPE -> INT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',249),
  ('TYPE -> FLOAT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',250),
  ('TYPE -> STRING_K NEURAL_TYPE','TYPE',2,'p_type','new.py',251),
  ('NEURAL_TYPE -> EMPTY','NEURAL_TYPE',1,'p_neural_type','new.py',259),
  ('PROC_BLOCK -> PROC_DECL','PROC_BLOCK',1,'p_proc_block','new.py',262),
  ('PROC_DECL -> PROC_DECL_RETURN','PROC_DECL',1,'p_proc_decl','new.py',265),
  ('PROC_DECL -> PROC_DECL_VOID','PROC_DECL',1,'p_proc_decl','new.py',266),
  ('PROC_DECL -> EMPTY','PROC_DECL',1,'p_proc_decl','new.py',267),
  ('PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_VOID',14,'p_proc_decl_void','new.py',271),
  ('neural_proc_void_id -> EMPTY','neural_proc_void_id',1,'p_neural_proc_void_id','new.py',276),
  ('PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_RETURN',14,'p_proc_decl_return','new.py',290),
  ('POST_FUNC -> EMPTY','POST_FUNC',1,'p_post_func','new.py',295),
  ('neural_proc_return_id -> EMPTY','neural_proc_return_id',1,'p_neural_proc_return_id','new.py',302),
  ('neural_param_decl -> EMPTY','neural_param_decl',1,'p_neural_param_decl','new.py',319),
  ('PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R','PARAM_DECL',4,'p_param_decl','new.py',322),
  ('PARAM_DECL -> EMPTY','PARAM_DECL',1,'p_param_decl','new.py',323),
  ('neuro -> EMPTY','neuro',1,'p_neuro','new.py',328),
  ('PARAM_DECL_R -> COMMA PARAM_DECL','PARAM_DECL_R',2,'p_param_decl_r','new.py',345),
  ('PARAM_DECL_R -> EMPTY','PARAM_DECL_R',1,'p_param_decl_r','new.py',346),
  ('PROC_BODY -> STATEMENT PROC_BODY_R','PROC_BODY',2,'p_proc_body','new.py',349),
  ('FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND','FN_VARBLOCK',4,'p_fn_varblock','new.py',352),
  ('LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R','LS_VARDECL',5,'p_ls_vardecl','new.py',362),
  ('LS_VARDECL_R -> LS_VARDECL','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',366),
  ('LS_VARDECL_R -> EMPTY','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',367),
  ('FNVAR_LS -> VAR FNVAR_LS2','FNVAR_LS',2,'p_fnvar_ls','new.py',371),
  ('FNVAR_LS2 -> COMMA FNVAR_LS','FNVAR_LS2',2,'p_fnvar_ls2','new.py',376),
  ('FNVAR_LS2 -> EMPTY','FNVAR_LS2',1,'p_fnvar_ls2','new.py',377),
  ('PROC_BODY_R -> PROC_BODY','PROC_BODY_R',1,'p_proc_body_r','new.py',397),
  ('PROC_BODY_R -> EMPTY','PROC_BODY_R',1,'p_proc_body_r','new.py',398),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','new.py',402),
  ('STATEMENT -> ASSIGN1 SEMICOLON','STATEMENT',2,'p_statement','new.py',403),
  ('STATEMENT -> FUNC_CALL SEMICOLON','STATEMENT',2,'p_statement','new.py',404),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','new.py',405),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','new.py',406),
  ('STATEMENT -> RETURN','STATEMENT',1,'p_statement','new.py',407),
  ('STATEMENT -> FLOW','STATEMENT',1,'p_statement','new.py',408),
  ('STATEMENT_R -> STATEMENT STATEMENT_R','STATEMENT_R',2,'p_statement_r','new.py',413),
  ('STATEMENT_R -> EMPTY','STATEMENT_R',1,'p_statement_r','new.py',414),
  ('FLOW -> DECISION','FLOW',1,'p_flow','new.py',418),
  ('FLOW -> LOOP','FLOW',1,'p_flow','new.py',419),
  ('LOOP -> WHILE_LOOP','LOOP',1,'p_loop','new.py',423),
  ('LOOP -> DO_WHILE_LOOP SEMICOLON','LOOP',2,'p_loop','new.py',424),
  ('LOOP -> FOR_LOOP','LOOP',1,'p_loop','new.py',425),
  ('DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL','DO_WHILE_LOOP',10,'p_do_while_loop','new.py',429),
  ('DW_PREV_NEURAL -> EMPTY','DW_PREV_NEURAL',1,'p_dw_prev_neural','new.py',433),
  ('DW_END_NEURAL -> EMPTY','DW_END_NEURAL',1,'p_dw_end_neural','new.py',438),
  ('WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL','WHILE_LOOP',10,'p_while_loop','new.py',449),
  ('WHILE_PREV_NEURAL -> EMPTY','WHILE_PREV_NEURAL',1,'p_while_prev_neural','new.py',453),
  ('WHILE_POST_NEURAL -> EMPTY','WHILE_POST_NEURAL',1,'p_while_post_neural','new.py',458),
  ('WHILE_END_NEURAL -> EMPTY','WHILE_END_NEURAL',1,'p_while_end_neural','new.py',470),
  ('FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND','FOR_LOOP',10,'p_for_loop','new.py',480),
  ('DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL','DECISION',10,'p_decision','new.py',483),
  ('EXP_RESULT_NEURAL -> EMPTY','EXP_RESULT_NEURAL',1,'p_exp_result_neural','new.py',486),
  ('DECISION_END_NEURAL -> EMPTY','DECISION_END_NEURAL',1,'p_decision_end_neural','new.py',498),
  ('DECISION_ALT -> ELSE','DECISION_ALT',1,'p_decision_alt','new.py',503),
  ('DECISION_ALT -> EMPTY','DECISION_ALT',1,'p_decision_alt','new.py',504),
  ('ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND','ELSE',5,'p_else','new.py',507),
  ('ELSE_NEURAL -> EMPTY','ELSE_NEURAL',1,'p_else_neural','new.py',511),
  ('RIGHT_ASSIGN -> H_EXPRESSION','RIGHT_ASSIGN',1,'p_right_assign','new.py',520),
  ('RIGHT_ASSIGN -> FUNC_CALL','RIGHT_ASSIGN',1,'p_right_assign','new.py',521),
  ('RIGHT_ASSIGN -> ARR_AC1','RIGHT_ASSIGN',1,'p_right_assign','new.py',522),
  ('ARR_AC1 -> ID ARR_ID_NP1 DIM_AC','ARR_AC1',3,'p_arr_ac1','new.py',529),
  ('ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL','ASSIGN',6,'p_assign','new.py',610),
  ('ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL','ASSIGN1',6,'p_assign1','new.py',614),
  ('N -> EMPTY','N',1,'p_n','new.py',619),
  ('ASSI_H_EXP_NEURAL -> EMPTY','ASSI_H_EXP_NEURAL',1,'p_assi_h_exp_neural','new.py',623),
  ('EQUALS_NEURAL -> EMPTY','EQUALS_NEURAL',1,'p_equals_neural','new.py',663),
  ('ASSIGN_VAR_N -> EMPTY','ASSIGN_VAR_N',1,'p_assing_var_n','new.py',667),
  ('ARR_AC -> ID ARR_ID_NP1 DIM_AC','ARR_AC',3,'p_arr_ac','new.py',690),
  ('ARR_ID_NP1 -> EMPTY','ARR_ID_NP1',1,'p_arr_id_np1','new.py',766),
  ('DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R','DIM_AC',5,'p_dim_ac','new.py',800),
  ('DIM_AC_PREV -> EMPTY','DIM_AC_PREV',1,'p_dim_ac_prev','new.py',806),
  ('DIM_AC_R -> DIM_AC','DIM_AC_R',1,'p_dim_ac_r','new.py',816),
  ('DIM_AC_R -> EMPTY','DIM_AC_R',1,'p_dim_ac_r','new.py',817),
  ('VAR -> ID','VAR',1,'p_var','new.py',820),
  ('VAR -> ARRAY','VAR',1,'p_var','new.py',821),
  ('ARRAY -> ID ARR_ID_NP DIM','ARRAY',3,'p_array','new.py',829),
  ('ARR_ID_NP -> EMPTY','ARR_ID_NP',1,'p_arr_id_np','new.py',868),
  ('DIM -> LBRACE INT LIM_NP RBRACE DIM_R','DIM',5,'p_dim','new.py',878),
  ('LIM_NP -> EMPTY','LIM_NP',1,'p_lim_np','new.py',885),
  ('DIM_R -> DIM','DIM_R',1,'p_dim_r','new.py',895),
  ('DIM_R -> EMPTY','DIM_R',1,'p_dim_r','new.py',896),
  ('FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN','FUNC_CALL',6,'p_func_call','new.py',902),
  ('POST_VERIFY -> EMPTY','POST_VERIFY',1,'p_post_verify','new.py',906),
  ('PRE_VERIFY -> EMPTY','PRE_VERIFY',1,'p_pre_verify','new.py',932),
  ('EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2','EXP_LIST',3,'p_exp_list','new.py',952),
  ('EXP_NEURAL -> EMPTY','EXP_NEURAL',1,'p_exp_neural','new.py',956),
  ('EXP_LIST_2 -> COMMA EXP_LIST','EXP_LIST_2',2,'p_exp_list_2','new.py',971),
  ('EXP_LIST_2 -> EMPTY','EXP_LIST_2',1,'p_exp_list_2','new.py',972),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','new.py',976),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','new.py',977),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','new.py',978),
  ('READ -> READ_K LPAREN ID_LIST RPAREN','READ',4,'p_read','new.py',983),
  ('ID_LIST -> ID READ_NEURAL ID_LIST_R','ID_LIST',3,'p_id_list','new.py',986),
  ('READ_NEURAL -> EMPTY','READ_NEURAL',1,'p_read_neural','new.py',989),
  ('ID_LIST_R -> COMMA ID_LIST','ID_LIST_R',2,'p_id_list_r','new.py',994),
  ('ID_LIST_R -> EMPTY','ID_LIST_R',1,'p_id_list_r','new.py',995),
  ('WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN','WRITE',4,'p_write','new.py',998),
  ('WRITE_LIST -> RIGHT_ASSIGN WRITE_LIST_R','WRITE_LIST',2,'p_write_list','new.py',1001),
  ('WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R','WRITE_LIST',3,'p_write_list','new.py',1002),
  ('CONSTANT_WRITE_N -> EMPTY','CONSTANT_WRITE_N',1,'p_constant_write_n','new.py',1005),
  ('WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST','WRITE_LIST_R',3,'p_write_list_r','new.py',1012),
  ('WRITE_LIST_R -> WRITE_NEURAL EMPTY','WRITE_LIST_R',2,'p_write_list_r','new.py',1013),
  ('WRITE_NEURAL -> EMPTY','WRITE_NEURAL',1,'p_write_neural','new.py',1016),
  ('RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','new.py',1023),
  ('EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R','EXPRESSION',3,'p_expression','new.py',1028),
  ('NEURAL_EXPRESSION -> EMPTY','NEURAL_EXPRESSION',1,'p_neural_expression','new.py',1033),
  ('EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',1062),
  ('EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',1063),
  ('EXPRESSION_R -> EMPTY','EXPRESSION_R',1,'p_expression_r','new.py',1064),
  ('NEURAL_PLUS -> EMPTY','NEURAL_PLUS',1,'p_neural_plus','new.py',1068),
  ('NEURAL_MINUS -> EMPTY','NEURAL_MINUS',1,'p_neural_minus','new.py',1074),
  ('TERM -> FACTOR NEURAL_TERM TERM_R','TERM',3,'p_term','new.py',1079),
  ('NEURAL_TERM -> EMPTY','NEURAL_TERM',1,'p_neural_term','new.py',1083),
  ('TERM_R -> TIMES NEURAL_TIMES TERM','TERM_R',3,'p_term_r','new.py',1111),
  ('TERM_R -> DIVIDE NEURAL_DIVIDE TERM','TERM_R',3,'p_term_r','new.py',1112),
  ('TERM_R -> EMPTY','TERM_R',1,'p_term_r','new.py',1113),
  ('NEURAL_TIMES -> EMPTY','NEURAL_TIMES',1,'p_neural_times','new.py',1117),
  ('NEURAL_DIVIDE -> EMPTY','NEURAL_DIVIDE',1,'p_neural_divide','new.py',1122),
  ('FACTOR -> ID NEURAL_ID_FAC','FACTOR',2,'p_factor_','new.py',1127),
  ('FACTOR -> CONSTANT NEURAL_CNT_FACT','FACTOR',2,'p_factor_','new.py',1128),
  ('FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT','FACTOR',3,'p_factor_','new.py',1129),
  ('FACTOR -> LPAREN H_EXPRESSION RPAREN','FACTOR',3,'p_factor_','new.py',1130),
  ('NEURAL_ID_FAC -> EMPTY','NEURAL_ID_FAC',1,'p_neural_id_fac','new.py',1134),
  ('NEURAL_CNT_FACT -> EMPTY','NEURAL_CNT_FACT',1,'p_neural_cnt_fact','new.py',1158),
  ('S_EXPRESSION -> EXPRESSION S_EXPRESSION_R','S_EXPRESSION',2,'p_s_expression','new.py',1185),
  ('NEURAL_EXP -> EMPTY','NEURAL_EXP',1,'p_neural_exp','new.py',1189),
  ('S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP','S_EXPRESSION_R',4,'p_s_expression_r','new.py',1215),
  ('S_EXPRESSION_R -> EMPTY','S_EXPRESSION_R',1,'p_s_expression_r','new.py',1216),
  ('NEURAL_CONDI -> EMPTY','NEURAL_CONDI',1,'p_neural_condi','new.py',1220),
  ('CONDI -> GT','CONDI',1,'p_condi','new.py',1227),
  ('CONDI -> LT','CONDI',1,'p_condi','new.py',1228),
  ('CONDI -> LTE','CONDI',1,'p_condi','new.py',1229),
  ('CONDI -> GTE','CONDI',1,'p_condi','new.py',1230),
  ('CONDI -> DOUBLEEQUAL','CONDI',1,'p_condi','new.py',1231),
  ('CONDI -> AND','CONDI',1,'p_condi','new.py',1232),
  ('CONDI -> OR','CONDI',1,'p_condi','new.py',1233),
  ('H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R','H_EXPRESSION',2,'p_h_expression','new.py',1242),
  ('H_EXPRESSION_R -> OR H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',1246),
  ('H_EXPRESSION_R -> AND H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',1247),
  ('H_EXPRESSION_R -> EMPTY','H_EXPRESSION_R',1,'p_h_expression_r','new.py',1248),
  ('PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND','PRINCIPAL_BLOCK',7,'p_principal_block','new.py',1252),
  ('MAIN_NEURAL -> EMPTY','MAIN_NEURAL',1,'p_main_neural','new.py',1256),
  ('PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R','PRINCIPAL_BODY',2,'p_principal_body','new.py',1266),
  ('PRINCIPAL_BODY -> EMPTY','PRINCIPAL_BODY',1,'p_principal_body','new.py',1267),
  ('O -> EMPTY','O',1,'p_o','new.py',1271),
  ('PRINCIPAL_BODY_R -> PRINCIPAL_BODY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',1275),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','new.py',1278),
]
