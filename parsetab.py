
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENAND BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MINUS OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K THEN_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON BLOCKneural_program_id : EMPTYBLOCK : VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCKVAR_BLOCK : VARS_K BLOCKSTART VAR_DECL BLOCKENDVAR_DECL : TYPE COLON VAR_LIST SEMICOLON VAR_DECL_RVAR_DECL_R : VAR_DECL\n                  | EMPTYVAR_LIST : ID VAR_LIST2VAR_LIST2 : COMMA ID VAR_LIST2\n                 | EMPTYTYPE : INT_K NEURAL_TYPE\n            | FLOAT_K NEURAL_TYPE\n            | STRING_K NEURAL_TYPENEURAL_TYPE : EMPTYPROC_BLOCK : PROC_DECLPROC_DECL : PROC_DECL_RETURN\n                 | PROC_DECL_VOID\n                 | EMPTYPROC_DECL_VOID : FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECLneural_proc_void_id : EMPTYPROC_DECL_RETURN : FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECLneural_proc_return_id : EMPTYneural_param_decl : EMPTYPARAM_DECL : TYPE ID neuro PARAM_DECL_R\n                  | EMPTYneuro : EMPTYPARAM_DECL_R : COMMA PARAM_DECL\n                    | EMPTYPROC_BODY : STATEMENT PROC_BODY_RPROC_BODY_R : PROC_BODY\n                   | EMPTYSTATEMENT : ASSIGN SEMICOLON\n                 | FUNC_CALL SEMICOLON\n                 | READ SEMICOLON\n                 | WRITE SEMICOLON\n                 | FLOW\n                STATEMENT_R : STATEMENT STATEMENT_R\n                   | EMPTYFLOW : DECISION\n            | LOOPLOOP : WHILE_LOOP\n            | FOR_LOOPWHILE_LOOP : WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKENDFOR_LOOP : FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKENDDECISION : IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURALEXP_RESULT_NEURAL : EMPTYDECISION_END_NEURAL : EMPTYDECISION_ALT : ELSE\n                    | EMPTYELSE : ELSE_K BLOCKSTART STATEMENT_R BLOCKENDASSIGN : VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURALASSI_H_EXP_NEURAL : EMPTYEQUALS_NEURAL : EMPTYASSIGN_VAR_N : EMPTYVAR : ID\n           | ARRAYARRAY : ID LBRACE INT RBRACEFUNC_CALL : ID LPAREN ARG_LIST RPARENARG_LIST : VAR ARG_LIST_R\n                | CONSTANT ARG_LIST_R\n                | ARG_LIST_RARG_LIST_R : COMMA ARG_LIST\n                  | EMPTYCONSTANT : INT\n                | FLOAT\n                | STRINGREAD : READ_K LPAREN ID_LIST RPARENID_LIST : ID READ_NEURAL ID_LIST_RREAD_NEURAL : EMPTYID_LIST_R : COMMA ID_LIST\n                 | EMPTYWRITE : WRITE_K LPAREN WRITE_LIST RPARENWRITE_LIST : H_EXPRESSION WRITE_LIST_R\n                  | CONSTANT CONSTANT_WRITE_N WRITE_LIST_RCONSTANT_WRITE_N : EMPTYWRITE_LIST_R : WRITE_NEURAL COMMA WRITE_LIST\n                    | WRITE_NEURAL EMPTYWRITE_NEURAL : EMPTYRETURN : RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLONEXPRESSION : TERM NEURAL_EXPRESSION EXPRESSION_RNEURAL_EXPRESSION : EMPTYEXPRESSION_R : PLUS NEURAL_PLUS EXPRESSION\n                    | MINUS NEURAL_MINUS EXPRESSION\n                    | EMPTYNEURAL_PLUS : EMPTYNEURAL_MINUS : EMPTYTERM : FACTOR NEURAL_TERM TERM_RNEURAL_TERM : EMPTYTERM_R : TIMES NEURAL_TIMES TERM\n              | DIVIDE NEURAL_DIVIDE TERM\n              | EMPTYNEURAL_TIMES : EMPTYNEURAL_DIVIDE : EMPTYFACTOR : ID NEURAL_ID_FAC\n              | CONSTANT NEURAL_CNT_FACT\n              | LPAREN H_EXPRESSION RPARENNEURAL_ID_FAC : EMPTYNEURAL_CNT_FACT : EMPTYS_EXPRESSION : EXPRESSION\n                    | EXPRESSION GT EXPRESSION\n                    | EXPRESSION LT EXPRESSION\n                    | EXPRESSION GTE EXPRESSION\n                    | EXPRESSION LTE EXPRESSION\n                    | EXPRESSION DOUBLEEQUAL EXPRESSIONH_EXPRESSION : S_EXPRESSION H_EXPRESSION_RH_EXPRESSION_R : OR H_EXPRESSION\n                      | AND H_EXPRESSION\n                      | EMPTYPRINCIPAL_BLOCK : MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKENDPRINCIPAL_BODY : STATEMENT PRINCIPAL_BODY_R\n                      | EMPTYPRINCIPAL_BODY_R : PRINCIPAL_BODYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,7,17,77,],[0,-1,-3,-109,]),'ID':([2,19,20,21,22,23,29,30,31,32,34,42,47,50,56,61,62,65,66,68,69,80,81,82,83,86,88,89,90,91,97,106,111,129,130,148,149,151,152,153,154,155,169,170,173,176,187,188,191,192,196,200,206,207,208,209,210,211,212,213,214,216,230,234,236,237,240,241,242,246,247,248,249,252,],[3,27,28,-113,-113,-113,-11,-14,-12,-13,41,58,76,58,-36,-39,-40,-41,-42,92,93,-32,-33,-34,-35,98,110,119,119,119,-113,98,119,119,-53,119,119,119,119,119,119,119,58,58,110,119,-113,-113,-113,-113,58,58,119,-85,119,-86,119,-92,119,-93,58,58,-43,119,-113,58,-113,-48,-49,-45,-47,58,-44,-50,]),'SEMICOLON':([3,4,5,40,41,46,48,52,53,54,55,76,96,103,104,105,115,116,117,118,119,121,131,136,140,145,147,150,156,157,158,159,160,161,163,171,175,179,180,181,182,183,184,185,186,189,190,193,202,203,225,226,227,228,245,],[-113,6,-2,45,-113,-8,-10,80,81,82,83,-113,-9,-64,-65,-66,-113,-99,-113,-113,-113,-113,-58,-67,-72,-95,-105,-108,-113,-81,-113,-88,-94,-97,-98,-113,-96,-106,-107,-100,-101,-102,-103,-104,-80,-84,-87,-91,-51,-52,-82,-83,-89,-90,250,]),'VARS_K':([6,],[9,]),'FUNCTION_K':([8,33,224,233,],[15,-4,15,15,]),'MAIN_K':([8,10,11,12,13,14,33,224,233,235,238,],[-113,18,-15,-16,-17,-18,-4,-113,-113,-19,-21,]),'BLOCKSTART':([9,35,94,95,126,127,128,162,164,194,195,232,243,],[16,42,-113,-113,169,-23,170,-113,196,214,-46,237,248,]),'VOID_K':([15,],[20,]),'INT_K':([15,16,43,44,45,167,],[21,21,21,21,21,21,]),'FLOAT_K':([15,16,43,44,45,167,],[22,22,22,22,22,22,]),'STRING_K':([15,16,43,44,45,167,],[23,23,23,23,23,23,]),'LPAREN':([18,27,28,36,37,38,39,58,59,60,64,67,89,90,91,97,111,129,130,148,149,151,152,153,154,155,176,187,188,191,192,206,207,208,209,210,211,212,213,220,234,],[26,-113,-113,43,-22,44,-20,86,88,89,90,91,111,111,111,-113,111,111,-53,111,111,111,111,111,111,111,111,-113,-113,-113,-113,111,-85,111,-86,111,-92,111,-93,234,111,]),'COLON':([21,22,23,25,29,30,31,32,],[-113,-113,-113,34,-11,-14,-12,-13,]),'BLOCKEND':([24,42,45,49,50,51,56,61,62,65,66,73,74,75,78,79,80,81,82,83,196,200,201,214,215,216,217,219,221,222,223,229,230,231,236,237,240,241,242,244,246,247,248,249,250,251,252,],[33,-113,-113,77,-113,-111,-36,-39,-40,-41,-42,-5,-6,-7,-110,-112,-32,-33,-34,-35,-113,-113,224,-113,230,-113,-38,233,-29,-30,-31,236,-43,-37,-113,-113,-113,-48,-49,249,-45,-47,-113,-44,-79,252,-50,]),'RPAREN':([26,43,44,63,70,71,72,86,93,98,99,100,101,102,103,104,105,106,107,109,110,112,113,114,115,116,117,118,119,120,121,122,124,125,132,133,134,135,137,138,139,141,142,143,144,145,146,147,150,156,157,158,159,160,161,163,166,167,168,172,174,175,177,178,179,180,181,182,183,184,185,186,189,190,193,198,204,205,225,226,227,228,239,],[35,-113,-113,-56,94,-25,95,-113,-113,-55,131,-113,-61,-113,-64,-65,-66,-113,-63,136,-113,140,-113,-113,-113,-99,-113,-113,-113,162,-113,164,-113,-26,-59,-60,-62,-57,-113,-69,175,-73,-113,-78,-113,-95,-75,-105,-108,-113,-81,-113,-88,-94,-97,-98,-24,-113,-28,-68,-71,-96,-77,-74,-106,-107,-100,-101,-102,-103,-104,-80,-84,-87,-91,-27,-70,-76,-82,-83,-89,-90,245,]),'COMMA':([41,63,76,86,93,98,100,102,103,104,105,106,110,113,114,115,116,117,118,119,121,124,125,135,137,138,142,143,144,145,146,147,150,156,157,158,159,160,161,163,175,179,180,181,182,183,184,185,186,189,190,193,225,226,227,228,],[47,-56,47,106,-113,-55,106,106,-64,-65,-66,106,-113,-113,-113,-113,-99,-113,-113,-113,-113,167,-26,-57,173,-69,176,-78,-113,-95,-75,-105,-108,-113,-81,-113,-88,-94,-97,-98,-96,-106,-107,-100,-101,-102,-103,-104,-80,-84,-87,-91,-82,-83,-89,-90,]),'READ_K':([42,50,56,61,62,65,66,80,81,82,83,169,170,196,200,214,216,230,236,237,240,241,242,246,247,248,249,252,],[59,59,-36,-39,-40,-41,-42,-32,-33,-34,-35,59,59,59,59,59,59,-43,-113,59,-113,-48,-49,-45,-47,59,-44,-50,]),'WRITE_K':([42,50,56,61,62,65,66,80,81,82,83,169,170,196,200,214,216,230,236,237,240,241,242,246,247,248,249,252,],[60,60,-36,-39,-40,-41,-42,-32,-33,-34,-35,60,60,60,60,60,60,-43,-113,60,-113,-48,-49,-45,-47,60,-44,-50,]),'IF_K':([42,50,56,61,62,65,66,80,81,82,83,169,170,196,200,214,216,230,236,237,240,241,242,246,247,248,249,252,],[64,64,-36,-39,-40,-41,-42,-32,-33,-34,-35,64,64,64,64,64,64,-43,-113,64,-113,-48,-49,-45,-47,64,-44,-50,]),'WHILE_K':([42,50,56,61,62,65,66,80,81,82,83,169,170,196,200,214,216,230,236,237,240,241,242,246,247,248,249,252,],[67,67,-36,-39,-40,-41,-42,-32,-33,-34,-35,67,67,67,67,67,67,-43,-113,67,-113,-48,-49,-45,-47,67,-44,-50,]),'FOR_K':([42,50,56,61,62,65,66,80,81,82,83,169,170,196,200,214,216,230,236,237,240,241,242,246,247,248,249,252,],[68,68,-36,-39,-40,-41,-42,-32,-33,-34,-35,68,68,68,68,68,68,-43,-113,68,-113,-48,-49,-45,-47,68,-44,-50,]),'RETURN_K':([56,61,62,65,66,80,81,82,83,199,200,221,222,223,230,236,240,241,242,246,247,249,252,],[-36,-39,-40,-41,-42,-32,-33,-34,-35,220,-113,-29,-30,-31,-43,-113,-113,-48,-49,-45,-47,-44,-50,]),'EQUALS':([57,58,63,84,85,92,135,],[-113,-55,-56,97,-54,123,-57,]),'LBRACE':([58,98,],[87,87,]),'INT':([86,87,89,90,91,97,106,111,123,129,130,148,149,151,152,153,154,155,176,187,188,191,192,197,206,207,208,209,210,211,212,213,234,],[103,108,103,103,103,-113,103,103,165,103,-53,103,103,103,103,103,103,103,103,-113,-113,-113,-113,218,103,-85,103,-86,103,-92,103,-93,103,]),'FLOAT':([86,89,90,91,97,106,111,129,130,148,149,151,152,153,154,155,176,187,188,191,192,206,207,208,209,210,211,212,213,234,],[104,104,104,104,-113,104,104,104,-53,104,104,104,104,104,104,104,104,-113,-113,-113,-113,104,-85,104,-86,104,-92,104,-93,104,]),'STRING':([86,89,90,91,97,106,111,129,130,148,149,151,152,153,154,155,176,187,188,191,192,206,207,208,209,210,211,212,213,234,],[105,105,105,105,-113,105,105,105,-53,105,105,105,105,105,105,105,105,-113,-113,-113,-113,105,-85,105,-86,105,-92,105,-93,105,]),'TIMES':([103,104,105,114,118,119,121,145,146,158,159,160,161,163,175,],[-64,-65,-66,-113,-113,-113,-113,-95,-98,191,-88,-94,-97,-98,-96,]),'DIVIDE':([103,104,105,114,118,119,121,145,146,158,159,160,161,163,175,],[-64,-65,-66,-113,-113,-113,-113,-95,-98,192,-88,-94,-97,-98,-96,]),'PLUS':([103,104,105,114,117,118,119,121,145,146,156,157,158,159,160,161,163,175,190,193,227,228,],[-64,-65,-66,-113,-113,-113,-113,-113,-95,-98,187,-81,-113,-88,-94,-97,-98,-96,-87,-91,-89,-90,]),'MINUS':([103,104,105,114,117,118,119,121,145,146,156,157,158,159,160,161,163,175,190,193,227,228,],[-64,-65,-66,-113,-113,-113,-113,-113,-95,-98,188,-81,-113,-88,-94,-97,-98,-96,-87,-91,-89,-90,]),'GT':([103,104,105,114,116,117,118,119,121,145,146,156,157,158,159,160,161,163,175,186,189,190,193,225,226,227,228,],[-64,-65,-66,-113,151,-113,-113,-113,-113,-95,-98,-113,-81,-113,-88,-94,-97,-98,-96,-80,-84,-87,-91,-82,-83,-89,-90,]),'LT':([103,104,105,114,116,117,118,119,121,145,146,156,157,158,159,160,161,163,175,186,189,190,193,225,226,227,228,],[-64,-65,-66,-113,152,-113,-113,-113,-113,-95,-98,-113,-81,-113,-88,-94,-97,-98,-96,-80,-84,-87,-91,-82,-83,-89,-90,]),'GTE':([103,104,105,114,116,117,118,119,121,145,146,156,157,158,159,160,161,163,175,186,189,190,193,225,226,227,228,],[-64,-65,-66,-113,153,-113,-113,-113,-113,-95,-98,-113,-81,-113,-88,-94,-97,-98,-96,-80,-84,-87,-91,-82,-83,-89,-90,]),'LTE':([103,104,105,114,116,117,118,119,121,145,146,156,157,158,159,160,161,163,175,186,189,190,193,225,226,227,228,],[-64,-65,-66,-113,154,-113,-113,-113,-113,-95,-98,-113,-81,-113,-88,-94,-97,-98,-96,-80,-84,-87,-91,-82,-83,-89,-90,]),'DOUBLEEQUAL':([103,104,105,114,116,117,118,119,121,145,146,156,157,158,159,160,161,163,175,186,189,190,193,225,226,227,228,],[-64,-65,-66,-113,155,-113,-113,-113,-113,-95,-98,-113,-81,-113,-88,-94,-97,-98,-96,-80,-84,-87,-91,-82,-83,-89,-90,]),'OR':([103,104,105,114,115,116,117,118,119,121,145,146,156,157,158,159,160,161,163,175,181,182,183,184,185,186,189,190,193,225,226,227,228,],[-64,-65,-66,-113,148,-99,-113,-113,-113,-113,-95,-98,-113,-81,-113,-88,-94,-97,-98,-96,-100,-101,-102,-103,-104,-80,-84,-87,-91,-82,-83,-89,-90,]),'AND':([103,104,105,114,115,116,117,118,119,121,145,146,156,157,158,159,160,161,163,175,181,182,183,184,185,186,189,190,193,225,226,227,228,],[-64,-65,-66,-113,149,-99,-113,-113,-113,-113,-95,-98,-113,-81,-113,-88,-94,-97,-98,-96,-100,-101,-102,-103,-104,-80,-84,-87,-91,-82,-83,-89,-90,]),'RBRACE':([108,],[135,]),'TO_K':([165,],[197,]),'DO_K':([218,],[232,]),'ELSE_K':([236,],[243,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,8,21,22,23,27,28,41,42,43,44,45,50,57,76,86,93,94,95,97,100,102,106,110,113,114,115,117,118,119,121,124,137,142,144,156,158,162,167,171,187,188,191,192,196,200,214,216,224,233,236,237,240,248,],[5,14,30,30,30,37,39,48,51,71,71,75,51,85,48,107,125,127,127,130,107,107,107,138,143,146,150,157,159,161,163,168,174,177,143,189,193,195,71,203,207,209,211,213,217,223,217,217,14,14,242,217,247,217,]),'BLOCK':([6,],[7,]),'VAR_BLOCK':([6,],[8,]),'PROC_BLOCK':([8,],[10,]),'PROC_DECL':([8,224,233,],[11,235,238,]),'PROC_DECL_RETURN':([8,224,233,],[12,12,12,]),'PROC_DECL_VOID':([8,224,233,],[13,13,13,]),'PRINCIPAL_BLOCK':([10,],[17,]),'TYPE':([15,16,43,44,45,167,],[19,25,69,69,25,69,]),'VAR_DECL':([16,45,],[24,74,]),'NEURAL_TYPE':([21,22,23,],[29,31,32,]),'neural_proc_return_id':([27,],[36,]),'neural_proc_void_id':([28,],[38,]),'VAR_LIST':([34,],[40,]),'VAR_LIST2':([41,76,],[46,96,]),'PRINCIPAL_BODY':([42,50,],[49,79,]),'STATEMENT':([42,50,169,170,196,200,214,216,237,248,],[50,50,200,200,216,200,216,216,216,216,]),'ASSIGN':([42,50,169,170,196,200,214,216,237,248,],[52,52,52,52,52,52,52,52,52,52,]),'FUNC_CALL':([42,50,169,170,196,200,214,216,237,248,],[53,53,53,53,53,53,53,53,53,53,]),'READ':([42,50,169,170,196,200,214,216,237,248,],[54,54,54,54,54,54,54,54,54,54,]),'WRITE':([42,50,169,170,196,200,214,216,237,248,],[55,55,55,55,55,55,55,55,55,55,]),'FLOW':([42,50,169,170,196,200,214,216,237,248,],[56,56,56,56,56,56,56,56,56,56,]),'VAR':([42,50,86,106,169,170,196,200,214,216,237,248,],[57,57,100,100,57,57,57,57,57,57,57,57,]),'DECISION':([42,50,169,170,196,200,214,216,237,248,],[61,61,61,61,61,61,61,61,61,61,]),'LOOP':([42,50,169,170,196,200,214,216,237,248,],[62,62,62,62,62,62,62,62,62,62,]),'ARRAY':([42,50,86,106,169,170,196,200,214,216,237,248,],[63,63,63,63,63,63,63,63,63,63,63,63,]),'WHILE_LOOP':([42,50,169,170,196,200,214,216,237,248,],[65,65,65,65,65,65,65,65,65,65,]),'FOR_LOOP':([42,50,169,170,196,200,214,216,237,248,],[66,66,66,66,66,66,66,66,66,66,]),'PARAM_DECL':([43,44,167,],[70,72,198,]),'VAR_DECL_R':([45,],[73,]),'PRINCIPAL_BODY_R':([50,],[78,]),'ASSIGN_VAR_N':([57,],[84,]),'ARG_LIST':([86,106,],[99,134,]),'ARG_LIST_R':([86,100,102,106,],[101,132,133,101,]),'CONSTANT':([86,89,90,91,106,111,129,148,149,151,152,153,154,155,176,206,208,210,212,234,],[102,114,121,121,102,121,121,121,121,121,121,121,121,121,114,121,121,121,121,121,]),'ID_LIST':([88,173,],[109,204,]),'WRITE_LIST':([89,176,],[112,205,]),'H_EXPRESSION':([89,90,91,111,129,148,149,176,234,],[113,120,122,139,171,179,180,113,239,]),'S_EXPRESSION':([89,90,91,111,129,148,149,176,234,],[115,115,115,115,115,115,115,115,115,]),'EXPRESSION':([89,90,91,111,129,148,149,151,152,153,154,155,176,206,208,234,],[116,116,116,116,116,116,116,181,182,183,184,185,116,225,226,116,]),'TERM':([89,90,91,111,129,148,149,151,152,153,154,155,176,206,208,210,212,234,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,227,228,117,]),'FACTOR':([89,90,91,111,129,148,149,151,152,153,154,155,176,206,208,210,212,234,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'neuro':([93,],[124,]),'neural_param_decl':([94,95,],[126,128,]),'EQUALS_NEURAL':([97,],[129,]),'READ_NEURAL':([110,],[137,]),'WRITE_LIST_R':([113,144,],[141,178,]),'WRITE_NEURAL':([113,144,],[142,142,]),'CONSTANT_WRITE_N':([114,],[144,]),'NEURAL_CNT_FACT':([114,121,],[145,145,]),'H_EXPRESSION_R':([115,],[147,]),'NEURAL_EXPRESSION':([117,],[156,]),'NEURAL_TERM':([118,],[158,]),'NEURAL_ID_FAC':([119,],[160,]),'PARAM_DECL_R':([124,],[166,]),'ID_LIST_R':([137,],[172,]),'EXPRESSION_R':([156,],[186,]),'TERM_R':([158,],[190,]),'EXP_RESULT_NEURAL':([162,],[194,]),'PROC_BODY':([169,170,200,],[199,201,222,]),'ASSI_H_EXP_NEURAL':([171,],[202,]),'NEURAL_PLUS':([187,],[206,]),'NEURAL_MINUS':([188,],[208,]),'NEURAL_TIMES':([191,],[210,]),'NEURAL_DIVIDE':([192,],[212,]),'STATEMENT_R':([196,214,216,237,248,],[215,229,231,244,251,]),'RETURN':([199,],[219,]),'PROC_BODY_R':([200,],[221,]),'DECISION_ALT':([236,],[240,]),'ELSE':([236,],[241,]),'DECISION_END_NEURAL':([240,],[246,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK','PROGRAM',5,'p_program','new.py',182),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','new.py',187),
  ('BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK','BLOCK',3,'p_block','new.py',196),
  ('VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND','VAR_BLOCK',4,'p_var_block','new.py',199),
  ('VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R','VAR_DECL',5,'p_var_decl','new.py',202),
  ('VAR_DECL_R -> VAR_DECL','VAR_DECL_R',1,'p_var_decl_r','new.py',205),
  ('VAR_DECL_R -> EMPTY','VAR_DECL_R',1,'p_var_decl_r','new.py',206),
  ('VAR_LIST -> ID VAR_LIST2','VAR_LIST',2,'p_var_list','new.py',209),
  ('VAR_LIST2 -> COMMA ID VAR_LIST2','VAR_LIST2',3,'p_var_list2','new.py',213),
  ('VAR_LIST2 -> EMPTY','VAR_LIST2',1,'p_var_list2','new.py',214),
  ('TYPE -> INT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',239),
  ('TYPE -> FLOAT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',240),
  ('TYPE -> STRING_K NEURAL_TYPE','TYPE',2,'p_type','new.py',241),
  ('NEURAL_TYPE -> EMPTY','NEURAL_TYPE',1,'p_neural_type','new.py',248),
  ('PROC_BLOCK -> PROC_DECL','PROC_BLOCK',1,'p_proc_block','new.py',251),
  ('PROC_DECL -> PROC_DECL_RETURN','PROC_DECL',1,'p_proc_decl','new.py',254),
  ('PROC_DECL -> PROC_DECL_VOID','PROC_DECL',1,'p_proc_decl','new.py',255),
  ('PROC_DECL -> EMPTY','PROC_DECL',1,'p_proc_decl','new.py',256),
  ('PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL','PROC_DECL_VOID',12,'p_proc_decl_void','new.py',260),
  ('neural_proc_void_id -> EMPTY','neural_proc_void_id',1,'p_neural_proc_void_id','new.py',264),
  ('PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL','PROC_DECL_RETURN',13,'p_proc_decl_return','new.py',274),
  ('neural_proc_return_id -> EMPTY','neural_proc_return_id',1,'p_neural_proc_return_id','new.py',278),
  ('neural_param_decl -> EMPTY','neural_param_decl',1,'p_neural_param_decl','new.py',287),
  ('PARAM_DECL -> TYPE ID neuro PARAM_DECL_R','PARAM_DECL',4,'p_param_decl','new.py',290),
  ('PARAM_DECL -> EMPTY','PARAM_DECL',1,'p_param_decl','new.py',291),
  ('neuro -> EMPTY','neuro',1,'p_neuro','new.py',297),
  ('PARAM_DECL_R -> COMMA PARAM_DECL','PARAM_DECL_R',2,'p_param_decl_r','new.py',315),
  ('PARAM_DECL_R -> EMPTY','PARAM_DECL_R',1,'p_param_decl_r','new.py',316),
  ('PROC_BODY -> STATEMENT PROC_BODY_R','PROC_BODY',2,'p_proc_body','new.py',319),
  ('PROC_BODY_R -> PROC_BODY','PROC_BODY_R',1,'p_proc_body_r','new.py',322),
  ('PROC_BODY_R -> EMPTY','PROC_BODY_R',1,'p_proc_body_r','new.py',323),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','new.py',326),
  ('STATEMENT -> FUNC_CALL SEMICOLON','STATEMENT',2,'p_statement','new.py',327),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','new.py',328),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','new.py',329),
  ('STATEMENT -> FLOW','STATEMENT',1,'p_statement','new.py',330),
  ('STATEMENT_R -> STATEMENT STATEMENT_R','STATEMENT_R',2,'p_statement_r','new.py',334),
  ('STATEMENT_R -> EMPTY','STATEMENT_R',1,'p_statement_r','new.py',335),
  ('FLOW -> DECISION','FLOW',1,'p_flow','new.py',338),
  ('FLOW -> LOOP','FLOW',1,'p_flow','new.py',339),
  ('LOOP -> WHILE_LOOP','LOOP',1,'p_loop','new.py',342),
  ('LOOP -> FOR_LOOP','LOOP',1,'p_loop','new.py',343),
  ('WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND','WHILE_LOOP',7,'p_while_loop','new.py',346),
  ('FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND','FOR_LOOP',10,'p_for_loop','new.py',349),
  ('DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL','DECISION',10,'p_decision','new.py',352),
  ('EXP_RESULT_NEURAL -> EMPTY','EXP_RESULT_NEURAL',1,'p_exp_result_neural','new.py',355),
  ('DECISION_END_NEURAL -> EMPTY','DECISION_END_NEURAL',1,'p_decision_end_neural','new.py',367),
  ('DECISION_ALT -> ELSE','DECISION_ALT',1,'p_decision_alt','new.py',372),
  ('DECISION_ALT -> EMPTY','DECISION_ALT',1,'p_decision_alt','new.py',373),
  ('ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND','ELSE',4,'p_else','new.py',376),
  ('ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL','ASSIGN',6,'p_assign','new.py',380),
  ('ASSI_H_EXP_NEURAL -> EMPTY','ASSI_H_EXP_NEURAL',1,'p_assi_h_exp_neural','new.py',383),
  ('EQUALS_NEURAL -> EMPTY','EQUALS_NEURAL',1,'p_equals_neural','new.py',406),
  ('ASSIGN_VAR_N -> EMPTY','ASSIGN_VAR_N',1,'p_assing_var_n','new.py',410),
  ('VAR -> ID','VAR',1,'p_var','new.py',420),
  ('VAR -> ARRAY','VAR',1,'p_var','new.py',421),
  ('ARRAY -> ID LBRACE INT RBRACE','ARRAY',4,'p_array','new.py',425),
  ('FUNC_CALL -> ID LPAREN ARG_LIST RPAREN','FUNC_CALL',4,'p_func_call','new.py',428),
  ('ARG_LIST -> VAR ARG_LIST_R','ARG_LIST',2,'p_arg_list','new.py',431),
  ('ARG_LIST -> CONSTANT ARG_LIST_R','ARG_LIST',2,'p_arg_list','new.py',432),
  ('ARG_LIST -> ARG_LIST_R','ARG_LIST',1,'p_arg_list','new.py',433),
  ('ARG_LIST_R -> COMMA ARG_LIST','ARG_LIST_R',2,'p_arglist_r','new.py',436),
  ('ARG_LIST_R -> EMPTY','ARG_LIST_R',1,'p_arglist_r','new.py',437),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','new.py',440),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','new.py',441),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','new.py',442),
  ('READ -> READ_K LPAREN ID_LIST RPAREN','READ',4,'p_read','new.py',446),
  ('ID_LIST -> ID READ_NEURAL ID_LIST_R','ID_LIST',3,'p_id_list','new.py',449),
  ('READ_NEURAL -> EMPTY','READ_NEURAL',1,'p_read_neural','new.py',452),
  ('ID_LIST_R -> COMMA ID_LIST','ID_LIST_R',2,'p_id_list_r','new.py',457),
  ('ID_LIST_R -> EMPTY','ID_LIST_R',1,'p_id_list_r','new.py',458),
  ('WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN','WRITE',4,'p_write','new.py',461),
  ('WRITE_LIST -> H_EXPRESSION WRITE_LIST_R','WRITE_LIST',2,'p_write_list','new.py',464),
  ('WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R','WRITE_LIST',3,'p_write_list','new.py',465),
  ('CONSTANT_WRITE_N -> EMPTY','CONSTANT_WRITE_N',1,'p_constant_write_n','new.py',468),
  ('WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST','WRITE_LIST_R',3,'p_write_list_r','new.py',472),
  ('WRITE_LIST_R -> WRITE_NEURAL EMPTY','WRITE_LIST_R',2,'p_write_list_r','new.py',473),
  ('WRITE_NEURAL -> EMPTY','WRITE_NEURAL',1,'p_write_neural','new.py',476),
  ('RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','new.py',484),
  ('EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R','EXPRESSION',3,'p_expression','new.py',488),
  ('NEURAL_EXPRESSION -> EMPTY','NEURAL_EXPRESSION',1,'p_neural_expression','new.py',493),
  ('EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',522),
  ('EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',523),
  ('EXPRESSION_R -> EMPTY','EXPRESSION_R',1,'p_expression_r','new.py',524),
  ('NEURAL_PLUS -> EMPTY','NEURAL_PLUS',1,'p_neural_plus','new.py',528),
  ('NEURAL_MINUS -> EMPTY','NEURAL_MINUS',1,'p_neural_minus','new.py',534),
  ('TERM -> FACTOR NEURAL_TERM TERM_R','TERM',3,'p_term','new.py',539),
  ('NEURAL_TERM -> EMPTY','NEURAL_TERM',1,'p_neural_term','new.py',543),
  ('TERM_R -> TIMES NEURAL_TIMES TERM','TERM_R',3,'p_term_r','new.py',570),
  ('TERM_R -> DIVIDE NEURAL_DIVIDE TERM','TERM_R',3,'p_term_r','new.py',571),
  ('TERM_R -> EMPTY','TERM_R',1,'p_term_r','new.py',572),
  ('NEURAL_TIMES -> EMPTY','NEURAL_TIMES',1,'p_neural_times','new.py',576),
  ('NEURAL_DIVIDE -> EMPTY','NEURAL_DIVIDE',1,'p_neural_divide','new.py',581),
  ('FACTOR -> ID NEURAL_ID_FAC','FACTOR',2,'p_factor_','new.py',586),
  ('FACTOR -> CONSTANT NEURAL_CNT_FACT','FACTOR',2,'p_factor_','new.py',587),
  ('FACTOR -> LPAREN H_EXPRESSION RPAREN','FACTOR',3,'p_factor_','new.py',588),
  ('NEURAL_ID_FAC -> EMPTY','NEURAL_ID_FAC',1,'p_neural_id_fac','new.py',592),
  ('NEURAL_CNT_FACT -> EMPTY','NEURAL_CNT_FACT',1,'p_neural_id_cnt_fact','new.py',607),
  ('S_EXPRESSION -> EXPRESSION','S_EXPRESSION',1,'p_s_expression','new.py',613),
  ('S_EXPRESSION -> EXPRESSION GT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',614),
  ('S_EXPRESSION -> EXPRESSION LT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',615),
  ('S_EXPRESSION -> EXPRESSION GTE EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',616),
  ('S_EXPRESSION -> EXPRESSION LTE EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',617),
  ('S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',618),
  ('H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R','H_EXPRESSION',2,'p_h_expression','new.py',622),
  ('H_EXPRESSION_R -> OR H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',626),
  ('H_EXPRESSION_R -> AND H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',627),
  ('H_EXPRESSION_R -> EMPTY','H_EXPRESSION_R',1,'p_h_expression_r','new.py',628),
  ('PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND','PRINCIPAL_BLOCK',6,'p_principal_block','new.py',632),
  ('PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R','PRINCIPAL_BODY',2,'p_principal_body','new.py',636),
  ('PRINCIPAL_BODY -> EMPTY','PRINCIPAL_BODY',1,'p_principal_body','new.py',637),
  ('PRINCIPAL_BODY_R -> PRINCIPAL_BODY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',641),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','new.py',644),
]
