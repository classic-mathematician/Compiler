
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENAND BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MINUS OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K THEN_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON BLOCKneural_program_id : EMPTYBLOCK : VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCKVAR_BLOCK : VARS_K BLOCKSTART VAR_DECL BLOCKENDVAR_DECL : TYPE COLON VAR_LIST SEMICOLON VAR_DECL_RVAR_DECL_R : VAR_DECL\n                  | EMPTYVAR_LIST : ID VAR_LIST2VAR_LIST2 : COMMA ID VAR_LIST2\n                 | EMPTYTYPE : INT_K NEURAL_TYPE\n            | FLOAT_K NEURAL_TYPE\n            | STRING_K NEURAL_TYPENEURAL_TYPE : EMPTYPROC_BLOCK : PROC_DECLPROC_DECL : PROC_DECL_RETURN\n                 | PROC_DECL_VOID\n                 | EMPTYPROC_DECL_VOID : FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECLneural_proc_void_id : EMPTYPROC_DECL_RETURN : FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECLneural_proc_return_id : EMPTYneural_param_decl : EMPTYPARAM_DECL : TYPE ID neuro PARAM_DECL_R\n                  | EMPTYneuro : EMPTYPARAM_DECL_R : COMMA PARAM_DECL\n                    | EMPTYPROC_BODY : STATEMENT PROC_BODY_RPROC_BODY_R : PROC_BODY\n                   | EMPTYSTATEMENT : ASSIGN SEMICOLON\n                 | FUNC_CALL SEMICOLON\n                 | READ SEMICOLON\n                 | WRITE SEMICOLON\n                 | FLOW\n                FLOW : DECISION\n            | LOOPLOOP : WHILE_LOOP\n            | FOR_LOOPWHILE_LOOP : WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKENDFOR_LOOP : FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKENDDECISION : IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALTDECISION_ALT : ELSE_K DECISION\n                    | BLOCKSTART STATEMENT_R BLOCKEND\n                    | EMPTYSTATEMENT_R : STATEMENT STATEMENT_R\n                   | EMPTYASSIGN : VAR EQUALS H_EXPRESSIONVAR : ID\n           | ARRAYARRAY : ID LBRACE INT RBRACEFUNC_CALL : ID LPAREN ARG_LIST RPARENARG_LIST : VAR ARG_LIST_R\n                | CONSTANT ARG_LIST_R\n                | ARG_LIST_RARG_LIST_R : COMMA ARG_LIST\n                  | EMPTYCONSTANT : INT\n                | FLOAT\n                | STRINGREAD : READ_K ID_LISTID_LIST : ID ID_LIST_RID_LIST_R : COMMA ID_LIST\n                 | EMPTYWRITE : WRITE_K WRITE_LISTWRITE_LIST : H_EXPRESSION WRITE_LIST_RWRITE_LIST_R : COMMA H_EXPRESSION\n                    | EMPTYRETURN : RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLONEXPRESSION : TERM NEURAL_EXPRESSION EXPRESSION_RNEURAL_EXPRESSION : EMPTYEXPRESSION_R : PLUS NEURAL_PLUS EXPRESSION\n                    | MINUS NEURAL_MINUS EXPRESSION\n                    | EMPTYNEURAL_PLUS : EMPTYNEURAL_MINUS : EMPTYTERM : FACTOR NEURAL_TERM TERM_RNEURAL_TERM : EMPTYTERM_R : TIMES NEURAL_TIMES TERM\n              | DIVIDE NEURAL_DIVIDE TERM\n              | EMPTYNEURAL_TIMES : EMPTYNEURAL_DIVIDE : EMPTYFACTOR : ID NEURAL_ID_FAC\n              | CONSTANT NEURAL_CNT_FACT\n              | LPAREN H_EXPRESSION RPARENNEURAL_ID_FAC : EMPTYNEURAL_CNT_FACT : EMPTYS_EXPRESSION : EXPRESSION\n                    | EXPRESSION GT EXPRESSION\n                    | EXPRESSION LT EXPRESSIONH_EXPRESSION : S_EXPRESSION H_EXPRESSION_RH_EXPRESSION_R : OR H_EXPRESSION\n                      | AND H_EXPRESSION\n                      | EMPTYPRINCIPAL_BLOCK : MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKENDPRINCIPAL_BODY : STATEMENT PRINCIPAL_BODY_RPRINCIPAL_BODY_R : PRINCIPAL_BODY\n                         | EMPTYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,7,17,76,],[0,-1,-3,-97,]),'ID':([2,19,20,21,22,23,29,30,31,32,34,42,47,50,55,58,59,60,61,64,65,67,68,80,81,82,83,84,85,97,101,102,114,118,121,124,125,127,128,158,159,162,163,172,173,174,175,176,177,178,179,180,181,182,183,187,194,204,206,209,211,212,214,215,219,222,223,],[3,27,28,-101,-101,-101,-11,-14,-12,-13,41,57,75,57,-36,88,95,-37,-38,-39,-40,103,104,-32,-33,-34,-35,95,109,95,95,95,109,88,95,95,95,95,95,-101,-101,-101,-101,57,57,95,-76,95,-77,95,-83,95,-84,57,57,57,57,-101,-41,95,57,-43,-46,57,-44,-45,-42,]),'SEMICOLON':([3,4,5,40,41,46,48,51,52,53,54,75,87,88,89,90,91,92,93,94,95,96,98,99,100,107,108,117,119,120,122,123,126,129,130,131,132,133,134,135,136,146,151,152,153,154,155,156,157,160,161,164,165,189,190,191,192,221,],[-101,6,-2,45,-101,-8,-10,80,81,82,83,-101,-62,-101,-66,-101,-101,-90,-101,-101,-101,-101,-59,-60,-61,-9,-49,-63,-65,-67,-69,-93,-96,-101,-72,-101,-79,-85,-88,-86,-89,-53,-64,-68,-94,-95,-91,-92,-71,-75,-78,-82,-87,-73,-74,-80,-81,224,]),'VARS_K':([6,],[9,]),'FUNCTION_K':([8,33,203,208,],[15,-4,15,15,]),'MAIN_K':([8,10,11,12,13,14,33,203,208,210,216,],[-101,18,-15,-16,-17,-18,-4,-101,-101,-19,-21,]),'BLOCKSTART':([9,35,105,106,143,144,145,166,167,204,207,],[16,42,-101,-101,172,-23,173,182,183,211,215,]),'VOID_K':([15,],[20,]),'INT_K':([15,16,43,44,45,170,],[21,21,21,21,21,21,]),'FLOAT_K':([15,16,43,44,45,170,],[22,22,22,22,22,22,]),'STRING_K':([15,16,43,44,45,170,],[23,23,23,23,23,23,]),'LPAREN':([18,27,28,36,37,38,39,57,59,63,66,84,97,101,102,121,124,125,127,128,158,159,162,163,174,175,176,177,178,179,180,181,199,209,],[26,-101,-101,43,-22,44,-20,85,97,101,102,97,97,97,97,97,97,97,97,97,-101,-101,-101,-101,97,-76,97,-77,97,-83,97,-84,209,97,]),'COLON':([21,22,23,25,29,30,31,32,],[-101,-101,-101,34,-11,-14,-12,-13,]),'BLOCKEND':([24,45,49,50,55,60,61,64,65,72,73,74,77,78,79,80,81,82,83,182,183,187,188,193,194,195,196,198,200,201,202,204,205,206,211,212,214,215,218,219,220,222,223,224,],[33,-101,76,-101,-36,-37,-38,-39,-40,-5,-6,-7,-98,-99,-100,-32,-33,-34,-35,-101,-101,-101,203,204,-101,-48,206,208,-29,-30,-31,-101,-47,-41,-101,-43,-46,-101,222,-44,223,-45,-42,-70,]),'RPAREN':([26,43,44,62,69,70,71,85,91,92,93,94,95,96,98,99,100,104,109,110,111,112,113,114,115,123,126,129,130,131,132,133,134,135,136,137,138,139,141,142,147,148,149,150,153,154,155,156,157,160,161,164,165,169,170,171,185,189,190,191,192,217,],[35,-101,-101,-51,105,-25,106,-101,-101,-90,-101,-101,-101,-101,-59,-60,-61,-101,-50,146,-101,-56,-101,-101,-58,-93,-96,-101,-72,-101,-79,-85,-88,-86,-89,165,166,167,-101,-26,-54,-55,-57,-52,-94,-95,-91,-92,-71,-75,-78,-82,-87,-24,-101,-28,-27,-73,-74,-80,-81,221,]),'COMMA':([41,62,75,85,88,90,91,92,93,94,95,96,98,99,100,104,109,111,113,114,123,126,129,130,131,132,133,134,135,136,141,142,150,153,154,155,156,157,160,161,164,165,189,190,191,192,],[47,-51,47,114,118,121,-101,-90,-101,-101,-101,-101,-59,-60,-61,-101,-50,114,114,114,-93,-96,-101,-72,-101,-79,-85,-88,-86,-89,170,-26,-52,-94,-95,-91,-92,-71,-75,-78,-82,-87,-73,-74,-80,-81,]),'READ_K':([42,50,55,60,61,64,65,80,81,82,83,172,173,182,183,187,194,204,206,211,212,214,215,219,222,223,],[58,58,-36,-37,-38,-39,-40,-32,-33,-34,-35,58,58,58,58,58,58,-101,-41,58,-43,-46,58,-44,-45,-42,]),'WRITE_K':([42,50,55,60,61,64,65,80,81,82,83,172,173,182,183,187,194,204,206,211,212,214,215,219,222,223,],[59,59,-36,-37,-38,-39,-40,-32,-33,-34,-35,59,59,59,59,59,59,-101,-41,59,-43,-46,59,-44,-45,-42,]),'IF_K':([42,50,55,60,61,64,65,80,81,82,83,172,173,182,183,187,194,204,206,211,212,213,214,215,219,222,223,],[63,63,-36,-37,-38,-39,-40,-32,-33,-34,-35,63,63,63,63,63,63,-101,-41,63,-43,63,-46,63,-44,-45,-42,]),'WHILE_K':([42,50,55,60,61,64,65,80,81,82,83,172,173,182,183,187,194,204,206,211,212,214,215,219,222,223,],[66,66,-36,-37,-38,-39,-40,-32,-33,-34,-35,66,66,66,66,66,66,-101,-41,66,-43,-46,66,-44,-45,-42,]),'FOR_K':([42,50,55,60,61,64,65,80,81,82,83,172,173,182,183,187,194,204,206,211,212,214,215,219,222,223,],[67,67,-36,-37,-38,-39,-40,-32,-33,-34,-35,67,67,67,67,67,67,-101,-41,67,-43,-46,67,-44,-45,-42,]),'RETURN_K':([55,60,61,64,65,80,81,82,83,186,187,200,201,202,204,206,212,214,219,222,223,],[-36,-37,-38,-39,-40,-32,-33,-34,-35,199,-101,-29,-30,-31,-101,-41,-43,-46,-44,-45,-42,]),'EQUALS':([56,57,62,103,150,],[84,-50,-51,140,-52,]),'LBRACE':([57,109,],[86,86,]),'INT':([59,84,85,86,97,101,102,114,121,124,125,127,128,140,158,159,162,163,174,175,176,177,178,179,180,181,184,209,],[98,98,98,116,98,98,98,98,98,98,98,98,98,168,-101,-101,-101,-101,98,-76,98,-77,98,-83,98,-84,197,98,]),'FLOAT':([59,84,85,97,101,102,114,121,124,125,127,128,158,159,162,163,174,175,176,177,178,179,180,181,209,],[99,99,99,99,99,99,99,99,99,99,99,99,-101,-101,-101,-101,99,-76,99,-77,99,-83,99,-84,99,]),'STRING':([59,84,85,97,101,102,114,121,124,125,127,128,158,159,162,163,174,175,176,177,178,179,180,181,209,],[100,100,100,100,100,100,100,100,100,100,100,100,-101,-101,-101,-101,100,-76,100,-77,100,-83,100,-84,100,]),'OR':([91,92,93,94,95,96,98,99,100,129,130,131,132,133,134,135,136,155,156,157,160,161,164,165,189,190,191,192,],[124,-90,-101,-101,-101,-101,-59,-60,-61,-101,-72,-101,-79,-85,-88,-86,-89,-91,-92,-71,-75,-78,-82,-87,-73,-74,-80,-81,]),'AND':([91,92,93,94,95,96,98,99,100,129,130,131,132,133,134,135,136,155,156,157,160,161,164,165,189,190,191,192,],[125,-90,-101,-101,-101,-101,-59,-60,-61,-101,-72,-101,-79,-85,-88,-86,-89,-91,-92,-71,-75,-78,-82,-87,-73,-74,-80,-81,]),'GT':([92,93,94,95,96,98,99,100,129,130,131,132,133,134,135,136,157,160,161,164,165,189,190,191,192,],[127,-101,-101,-101,-101,-59,-60,-61,-101,-72,-101,-79,-85,-88,-86,-89,-71,-75,-78,-82,-87,-73,-74,-80,-81,]),'LT':([92,93,94,95,96,98,99,100,129,130,131,132,133,134,135,136,157,160,161,164,165,189,190,191,192,],[128,-101,-101,-101,-101,-59,-60,-61,-101,-72,-101,-79,-85,-88,-86,-89,-71,-75,-78,-82,-87,-73,-74,-80,-81,]),'PLUS':([93,94,95,96,98,99,100,129,130,131,132,133,134,135,136,161,164,165,191,192,],[-101,-101,-101,-101,-59,-60,-61,158,-72,-101,-79,-85,-88,-86,-89,-78,-82,-87,-80,-81,]),'MINUS':([93,94,95,96,98,99,100,129,130,131,132,133,134,135,136,161,164,165,191,192,],[-101,-101,-101,-101,-59,-60,-61,159,-72,-101,-79,-85,-88,-86,-89,-78,-82,-87,-80,-81,]),'TIMES':([94,95,96,98,99,100,131,132,133,134,135,136,165,],[-101,-101,-101,-59,-60,-61,162,-79,-85,-88,-86,-89,-87,]),'DIVIDE':([94,95,96,98,99,100,131,132,133,134,135,136,165,],[-101,-101,-101,-59,-60,-61,163,-79,-85,-88,-86,-89,-87,]),'RBRACE':([116,],[150,]),'TO_K':([168,],[184,]),'DO_K':([197,],[207,]),'ELSE_K':([204,],[213,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,8,21,22,23,27,28,41,43,44,45,50,75,85,88,90,91,93,94,95,96,104,105,106,111,113,114,129,131,141,158,159,162,163,170,182,183,187,194,203,204,208,211,215,],[5,14,30,30,30,37,39,48,70,70,74,79,48,115,119,122,126,130,132,134,136,142,144,144,115,115,115,160,164,171,175,177,179,181,70,195,195,202,195,14,214,14,195,195,]),'BLOCK':([6,],[7,]),'VAR_BLOCK':([6,],[8,]),'PROC_BLOCK':([8,],[10,]),'PROC_DECL':([8,203,208,],[11,210,216,]),'PROC_DECL_RETURN':([8,203,208,],[12,12,12,]),'PROC_DECL_VOID':([8,203,208,],[13,13,13,]),'PRINCIPAL_BLOCK':([10,],[17,]),'TYPE':([15,16,43,44,45,170,],[19,25,68,68,25,68,]),'VAR_DECL':([16,45,],[24,73,]),'NEURAL_TYPE':([21,22,23,],[29,31,32,]),'neural_proc_return_id':([27,],[36,]),'neural_proc_void_id':([28,],[38,]),'VAR_LIST':([34,],[40,]),'VAR_LIST2':([41,75,],[46,107,]),'PRINCIPAL_BODY':([42,50,],[49,78,]),'STATEMENT':([42,50,172,173,182,183,187,194,211,215,],[50,50,187,187,194,194,187,194,194,194,]),'ASSIGN':([42,50,172,173,182,183,187,194,211,215,],[51,51,51,51,51,51,51,51,51,51,]),'FUNC_CALL':([42,50,172,173,182,183,187,194,211,215,],[52,52,52,52,52,52,52,52,52,52,]),'READ':([42,50,172,173,182,183,187,194,211,215,],[53,53,53,53,53,53,53,53,53,53,]),'WRITE':([42,50,172,173,182,183,187,194,211,215,],[54,54,54,54,54,54,54,54,54,54,]),'FLOW':([42,50,172,173,182,183,187,194,211,215,],[55,55,55,55,55,55,55,55,55,55,]),'VAR':([42,50,85,114,172,173,182,183,187,194,211,215,],[56,56,111,111,56,56,56,56,56,56,56,56,]),'DECISION':([42,50,172,173,182,183,187,194,211,213,215,],[60,60,60,60,60,60,60,60,60,219,60,]),'LOOP':([42,50,172,173,182,183,187,194,211,215,],[61,61,61,61,61,61,61,61,61,61,]),'ARRAY':([42,50,85,114,172,173,182,183,187,194,211,215,],[62,62,62,62,62,62,62,62,62,62,62,62,]),'WHILE_LOOP':([42,50,172,173,182,183,187,194,211,215,],[64,64,64,64,64,64,64,64,64,64,]),'FOR_LOOP':([42,50,172,173,182,183,187,194,211,215,],[65,65,65,65,65,65,65,65,65,65,]),'PARAM_DECL':([43,44,170,],[69,71,185,]),'VAR_DECL_R':([45,],[72,]),'PRINCIPAL_BODY_R':([50,],[77,]),'ID_LIST':([58,118,],[87,151,]),'WRITE_LIST':([59,],[89,]),'H_EXPRESSION':([59,84,97,101,102,121,124,125,209,],[90,108,137,138,139,152,153,154,217,]),'S_EXPRESSION':([59,84,97,101,102,121,124,125,209,],[91,91,91,91,91,91,91,91,91,]),'EXPRESSION':([59,84,97,101,102,121,124,125,127,128,174,176,209,],[92,92,92,92,92,92,92,92,155,156,189,190,92,]),'TERM':([59,84,97,101,102,121,124,125,127,128,174,176,178,180,209,],[93,93,93,93,93,93,93,93,93,93,93,93,191,192,93,]),'FACTOR':([59,84,97,101,102,121,124,125,127,128,174,176,178,180,209,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'CONSTANT':([59,84,85,97,101,102,114,121,124,125,127,128,174,176,178,180,209,],[96,96,113,96,96,96,113,96,96,96,96,96,96,96,96,96,96,]),'ARG_LIST':([85,114,],[110,149,]),'ARG_LIST_R':([85,111,113,114,],[112,147,148,112,]),'ID_LIST_R':([88,],[117,]),'WRITE_LIST_R':([90,],[120,]),'H_EXPRESSION_R':([91,],[123,]),'NEURAL_EXPRESSION':([93,],[129,]),'NEURAL_TERM':([94,],[131,]),'NEURAL_ID_FAC':([95,],[133,]),'NEURAL_CNT_FACT':([96,],[135,]),'neuro':([104,],[141,]),'neural_param_decl':([105,106,],[143,145,]),'EXPRESSION_R':([129,],[157,]),'TERM_R':([131,],[161,]),'PARAM_DECL_R':([141,],[169,]),'NEURAL_PLUS':([158,],[174,]),'NEURAL_MINUS':([159,],[176,]),'NEURAL_TIMES':([162,],[178,]),'NEURAL_DIVIDE':([163,],[180,]),'PROC_BODY':([172,173,187,],[186,188,201,]),'STATEMENT_R':([182,183,194,211,215,],[193,196,205,218,220,]),'RETURN':([186,],[198,]),'PROC_BODY_R':([187,],[200,]),'DECISION_ALT':([204,],[212,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK','PROGRAM',5,'p_program','new.py',181),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','new.py',186),
  ('BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK','BLOCK',3,'p_block','new.py',195),
  ('VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND','VAR_BLOCK',4,'p_var_block','new.py',198),
  ('VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R','VAR_DECL',5,'p_var_decl','new.py',201),
  ('VAR_DECL_R -> VAR_DECL','VAR_DECL_R',1,'p_var_decl_r','new.py',204),
  ('VAR_DECL_R -> EMPTY','VAR_DECL_R',1,'p_var_decl_r','new.py',205),
  ('VAR_LIST -> ID VAR_LIST2','VAR_LIST',2,'p_var_list','new.py',208),
  ('VAR_LIST2 -> COMMA ID VAR_LIST2','VAR_LIST2',3,'p_var_list2','new.py',212),
  ('VAR_LIST2 -> EMPTY','VAR_LIST2',1,'p_var_list2','new.py',213),
  ('TYPE -> INT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',228),
  ('TYPE -> FLOAT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',229),
  ('TYPE -> STRING_K NEURAL_TYPE','TYPE',2,'p_type','new.py',230),
  ('NEURAL_TYPE -> EMPTY','NEURAL_TYPE',1,'p_neural_type','new.py',237),
  ('PROC_BLOCK -> PROC_DECL','PROC_BLOCK',1,'p_proc_block','new.py',240),
  ('PROC_DECL -> PROC_DECL_RETURN','PROC_DECL',1,'p_proc_decl','new.py',243),
  ('PROC_DECL -> PROC_DECL_VOID','PROC_DECL',1,'p_proc_decl','new.py',244),
  ('PROC_DECL -> EMPTY','PROC_DECL',1,'p_proc_decl','new.py',245),
  ('PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL','PROC_DECL_VOID',12,'p_proc_decl_void','new.py',249),
  ('neural_proc_void_id -> EMPTY','neural_proc_void_id',1,'p_neural_proc_void_id','new.py',253),
  ('PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL','PROC_DECL_RETURN',13,'p_proc_decl_return','new.py',263),
  ('neural_proc_return_id -> EMPTY','neural_proc_return_id',1,'p_neural_proc_return_id','new.py',267),
  ('neural_param_decl -> EMPTY','neural_param_decl',1,'p_neural_param_decl','new.py',274),
  ('PARAM_DECL -> TYPE ID neuro PARAM_DECL_R','PARAM_DECL',4,'p_param_decl','new.py',277),
  ('PARAM_DECL -> EMPTY','PARAM_DECL',1,'p_param_decl','new.py',278),
  ('neuro -> EMPTY','neuro',1,'p_neuro','new.py',281),
  ('PARAM_DECL_R -> COMMA PARAM_DECL','PARAM_DECL_R',2,'p_param_decl_r','new.py',292),
  ('PARAM_DECL_R -> EMPTY','PARAM_DECL_R',1,'p_param_decl_r','new.py',293),
  ('PROC_BODY -> STATEMENT PROC_BODY_R','PROC_BODY',2,'p_proc_body','new.py',296),
  ('PROC_BODY_R -> PROC_BODY','PROC_BODY_R',1,'p_proc_body_r','new.py',299),
  ('PROC_BODY_R -> EMPTY','PROC_BODY_R',1,'p_proc_body_r','new.py',300),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','new.py',303),
  ('STATEMENT -> FUNC_CALL SEMICOLON','STATEMENT',2,'p_statement','new.py',304),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','new.py',305),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','new.py',306),
  ('STATEMENT -> FLOW','STATEMENT',1,'p_statement','new.py',307),
  ('FLOW -> DECISION','FLOW',1,'p_flow','new.py',311),
  ('FLOW -> LOOP','FLOW',1,'p_flow','new.py',312),
  ('LOOP -> WHILE_LOOP','LOOP',1,'p_loop','new.py',315),
  ('LOOP -> FOR_LOOP','LOOP',1,'p_loop','new.py',316),
  ('WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND','WHILE_LOOP',7,'p_while_loop','new.py',319),
  ('FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND','FOR_LOOP',10,'p_for_loop','new.py',322),
  ('DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT','DECISION',8,'p_decision','new.py',325),
  ('DECISION_ALT -> ELSE_K DECISION','DECISION_ALT',2,'p_decision_alt','new.py',328),
  ('DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND','DECISION_ALT',3,'p_decision_alt','new.py',329),
  ('DECISION_ALT -> EMPTY','DECISION_ALT',1,'p_decision_alt','new.py',330),
  ('STATEMENT_R -> STATEMENT STATEMENT_R','STATEMENT_R',2,'p_statement_r','new.py',333),
  ('STATEMENT_R -> EMPTY','STATEMENT_R',1,'p_statement_r','new.py',334),
  ('ASSIGN -> VAR EQUALS H_EXPRESSION','ASSIGN',3,'p_assign','new.py',337),
  ('VAR -> ID','VAR',1,'p_var','new.py',340),
  ('VAR -> ARRAY','VAR',1,'p_var','new.py',341),
  ('ARRAY -> ID LBRACE INT RBRACE','ARRAY',4,'p_array','new.py',344),
  ('FUNC_CALL -> ID LPAREN ARG_LIST RPAREN','FUNC_CALL',4,'p_func_call','new.py',347),
  ('ARG_LIST -> VAR ARG_LIST_R','ARG_LIST',2,'p_arg_list','new.py',350),
  ('ARG_LIST -> CONSTANT ARG_LIST_R','ARG_LIST',2,'p_arg_list','new.py',351),
  ('ARG_LIST -> ARG_LIST_R','ARG_LIST',1,'p_arg_list','new.py',352),
  ('ARG_LIST_R -> COMMA ARG_LIST','ARG_LIST_R',2,'p_arglist_r','new.py',355),
  ('ARG_LIST_R -> EMPTY','ARG_LIST_R',1,'p_arglist_r','new.py',356),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','new.py',359),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','new.py',360),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','new.py',361),
  ('READ -> READ_K ID_LIST','READ',2,'p_read','new.py',364),
  ('ID_LIST -> ID ID_LIST_R','ID_LIST',2,'p_id_list','new.py',367),
  ('ID_LIST_R -> COMMA ID_LIST','ID_LIST_R',2,'p_id_list_r','new.py',370),
  ('ID_LIST_R -> EMPTY','ID_LIST_R',1,'p_id_list_r','new.py',371),
  ('WRITE -> WRITE_K WRITE_LIST','WRITE',2,'p_write','new.py',374),
  ('WRITE_LIST -> H_EXPRESSION WRITE_LIST_R','WRITE_LIST',2,'p_write_list','new.py',377),
  ('WRITE_LIST_R -> COMMA H_EXPRESSION','WRITE_LIST_R',2,'p_write_list_r','new.py',380),
  ('WRITE_LIST_R -> EMPTY','WRITE_LIST_R',1,'p_write_list_r','new.py',381),
  ('RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','new.py',384),
  ('EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R','EXPRESSION',3,'p_expression','new.py',388),
  ('NEURAL_EXPRESSION -> EMPTY','NEURAL_EXPRESSION',1,'p_neural_expression','new.py',392),
  ('EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',397),
  ('EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',398),
  ('EXPRESSION_R -> EMPTY','EXPRESSION_R',1,'p_expression_r','new.py',399),
  ('NEURAL_PLUS -> EMPTY','NEURAL_PLUS',1,'p_neural_plus','new.py',403),
  ('NEURAL_MINUS -> EMPTY','NEURAL_MINUS',1,'p_neural_minus','new.py',407),
  ('TERM -> FACTOR NEURAL_TERM TERM_R','TERM',3,'p_term','new.py',412),
  ('NEURAL_TERM -> EMPTY','NEURAL_TERM',1,'p_neural_term','new.py',416),
  ('TERM_R -> TIMES NEURAL_TIMES TERM','TERM_R',3,'p_term_r','new.py',421),
  ('TERM_R -> DIVIDE NEURAL_DIVIDE TERM','TERM_R',3,'p_term_r','new.py',422),
  ('TERM_R -> EMPTY','TERM_R',1,'p_term_r','new.py',423),
  ('NEURAL_TIMES -> EMPTY','NEURAL_TIMES',1,'p_neural_times','new.py',427),
  ('NEURAL_DIVIDE -> EMPTY','NEURAL_DIVIDE',1,'p_neural_divide','new.py',432),
  ('FACTOR -> ID NEURAL_ID_FAC','FACTOR',2,'p_factor_','new.py',437),
  ('FACTOR -> CONSTANT NEURAL_CNT_FACT','FACTOR',2,'p_factor_','new.py',438),
  ('FACTOR -> LPAREN H_EXPRESSION RPAREN','FACTOR',3,'p_factor_','new.py',439),
  ('NEURAL_ID_FAC -> EMPTY','NEURAL_ID_FAC',1,'p_neural_id_fac','new.py',443),
  ('NEURAL_CNT_FACT -> EMPTY','NEURAL_CNT_FACT',1,'p_neural_id_cnt_fact','new.py',451),
  ('S_EXPRESSION -> EXPRESSION','S_EXPRESSION',1,'p_s_expression','new.py',457),
  ('S_EXPRESSION -> EXPRESSION GT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',458),
  ('S_EXPRESSION -> EXPRESSION LT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',459),
  ('H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R','H_EXPRESSION',2,'p_h_expression','new.py',463),
  ('H_EXPRESSION_R -> OR H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',467),
  ('H_EXPRESSION_R -> AND H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',468),
  ('H_EXPRESSION_R -> EMPTY','H_EXPRESSION_R',1,'p_h_expression_r','new.py',469),
  ('PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND','PRINCIPAL_BLOCK',6,'p_principal_block','new.py',473),
  ('PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R','PRINCIPAL_BODY',2,'p_principal_body','new.py',477),
  ('PRINCIPAL_BODY_R -> PRINCIPAL_BODY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',481),
  ('PRINCIPAL_BODY_R -> EMPTY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',482),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','new.py',486),
]
