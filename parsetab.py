
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENAND BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MINUS OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON BLOCKneural_program_id : EMPTYBLOCK : VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCKVAR_BLOCK : VARS_K BLOCKSTART VAR_DECL BLOCKENDVAR_DECL : TYPE COLON VAR_LIST SEMICOLON VAR_DECL_RVAR_DECL_R : VAR_DECL\n                  | EMPTYVAR_LIST : ID VAR_LIST2VAR_LIST2 : COMMA ID VAR_LIST2\n                 | EMPTYTYPE : INT_K NEURAL_TYPE\n            | FLOAT_K NEURAL_TYPE\n            | STRING_K NEURAL_TYPENEURAL_TYPE : EMPTYPROC_BLOCK : PROC_DECLPROC_DECL : PROC_DECL_RETURN\n                 | PROC_DECL_VOID\n                 | EMPTYPROC_DECL_VOID : FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECLneural_proc_void_id : EMPTYPROC_DECL_RETURN : FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECLPOST_FUNC : EMPTYneural_proc_return_id : EMPTYneural_param_decl : EMPTYPARAM_DECL : TYPE ID neuro PARAM_DECL_R\n                  | EMPTYneuro : EMPTYPARAM_DECL_R : COMMA PARAM_DECL\n                    | EMPTYPROC_BODY : STATEMENT PROC_BODY_RFN_VARBLOCK : VARS_K BLOCKSTART LS_VARDECL BLOCKENDLS_VARDECL : TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_RLS_VARDECL_R : LS_VARDECL\n                    | EMPTYFNVAR_LS : ID FNVAR_LS2FNVAR_LS2 : COMMA ID FNVAR_LS2\n                 | EMPTYPROC_BODY_R : PROC_BODY\n                   | EMPTYSTATEMENT : ASSIGN SEMICOLON\n                 | FUNC_CALL SEMICOLON\n                 | READ SEMICOLON\n                 | WRITE SEMICOLON\n                 | FLOW\n                STATEMENT_R : STATEMENT STATEMENT_R\n                   | EMPTYFLOW : DECISION\n            | LOOPLOOP : WHILE_LOOP\n            | DO_WHILE_LOOP SEMICOLON\n            | FOR_LOOPDO_WHILE_LOOP : DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURALDW_PREV_NEURAL : EMPTYDW_END_NEURAL : EMPTYWHILE_LOOP : WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURALWHILE_PREV_NEURAL : EMPTYWHILE_POST_NEURAL : EMPTYWHILE_END_NEURAL : EMPTYFOR_LOOP : FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKENDDECISION : IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURALEXP_RESULT_NEURAL : EMPTYDECISION_END_NEURAL : EMPTYDECISION_ALT : ELSE\n                    | EMPTYELSE : ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKENDELSE_NEURAL : EMPTYASSIGN : VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURALASSI_H_EXP_NEURAL : EMPTYEQUALS_NEURAL : EMPTYASSIGN_VAR_N : EMPTYVAR : ID\n           | ARRAYARRAY : ID LBRACE INT RBRACEFUNC_CALL : ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPARENPOST_VERIFY : EMPTYPRE_VERIFY : EMPTYEXP_LIST : H_EXPRESSION EXP_NEURAL EXP_LIST_2EXP_NEURAL : EMPTYEXP_LIST_2 : COMMA EXP_LIST\n                  | EMPTYCONSTANT : INT\n                | FLOAT\n                | STRINGREAD : READ_K LPAREN ID_LIST RPARENID_LIST : ID READ_NEURAL ID_LIST_RREAD_NEURAL : EMPTYID_LIST_R : COMMA ID_LIST\n                 | EMPTYWRITE : WRITE_K LPAREN WRITE_LIST RPARENWRITE_LIST : H_EXPRESSION WRITE_LIST_R\n                  | CONSTANT CONSTANT_WRITE_N WRITE_LIST_RCONSTANT_WRITE_N : EMPTYWRITE_LIST_R : WRITE_NEURAL COMMA WRITE_LIST\n                    | WRITE_NEURAL EMPTYWRITE_NEURAL : EMPTYRETURN : RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLONEXPRESSION : TERM NEURAL_EXPRESSION EXPRESSION_RNEURAL_EXPRESSION : EMPTYEXPRESSION_R : PLUS NEURAL_PLUS EXPRESSION\n                    | MINUS NEURAL_MINUS EXPRESSION\n                    | EMPTYNEURAL_PLUS : EMPTYNEURAL_MINUS : EMPTYTERM : FACTOR NEURAL_TERM TERM_RNEURAL_TERM : EMPTYTERM_R : TIMES NEURAL_TIMES TERM\n              | DIVIDE NEURAL_DIVIDE TERM\n              | EMPTYNEURAL_TIMES : EMPTYNEURAL_DIVIDE : EMPTYFACTOR : ID NEURAL_ID_FAC\n              | CONSTANT NEURAL_CNT_FACT\n              | LPAREN H_EXPRESSION RPARENNEURAL_ID_FAC : EMPTYNEURAL_CNT_FACT : EMPTYS_EXPRESSION : EXPRESSION\n                    | EXPRESSION GT EXPRESSION\n                    | EXPRESSION LT EXPRESSION\n                    | EXPRESSION GTE EXPRESSION\n                    | EXPRESSION LTE EXPRESSION\n                    | EXPRESSION DOUBLEEQUAL EXPRESSIONH_EXPRESSION : S_EXPRESSION H_EXPRESSION_RH_EXPRESSION_R : OR H_EXPRESSION\n                      | AND H_EXPRESSION\n                      | EMPTYPRINCIPAL_BLOCK : MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKENDPRINCIPAL_BODY : STATEMENT PRINCIPAL_BODY_R\n                      | EMPTYPRINCIPAL_BODY_R : PRINCIPAL_BODYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,7,17,79,],[0,-1,-3,-126,]),'ID':([2,19,20,21,22,23,29,30,31,32,34,42,47,50,56,61,62,65,67,70,71,82,83,84,85,91,92,93,94,104,105,109,123,124,131,132,148,149,151,152,153,154,155,166,180,183,194,195,198,199,208,210,215,219,220,221,222,223,224,225,226,227,233,242,243,253,256,258,259,260,263,264,265,267,275,276,278,279,282,287,289,297,],[3,27,28,-130,-130,-130,-11,-14,-12,-13,41,58,78,58,-44,-47,-48,-49,-51,99,100,-40,-41,-42,-43,108,120,120,-50,-130,120,120,120,58,120,-69,120,120,120,120,120,120,120,58,108,120,-130,-130,-130,-130,58,58,120,120,-102,120,-103,120,-109,120,-110,58,58,58,120,-130,58,120,-31,273,-130,-63,-64,-130,-60,-62,-55,-58,-59,294,58,-65,]),'SEMICOLON':([3,4,5,40,41,46,48,52,53,54,55,66,78,103,113,114,115,116,117,118,119,120,122,136,140,145,147,150,156,157,158,159,160,161,163,174,182,186,187,188,189,190,191,192,193,196,197,200,211,212,213,237,238,239,240,268,272,273,280,281,284,286,288,294,296,],[-130,6,-2,45,-130,-8,-10,82,83,84,85,94,-130,-9,-130,-81,-82,-83,-116,-130,-130,-130,-130,-84,-89,-112,-122,-125,-130,-98,-130,-105,-111,-114,-115,-130,-113,-123,-124,-117,-118,-119,-120,-121,-97,-101,-104,-108,-67,-68,-74,-99,-100,-106,-107,-130,285,-130,-52,-54,290,-35,-37,-130,-36,]),'VARS_K':([6,172,173,],[9,209,209,]),'FUNCTION_K':([8,33,252,257,261,262,270,],[15,-4,-130,-130,15,-22,15,]),'MAIN_K':([8,10,11,12,13,14,33,252,257,261,262,270,274,283,],[-130,18,-15,-16,-17,-18,-4,-130,-130,-130,-22,-130,-19,-21,]),'BLOCKSTART':([9,35,69,97,98,101,102,128,129,130,162,201,202,203,209,228,229,244,277,],[16,42,-130,124,-53,-130,-130,172,-24,173,-130,227,-61,-130,234,242,-57,256,289,]),'VOID_K':([15,],[20,]),'INT_K':([15,16,43,44,45,170,234,285,],[21,21,21,21,21,21,21,21,]),'FLOAT_K':([15,16,43,44,45,170,234,285,],[22,22,22,22,22,22,22,22,]),'STRING_K':([15,16,43,44,45,170,234,285,],[23,23,23,23,23,23,23,23,]),'LPAREN':([18,27,28,36,37,38,39,58,59,60,64,68,88,90,92,93,95,96,104,105,109,123,131,132,148,149,151,152,153,154,155,183,194,195,198,199,215,219,220,221,222,223,224,225,226,230,243,246,258,],[26,-130,-130,43,-23,44,-20,-130,91,92,93,-130,105,-76,109,109,123,-56,-130,109,109,109,109,-69,109,109,109,109,109,109,109,109,-130,-130,-130,-130,109,109,-102,109,-103,109,-109,109,-110,243,109,258,109,]),'COLON':([21,22,23,25,29,30,31,32,251,],[-130,-130,-130,34,-11,-14,-12,-13,260,]),'BLOCKEND':([24,42,45,49,50,51,56,61,62,65,67,75,76,77,80,81,82,83,84,85,94,124,165,166,167,205,227,233,235,241,242,245,247,248,249,250,253,254,256,263,264,265,267,269,275,276,278,279,282,285,289,290,291,292,293,295,297,],[33,-130,-130,79,-130,-128,-44,-47,-48,-49,-51,-5,-6,-7,-127,-129,-40,-41,-42,-43,-50,-130,204,-130,-46,-45,-130,-130,252,253,-130,257,-30,-38,-39,259,-130,267,-130,-130,-63,-64,-130,282,-60,-62,-55,-58,-59,-130,-130,-96,-32,-33,-34,297,-65,]),'RPAREN':([26,43,44,72,73,74,100,107,108,110,111,112,113,114,115,116,117,118,119,120,121,122,126,127,133,134,137,138,139,141,142,143,144,145,146,147,150,156,157,158,159,160,161,163,164,169,170,171,175,176,177,178,179,181,182,184,185,186,187,188,189,190,191,192,193,196,197,200,207,214,216,217,218,236,237,238,239,240,255,271,],[35,-130,-130,101,-26,102,-130,136,-130,140,-130,-130,-130,-81,-82,-83,-116,-130,-130,-130,162,-130,-130,-27,-130,-130,-130,-86,182,-90,-130,-95,-130,-112,-92,-122,-125,-130,-98,-130,-105,-111,-114,-115,203,-25,-130,-29,213,-75,-130,-78,-85,-88,-113,-94,-91,-123,-124,-117,-118,-119,-120,-121,-97,-101,-104,-108,-28,-77,-80,-87,-93,-79,-99,-100,-106,-107,268,284,]),'COMMA':([41,78,100,108,111,112,113,114,115,116,117,118,119,120,122,126,127,134,137,138,142,143,144,145,146,147,150,156,157,158,159,160,161,163,177,178,182,186,187,188,189,190,191,192,193,196,197,200,237,238,239,240,273,294,],[47,47,-130,-130,-130,-130,-130,-81,-82,-83,-116,-130,-130,-130,-130,170,-27,-130,180,-86,183,-95,-130,-112,-92,-122,-125,-130,-98,-130,-105,-111,-114,-115,215,-78,-113,-123,-124,-117,-118,-119,-120,-121,-97,-101,-104,-108,-99,-100,-106,-107,287,287,]),'READ_K':([42,50,56,61,62,65,67,82,83,84,85,94,124,166,208,210,227,233,242,253,256,259,263,264,265,267,275,276,278,279,282,289,297,],[59,59,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,59,59,59,59,59,59,59,-130,59,-31,-130,-63,-64,-130,-60,-62,-55,-58,-59,59,-65,]),'WRITE_K':([42,50,56,61,62,65,67,82,83,84,85,94,124,166,208,210,227,233,242,253,256,259,263,264,265,267,275,276,278,279,282,289,297,],[60,60,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,60,60,60,60,60,60,60,-130,60,-31,-130,-63,-64,-130,-60,-62,-55,-58,-59,60,-65,]),'IF_K':([42,50,56,61,62,65,67,82,83,84,85,94,124,166,208,210,227,233,242,253,256,259,263,264,265,267,275,276,278,279,282,289,297,],[64,64,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,64,64,64,64,64,64,64,-130,64,-31,-130,-63,-64,-130,-60,-62,-55,-58,-59,64,-65,]),'WHILE_K':([42,50,56,61,62,65,67,82,83,84,85,94,124,166,204,208,210,227,233,242,253,256,259,263,264,265,267,275,276,278,279,282,289,297,],[68,68,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,68,68,230,68,68,68,68,68,-130,68,-31,-130,-63,-64,-130,-60,-62,-55,-58,-59,68,-65,]),'DO_K':([42,50,56,61,62,65,67,82,83,84,85,94,124,166,208,210,227,231,233,242,253,256,259,263,264,265,267,275,276,278,279,282,289,297,],[69,69,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,69,69,69,69,69,244,69,69,-130,69,-31,-130,-63,-64,-130,-60,-62,-55,-58,-59,69,-65,]),'FOR_K':([42,50,56,61,62,65,67,82,83,84,85,94,124,166,208,210,227,233,242,253,256,259,263,264,265,267,275,276,278,279,282,289,297,],[70,70,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,70,70,70,70,70,70,70,-130,70,-31,-130,-63,-64,-130,-60,-62,-55,-58,-59,70,-65,]),'RETURN_K':([56,61,62,65,67,82,83,84,85,94,232,233,247,248,249,253,263,264,265,267,275,276,278,279,282,297,],[-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,246,-130,-30,-38,-39,-130,-130,-63,-64,-130,-60,-62,-55,-58,-59,-65,]),'EQUALS':([57,58,63,86,87,99,135,],[-130,-71,-72,104,-70,125,-73,]),'LBRACE':([58,],[89,]),'INT':([89,92,93,104,105,109,123,125,131,132,148,149,151,152,153,154,155,183,194,195,198,199,206,215,219,220,221,222,223,224,225,226,243,258,],[106,114,114,-130,114,114,114,168,114,-69,114,114,114,114,114,114,114,114,-130,-130,-130,-130,231,114,114,-102,114,-103,114,-109,114,-110,114,114,]),'FLOAT':([92,93,104,105,109,123,131,132,148,149,151,152,153,154,155,183,194,195,198,199,215,219,220,221,222,223,224,225,226,243,258,],[115,115,-130,115,115,115,115,-69,115,115,115,115,115,115,115,115,-130,-130,-130,-130,115,115,-102,115,-103,115,-109,115,-110,115,115,]),'STRING':([92,93,104,105,109,123,131,132,148,149,151,152,153,154,155,183,194,195,198,199,215,219,220,221,222,223,224,225,226,243,258,],[116,116,-130,116,116,116,116,-69,116,116,116,116,116,116,116,116,-130,-130,-130,-130,116,116,-102,116,-103,116,-109,116,-110,116,116,]),'RBRACE':([106,],[135,]),'TIMES':([112,114,115,116,119,120,122,145,146,158,159,160,161,163,182,],[-130,-81,-82,-83,-130,-130,-130,-112,-115,198,-105,-111,-114,-115,-113,]),'DIVIDE':([112,114,115,116,119,120,122,145,146,158,159,160,161,163,182,],[-130,-81,-82,-83,-130,-130,-130,-112,-115,199,-105,-111,-114,-115,-113,]),'PLUS':([112,114,115,116,118,119,120,122,145,146,156,157,158,159,160,161,163,182,197,200,239,240,],[-130,-81,-82,-83,-130,-130,-130,-130,-112,-115,194,-98,-130,-105,-111,-114,-115,-113,-104,-108,-106,-107,]),'MINUS':([112,114,115,116,118,119,120,122,145,146,156,157,158,159,160,161,163,182,197,200,239,240,],[-130,-81,-82,-83,-130,-130,-130,-130,-112,-115,195,-98,-130,-105,-111,-114,-115,-113,-104,-108,-106,-107,]),'GT':([112,114,115,116,117,118,119,120,122,145,146,156,157,158,159,160,161,163,182,193,196,197,200,237,238,239,240,],[-130,-81,-82,-83,151,-130,-130,-130,-130,-112,-115,-130,-98,-130,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'LT':([112,114,115,116,117,118,119,120,122,145,146,156,157,158,159,160,161,163,182,193,196,197,200,237,238,239,240,],[-130,-81,-82,-83,152,-130,-130,-130,-130,-112,-115,-130,-98,-130,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'GTE':([112,114,115,116,117,118,119,120,122,145,146,156,157,158,159,160,161,163,182,193,196,197,200,237,238,239,240,],[-130,-81,-82,-83,153,-130,-130,-130,-130,-112,-115,-130,-98,-130,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'LTE':([112,114,115,116,117,118,119,120,122,145,146,156,157,158,159,160,161,163,182,193,196,197,200,237,238,239,240,],[-130,-81,-82,-83,154,-130,-130,-130,-130,-112,-115,-130,-98,-130,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'DOUBLEEQUAL':([112,114,115,116,117,118,119,120,122,145,146,156,157,158,159,160,161,163,182,193,196,197,200,237,238,239,240,],[-130,-81,-82,-83,155,-130,-130,-130,-130,-112,-115,-130,-98,-130,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'OR':([112,113,114,115,116,117,118,119,120,122,145,146,156,157,158,159,160,161,163,182,188,189,190,191,192,193,196,197,200,237,238,239,240,],[-130,148,-81,-82,-83,-116,-130,-130,-130,-130,-112,-115,-130,-98,-130,-105,-111,-114,-115,-113,-117,-118,-119,-120,-121,-97,-101,-104,-108,-99,-100,-106,-107,]),'AND':([112,113,114,115,116,117,118,119,120,122,145,146,156,157,158,159,160,161,163,182,188,189,190,191,192,193,196,197,200,237,238,239,240,],[-130,149,-81,-82,-83,-116,-130,-130,-130,-130,-112,-115,-130,-98,-130,-105,-111,-114,-115,-113,-117,-118,-119,-120,-121,-97,-101,-104,-108,-99,-100,-106,-107,]),'TO_K':([168,],[206,]),'ELSE_K':([253,265,266,],[-130,-66,277,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,8,21,22,23,27,28,41,42,43,44,45,50,57,58,68,69,78,100,101,102,104,108,111,112,113,118,119,120,122,124,126,133,134,137,142,144,156,158,162,166,170,174,177,194,195,198,199,203,227,233,242,252,253,256,257,261,263,267,268,270,273,285,289,294,],[5,14,30,30,30,37,39,48,51,73,73,77,51,87,90,96,98,48,127,129,129,132,138,143,146,150,157,159,161,163,167,171,176,178,181,184,143,196,200,202,167,73,212,216,220,222,224,226,229,167,249,167,262,265,167,262,14,276,279,281,14,288,293,167,288,]),'BLOCK':([6,],[7,]),'VAR_BLOCK':([6,],[8,]),'PROC_BLOCK':([8,],[10,]),'PROC_DECL':([8,261,270,],[11,274,283,]),'PROC_DECL_RETURN':([8,261,270,],[12,12,12,]),'PROC_DECL_VOID':([8,261,270,],[13,13,13,]),'PRINCIPAL_BLOCK':([10,],[17,]),'TYPE':([15,16,43,44,45,170,234,285,],[19,25,71,71,25,71,251,251,]),'VAR_DECL':([16,45,],[24,76,]),'NEURAL_TYPE':([21,22,23,],[29,31,32,]),'neural_proc_return_id':([27,],[36,]),'neural_proc_void_id':([28,],[38,]),'VAR_LIST':([34,],[40,]),'VAR_LIST2':([41,78,],[46,103,]),'PRINCIPAL_BODY':([42,50,],[49,81,]),'STATEMENT':([42,50,124,166,208,210,227,233,242,256,289,],[50,50,166,166,233,233,166,233,166,166,166,]),'ASSIGN':([42,50,124,166,208,210,227,233,242,256,289,],[52,52,52,52,52,52,52,52,52,52,52,]),'FUNC_CALL':([42,50,124,166,208,210,227,233,242,256,289,],[53,53,53,53,53,53,53,53,53,53,53,]),'READ':([42,50,124,166,208,210,227,233,242,256,289,],[54,54,54,54,54,54,54,54,54,54,54,]),'WRITE':([42,50,124,166,208,210,227,233,242,256,289,],[55,55,55,55,55,55,55,55,55,55,55,]),'FLOW':([42,50,124,166,208,210,227,233,242,256,289,],[56,56,56,56,56,56,56,56,56,56,56,]),'VAR':([42,50,124,166,208,210,227,233,242,256,289,],[57,57,57,57,57,57,57,57,57,57,57,]),'DECISION':([42,50,124,166,208,210,227,233,242,256,289,],[61,61,61,61,61,61,61,61,61,61,61,]),'LOOP':([42,50,124,166,208,210,227,233,242,256,289,],[62,62,62,62,62,62,62,62,62,62,62,]),'ARRAY':([42,50,124,166,208,210,227,233,242,256,289,],[63,63,63,63,63,63,63,63,63,63,63,]),'WHILE_LOOP':([42,50,124,166,208,210,227,233,242,256,289,],[65,65,65,65,65,65,65,65,65,65,65,]),'DO_WHILE_LOOP':([42,50,124,166,208,210,227,233,242,256,289,],[66,66,66,66,66,66,66,66,66,66,66,]),'FOR_LOOP':([42,50,124,166,208,210,227,233,242,256,289,],[67,67,67,67,67,67,67,67,67,67,67,]),'PARAM_DECL':([43,44,170,],[72,74,207,]),'VAR_DECL_R':([45,],[75,]),'PRINCIPAL_BODY_R':([50,],[80,]),'ASSIGN_VAR_N':([57,],[86,]),'PRE_VERIFY':([58,],[88,]),'WHILE_PREV_NEURAL':([68,],[95,]),'DW_PREV_NEURAL':([69,],[97,]),'ID_LIST':([91,180,],[107,217,]),'WRITE_LIST':([92,183,],[110,218,]),'H_EXPRESSION':([92,93,105,109,123,131,148,149,183,215,243,258,],[111,121,134,139,164,174,186,187,111,134,255,271,]),'CONSTANT':([92,93,105,109,123,131,148,149,151,152,153,154,155,183,215,219,221,223,225,243,258,],[112,122,122,122,122,122,122,122,122,122,122,122,122,112,122,122,122,122,122,122,122,]),'S_EXPRESSION':([92,93,105,109,123,131,148,149,183,215,243,258,],[113,113,113,113,113,113,113,113,113,113,113,113,]),'EXPRESSION':([92,93,105,109,123,131,148,149,151,152,153,154,155,183,215,219,221,243,258,],[117,117,117,117,117,117,117,117,188,189,190,191,192,117,117,237,238,117,117,]),'TERM':([92,93,105,109,123,131,148,149,151,152,153,154,155,183,215,219,221,223,225,243,258,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,239,240,118,118,]),'FACTOR':([92,93,105,109,123,131,148,149,151,152,153,154,155,183,215,219,221,223,225,243,258,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'neuro':([100,],[126,]),'neural_param_decl':([101,102,],[128,130,]),'EQUALS_NEURAL':([104,],[131,]),'EXP_LIST':([105,215,],[133,236,]),'READ_NEURAL':([108,],[137,]),'WRITE_LIST_R':([111,144,],[141,185,]),'WRITE_NEURAL':([111,144,],[142,142,]),'CONSTANT_WRITE_N':([112,],[144,]),'NEURAL_CNT_FACT':([112,122,],[145,145,]),'H_EXPRESSION_R':([113,],[147,]),'NEURAL_EXPRESSION':([118,],[156,]),'NEURAL_TERM':([119,],[158,]),'NEURAL_ID_FAC':([120,],[160,]),'STATEMENT_R':([124,166,227,242,256,289,],[165,205,241,254,269,295,]),'PARAM_DECL_R':([126,],[169,]),'POST_VERIFY':([133,],[175,]),'EXP_NEURAL':([134,],[177,]),'ID_LIST_R':([137,],[179,]),'EXPRESSION_R':([156,],[193,]),'TERM_R':([158,],[197,]),'EXP_RESULT_NEURAL':([162,],[201,]),'FN_VARBLOCK':([172,173,],[208,210,]),'ASSI_H_EXP_NEURAL':([174,],[211,]),'EXP_LIST_2':([177,],[214,]),'NEURAL_PLUS':([194,],[219,]),'NEURAL_MINUS':([195,],[221,]),'NEURAL_TIMES':([198,],[223,]),'NEURAL_DIVIDE':([199,],[225,]),'WHILE_POST_NEURAL':([203,],[228,]),'PROC_BODY':([208,210,233,],[232,235,248,]),'RETURN':([232,],[245,]),'PROC_BODY_R':([233,],[247,]),'LS_VARDECL':([234,285,],[250,292,]),'POST_FUNC':([252,257,],[261,270,]),'DECISION_ALT':([253,],[263,]),'ELSE':([253,],[264,]),'ELSE_NEURAL':([253,],[266,]),'FNVAR_LS':([260,],[272,]),'DECISION_END_NEURAL':([263,],[275,]),'WHILE_END_NEURAL':([267,],[278,]),'DW_END_NEURAL':([268,],[280,]),'FNVAR_LS2':([273,294,],[286,296,]),'LS_VARDECL_R':([285,],[291,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK','PROGRAM',5,'p_program','new.py',181),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','new.py',186),
  ('BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK','BLOCK',3,'p_block','new.py',195),
  ('VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND','VAR_BLOCK',4,'p_var_block','new.py',198),
  ('VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R','VAR_DECL',5,'p_var_decl','new.py',201),
  ('VAR_DECL_R -> VAR_DECL','VAR_DECL_R',1,'p_var_decl_r','new.py',204),
  ('VAR_DECL_R -> EMPTY','VAR_DECL_R',1,'p_var_decl_r','new.py',205),
  ('VAR_LIST -> ID VAR_LIST2','VAR_LIST',2,'p_var_list','new.py',208),
  ('VAR_LIST2 -> COMMA ID VAR_LIST2','VAR_LIST2',3,'p_var_list2','new.py',212),
  ('VAR_LIST2 -> EMPTY','VAR_LIST2',1,'p_var_list2','new.py',213),
  ('TYPE -> INT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',239),
  ('TYPE -> FLOAT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',240),
  ('TYPE -> STRING_K NEURAL_TYPE','TYPE',2,'p_type','new.py',241),
  ('NEURAL_TYPE -> EMPTY','NEURAL_TYPE',1,'p_neural_type','new.py',248),
  ('PROC_BLOCK -> PROC_DECL','PROC_BLOCK',1,'p_proc_block','new.py',251),
  ('PROC_DECL -> PROC_DECL_RETURN','PROC_DECL',1,'p_proc_decl','new.py',254),
  ('PROC_DECL -> PROC_DECL_VOID','PROC_DECL',1,'p_proc_decl','new.py',255),
  ('PROC_DECL -> EMPTY','PROC_DECL',1,'p_proc_decl','new.py',256),
  ('PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_VOID',14,'p_proc_decl_void','new.py',260),
  ('neural_proc_void_id -> EMPTY','neural_proc_void_id',1,'p_neural_proc_void_id','new.py',264),
  ('PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_RETURN',15,'p_proc_decl_return','new.py',274),
  ('POST_FUNC -> EMPTY','POST_FUNC',1,'p_post_func','new.py',279),
  ('neural_proc_return_id -> EMPTY','neural_proc_return_id',1,'p_neural_proc_return_id','new.py',284),
  ('neural_param_decl -> EMPTY','neural_param_decl',1,'p_neural_param_decl','new.py',293),
  ('PARAM_DECL -> TYPE ID neuro PARAM_DECL_R','PARAM_DECL',4,'p_param_decl','new.py',296),
  ('PARAM_DECL -> EMPTY','PARAM_DECL',1,'p_param_decl','new.py',297),
  ('neuro -> EMPTY','neuro',1,'p_neuro','new.py',302),
  ('PARAM_DECL_R -> COMMA PARAM_DECL','PARAM_DECL_R',2,'p_param_decl_r','new.py',320),
  ('PARAM_DECL_R -> EMPTY','PARAM_DECL_R',1,'p_param_decl_r','new.py',321),
  ('PROC_BODY -> STATEMENT PROC_BODY_R','PROC_BODY',2,'p_proc_body','new.py',324),
  ('FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND','FN_VARBLOCK',4,'p_fn_varblock','new.py',328),
  ('LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R','LS_VARDECL',5,'p_ls_vardecl','new.py',339),
  ('LS_VARDECL_R -> LS_VARDECL','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',343),
  ('LS_VARDECL_R -> EMPTY','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',344),
  ('FNVAR_LS -> ID FNVAR_LS2','FNVAR_LS',2,'p_fnvar_ls','new.py',348),
  ('FNVAR_LS2 -> COMMA ID FNVAR_LS2','FNVAR_LS2',3,'p_fnvar_ls2','new.py',352),
  ('FNVAR_LS2 -> EMPTY','FNVAR_LS2',1,'p_fnvar_ls2','new.py',353),
  ('PROC_BODY_R -> PROC_BODY','PROC_BODY_R',1,'p_proc_body_r','new.py',373),
  ('PROC_BODY_R -> EMPTY','PROC_BODY_R',1,'p_proc_body_r','new.py',374),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','new.py',377),
  ('STATEMENT -> FUNC_CALL SEMICOLON','STATEMENT',2,'p_statement','new.py',378),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','new.py',379),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','new.py',380),
  ('STATEMENT -> FLOW','STATEMENT',1,'p_statement','new.py',381),
  ('STATEMENT_R -> STATEMENT STATEMENT_R','STATEMENT_R',2,'p_statement_r','new.py',386),
  ('STATEMENT_R -> EMPTY','STATEMENT_R',1,'p_statement_r','new.py',387),
  ('FLOW -> DECISION','FLOW',1,'p_flow','new.py',390),
  ('FLOW -> LOOP','FLOW',1,'p_flow','new.py',391),
  ('LOOP -> WHILE_LOOP','LOOP',1,'p_loop','new.py',394),
  ('LOOP -> DO_WHILE_LOOP SEMICOLON','LOOP',2,'p_loop','new.py',395),
  ('LOOP -> FOR_LOOP','LOOP',1,'p_loop','new.py',396),
  ('DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL','DO_WHILE_LOOP',10,'p_do_while_loop','new.py',399),
  ('DW_PREV_NEURAL -> EMPTY','DW_PREV_NEURAL',1,'p_dw_prev_neural','new.py',403),
  ('DW_END_NEURAL -> EMPTY','DW_END_NEURAL',1,'p_dw_end_neural','new.py',408),
  ('WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL','WHILE_LOOP',10,'p_while_loop','new.py',419),
  ('WHILE_PREV_NEURAL -> EMPTY','WHILE_PREV_NEURAL',1,'p_while_prev_neural','new.py',423),
  ('WHILE_POST_NEURAL -> EMPTY','WHILE_POST_NEURAL',1,'p_while_post_neural','new.py',428),
  ('WHILE_END_NEURAL -> EMPTY','WHILE_END_NEURAL',1,'p_while_end_neural','new.py',440),
  ('FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND','FOR_LOOP',10,'p_for_loop','new.py',450),
  ('DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL','DECISION',10,'p_decision','new.py',453),
  ('EXP_RESULT_NEURAL -> EMPTY','EXP_RESULT_NEURAL',1,'p_exp_result_neural','new.py',456),
  ('DECISION_END_NEURAL -> EMPTY','DECISION_END_NEURAL',1,'p_decision_end_neural','new.py',468),
  ('DECISION_ALT -> ELSE','DECISION_ALT',1,'p_decision_alt','new.py',473),
  ('DECISION_ALT -> EMPTY','DECISION_ALT',1,'p_decision_alt','new.py',474),
  ('ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND','ELSE',5,'p_else','new.py',477),
  ('ELSE_NEURAL -> EMPTY','ELSE_NEURAL',1,'p_else_neural','new.py',481),
  ('ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL','ASSIGN',6,'p_assign','new.py',489),
  ('ASSI_H_EXP_NEURAL -> EMPTY','ASSI_H_EXP_NEURAL',1,'p_assi_h_exp_neural','new.py',492),
  ('EQUALS_NEURAL -> EMPTY','EQUALS_NEURAL',1,'p_equals_neural','new.py',515),
  ('ASSIGN_VAR_N -> EMPTY','ASSIGN_VAR_N',1,'p_assing_var_n','new.py',519),
  ('VAR -> ID','VAR',1,'p_var','new.py',529),
  ('VAR -> ARRAY','VAR',1,'p_var','new.py',530),
  ('ARRAY -> ID LBRACE INT RBRACE','ARRAY',4,'p_array','new.py',534),
  ('FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN','FUNC_CALL',6,'p_func_call','new.py',537),
  ('POST_VERIFY -> EMPTY','POST_VERIFY',1,'p_post_verify','new.py',541),
  ('PRE_VERIFY -> EMPTY','PRE_VERIFY',1,'p_pre_verify','new.py',555),
  ('EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2','EXP_LIST',3,'p_exp_list','new.py',569),
  ('EXP_NEURAL -> EMPTY','EXP_NEURAL',1,'p_exp_neural','new.py',573),
  ('EXP_LIST_2 -> COMMA EXP_LIST','EXP_LIST_2',2,'p_exp_list_2','new.py',588),
  ('EXP_LIST_2 -> EMPTY','EXP_LIST_2',1,'p_exp_list_2','new.py',589),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','new.py',593),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','new.py',594),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','new.py',595),
  ('READ -> READ_K LPAREN ID_LIST RPAREN','READ',4,'p_read','new.py',599),
  ('ID_LIST -> ID READ_NEURAL ID_LIST_R','ID_LIST',3,'p_id_list','new.py',602),
  ('READ_NEURAL -> EMPTY','READ_NEURAL',1,'p_read_neural','new.py',605),
  ('ID_LIST_R -> COMMA ID_LIST','ID_LIST_R',2,'p_id_list_r','new.py',610),
  ('ID_LIST_R -> EMPTY','ID_LIST_R',1,'p_id_list_r','new.py',611),
  ('WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN','WRITE',4,'p_write','new.py',614),
  ('WRITE_LIST -> H_EXPRESSION WRITE_LIST_R','WRITE_LIST',2,'p_write_list','new.py',617),
  ('WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R','WRITE_LIST',3,'p_write_list','new.py',618),
  ('CONSTANT_WRITE_N -> EMPTY','CONSTANT_WRITE_N',1,'p_constant_write_n','new.py',621),
  ('WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST','WRITE_LIST_R',3,'p_write_list_r','new.py',625),
  ('WRITE_LIST_R -> WRITE_NEURAL EMPTY','WRITE_LIST_R',2,'p_write_list_r','new.py',626),
  ('WRITE_NEURAL -> EMPTY','WRITE_NEURAL',1,'p_write_neural','new.py',629),
  ('RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','new.py',636),
  ('EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R','EXPRESSION',3,'p_expression','new.py',640),
  ('NEURAL_EXPRESSION -> EMPTY','NEURAL_EXPRESSION',1,'p_neural_expression','new.py',645),
  ('EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',674),
  ('EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',675),
  ('EXPRESSION_R -> EMPTY','EXPRESSION_R',1,'p_expression_r','new.py',676),
  ('NEURAL_PLUS -> EMPTY','NEURAL_PLUS',1,'p_neural_plus','new.py',680),
  ('NEURAL_MINUS -> EMPTY','NEURAL_MINUS',1,'p_neural_minus','new.py',686),
  ('TERM -> FACTOR NEURAL_TERM TERM_R','TERM',3,'p_term','new.py',691),
  ('NEURAL_TERM -> EMPTY','NEURAL_TERM',1,'p_neural_term','new.py',695),
  ('TERM_R -> TIMES NEURAL_TIMES TERM','TERM_R',3,'p_term_r','new.py',722),
  ('TERM_R -> DIVIDE NEURAL_DIVIDE TERM','TERM_R',3,'p_term_r','new.py',723),
  ('TERM_R -> EMPTY','TERM_R',1,'p_term_r','new.py',724),
  ('NEURAL_TIMES -> EMPTY','NEURAL_TIMES',1,'p_neural_times','new.py',728),
  ('NEURAL_DIVIDE -> EMPTY','NEURAL_DIVIDE',1,'p_neural_divide','new.py',733),
  ('FACTOR -> ID NEURAL_ID_FAC','FACTOR',2,'p_factor_','new.py',738),
  ('FACTOR -> CONSTANT NEURAL_CNT_FACT','FACTOR',2,'p_factor_','new.py',739),
  ('FACTOR -> LPAREN H_EXPRESSION RPAREN','FACTOR',3,'p_factor_','new.py',740),
  ('NEURAL_ID_FAC -> EMPTY','NEURAL_ID_FAC',1,'p_neural_id_fac','new.py',744),
  ('NEURAL_CNT_FACT -> EMPTY','NEURAL_CNT_FACT',1,'p_neural_cnt_fact','new.py',759),
  ('S_EXPRESSION -> EXPRESSION','S_EXPRESSION',1,'p_s_expression','new.py',769),
  ('S_EXPRESSION -> EXPRESSION GT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',770),
  ('S_EXPRESSION -> EXPRESSION LT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',771),
  ('S_EXPRESSION -> EXPRESSION GTE EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',772),
  ('S_EXPRESSION -> EXPRESSION LTE EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',773),
  ('S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',774),
  ('H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R','H_EXPRESSION',2,'p_h_expression','new.py',778),
  ('H_EXPRESSION_R -> OR H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',782),
  ('H_EXPRESSION_R -> AND H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',783),
  ('H_EXPRESSION_R -> EMPTY','H_EXPRESSION_R',1,'p_h_expression_r','new.py',784),
  ('PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND','PRINCIPAL_BLOCK',6,'p_principal_block','new.py',788),
  ('PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R','PRINCIPAL_BODY',2,'p_principal_body','new.py',792),
  ('PRINCIPAL_BODY -> EMPTY','PRINCIPAL_BODY',1,'p_principal_body','new.py',793),
  ('PRINCIPAL_BODY_R -> PRINCIPAL_BODY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',797),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','new.py',800),
]
