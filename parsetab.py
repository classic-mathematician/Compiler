
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENAND BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MINUS OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K THEN_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON BLOCKneural_program_id : EMPTYBLOCK : VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCKVAR_BLOCK : VARS_K BLOCKSTART VAR_DECL BLOCKENDVAR_DECL : TYPE COLON VAR_LIST SEMICOLON VAR_DECL_RVAR_DECL_R : VAR_DECL\n                  | EMPTYVAR_LIST : ID VAR_LIST2VAR_LIST2 : COMMA ID VAR_LIST2\n                 | EMPTYTYPE : INT_K\n            | FLOAT_K\n            | STRING_KPROC_BLOCK : PROC_DECLPROC_DECL : PROC_DECL_RETURN\n                 | PROC_DECL_VOID\n                 | EMPTYPROC_DECL_VOID : FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECLneural_proc_void_id : EMPTYPROC_DECL_RETURN : FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECLneural_proc_return_id : EMPTYneural_param_decl : EMPTYPARAM_DECL : TYPE ID PARAM_DECL_R\n                  | EMPTYPARAM_DECL_R : COMMA PARAM_DECL\n                    | EMPTYPROC_BODY : STATEMENT PROC_BODY_RPROC_BODY_R : PROC_BODY\n                   | EMPTYSTATEMENT : ASSIGN SEMICOLON\n                 | FUNC_CALL SEMICOLON\n                 | READ SEMICOLON\n                 | WRITE SEMICOLON\n                 | FLOW\n                FLOW : DECISION\n            | LOOPLOOP : WHILE_LOOP\n            | FOR_LOOPWHILE_LOOP : WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKENDFOR_LOOP : FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKENDDECISION : IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALTDECISION_ALT : ELSE_K DECISION\n                    | BLOCKSTART STATEMENT_R BLOCKEND\n                    | EMPTYSTATEMENT_R : STATEMENT STATEMENT_R\n                   | EMPTYASSIGN : VAR EQUALS H_EXPRESSIONVAR : ID\n           | ARRAYARRAY : ID LBRACE INT RBRACEFUNC_CALL : ID LPAREN ARG_LIST RPARENARG_LIST : VAR ARG_LIST_R\n                | CONSTANT ARG_LIST_R\n                | ARG_LIST_RARG_LIST_R : COMMA ARG_LIST\n                  | EMPTYCONSTANT : INT\n                | FLOAT\n                | STRINGREAD : READ_K ID_LISTID_LIST : ID ID_LIST_RID_LIST_R : COMMA ID_LIST\n                 | EMPTYWRITE : WRITE_K WRITE_LISTWRITE_LIST : H_EXPRESSION WRITE_LIST_RWRITE_LIST_R : COMMA H_EXPRESSION\n                    | EMPTYRETURN : RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLONEXPRESSION : TERM EXPRESSION_REXPRESSION_R : PLUS EXPRESSION\n                    | MINUS EXPRESSION\n                    | EMPTYTERM : FACTOR TERM_RTERM_R : TIMES TERM\n              | DIVIDE TERM\n              | EMPTYFACTOR : ID\n              | CONSTANT\n              | LPAREN EXPRESSION RPARENS_EXPRESSION : EXPRESSION\n                    | EXPRESSION GT EXPRESSION\n                    | EXPRESSION LT EXPRESSIONH_EXPRESSION : S_EXPRESSION H_EXPRESSION_RH_EXPRESSION_R : OR H_EXPRESSION\n                      | AND H_EXPRESSION\n                      | EMPTYPRINCIPAL_BLOCK : MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKENDPRINCIPAL_BODY : STATEMENT PRINCIPAL_BODY_RPRINCIPAL_BODY_R : PRINCIPAL_BODY\n                         | EMPTYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,7,17,72,],[0,-1,-3,-87,]),'ID':([2,19,20,21,22,23,30,38,43,46,51,54,55,56,57,60,61,63,64,76,77,78,79,80,81,93,97,98,110,114,117,120,121,123,124,126,127,130,131,163,164,165,166,169,172,182,184,187,189,190,192,193,197,200,201,],[3,27,28,-11,-12,-13,37,53,71,53,-34,84,91,-35,-36,-37,-38,99,100,-30,-31,-32,-33,91,105,91,91,91,105,84,91,91,91,91,91,91,91,91,91,53,53,53,53,53,53,-91,-39,91,53,-41,-44,53,-42,-43,-40,]),'SEMICOLON':([3,4,5,36,37,42,44,47,48,49,50,71,83,84,85,86,87,88,89,90,91,92,94,95,96,103,104,113,115,116,118,119,122,125,128,129,132,143,148,149,150,151,152,153,154,155,156,157,158,199,],[-91,6,-2,41,-91,-8,-10,76,77,78,79,-91,-60,-91,-64,-91,-91,-80,-91,-91,-77,-78,-57,-58,-59,-9,-47,-61,-63,-65,-67,-83,-86,-69,-72,-73,-76,-51,-62,-66,-84,-85,-81,-82,-70,-71,-74,-75,-79,202,]),'VARS_K':([6,],[9,]),'FUNCTION_K':([8,29,181,186,],[15,-4,15,15,]),'MAIN_K':([8,10,11,12,13,14,29,181,186,188,194,],[-91,18,-14,-15,-16,-17,-4,-91,-91,-18,-20,]),'BLOCKSTART':([9,31,101,102,140,141,142,159,160,182,185,],[16,38,-91,-91,163,-22,164,165,166,189,193,]),'VOID_K':([15,],[20,]),'INT_K':([15,16,39,40,41,138,],[21,21,21,21,21,21,]),'FLOAT_K':([15,16,39,40,41,138,],[22,22,22,22,22,22,]),'STRING_K':([15,16,39,40,41,138,],[23,23,23,23,23,23,]),'LPAREN':([18,27,28,32,33,34,35,53,55,59,62,80,93,97,98,117,120,121,123,124,126,127,130,131,177,187,],[26,-91,-91,39,-21,40,-19,81,93,97,98,93,93,93,93,93,93,93,93,93,93,93,93,93,187,93,]),'COLON':([21,22,23,25,],[-11,-12,-13,30,]),'BLOCKEND':([24,41,45,46,51,56,57,60,61,68,69,70,73,74,75,76,77,78,79,165,166,169,170,171,172,173,174,176,178,179,180,182,183,184,189,190,192,193,196,197,198,200,201,202,],[29,-91,72,-91,-34,-35,-36,-37,-38,-5,-6,-7,-88,-89,-90,-30,-31,-32,-33,-91,-91,-91,181,182,-91,-46,184,186,-27,-28,-29,-91,-45,-39,-91,-41,-44,-91,200,-42,201,-43,-40,-68,]),'RPAREN':([26,39,40,58,65,66,67,81,87,88,89,90,91,92,94,95,96,100,105,106,107,108,109,110,111,119,122,125,128,129,132,133,134,135,137,138,139,144,145,146,147,150,151,152,153,154,155,156,157,158,162,195,],[31,-91,-91,-49,101,-24,102,-91,-91,-80,-91,-91,-77,-78,-57,-58,-59,-91,-48,143,-91,-54,-91,-91,-56,-83,-86,-69,-72,-73,-76,158,159,160,-23,-91,-26,-52,-53,-55,-50,-84,-85,-81,-82,-70,-71,-74,-75,-79,-25,199,]),'COMMA':([37,58,71,81,84,86,87,88,89,90,91,92,94,95,96,100,105,107,109,110,119,122,125,128,129,132,147,150,151,152,153,154,155,156,157,158,],[43,-49,43,110,114,117,-91,-80,-91,-91,-77,-78,-57,-58,-59,138,-48,110,110,110,-83,-86,-69,-72,-73,-76,-50,-84,-85,-81,-82,-70,-71,-74,-75,-79,]),'READ_K':([38,46,51,56,57,60,61,76,77,78,79,163,164,165,166,169,172,182,184,189,190,192,193,197,200,201,],[54,54,-34,-35,-36,-37,-38,-30,-31,-32,-33,54,54,54,54,54,54,-91,-39,54,-41,-44,54,-42,-43,-40,]),'WRITE_K':([38,46,51,56,57,60,61,76,77,78,79,163,164,165,166,169,172,182,184,189,190,192,193,197,200,201,],[55,55,-34,-35,-36,-37,-38,-30,-31,-32,-33,55,55,55,55,55,55,-91,-39,55,-41,-44,55,-42,-43,-40,]),'IF_K':([38,46,51,56,57,60,61,76,77,78,79,163,164,165,166,169,172,182,184,189,190,191,192,193,197,200,201,],[59,59,-34,-35,-36,-37,-38,-30,-31,-32,-33,59,59,59,59,59,59,-91,-39,59,-41,59,-44,59,-42,-43,-40,]),'WHILE_K':([38,46,51,56,57,60,61,76,77,78,79,163,164,165,166,169,172,182,184,189,190,192,193,197,200,201,],[62,62,-34,-35,-36,-37,-38,-30,-31,-32,-33,62,62,62,62,62,62,-91,-39,62,-41,-44,62,-42,-43,-40,]),'FOR_K':([38,46,51,56,57,60,61,76,77,78,79,163,164,165,166,169,172,182,184,189,190,192,193,197,200,201,],[63,63,-34,-35,-36,-37,-38,-30,-31,-32,-33,63,63,63,63,63,63,-91,-39,63,-41,-44,63,-42,-43,-40,]),'RETURN_K':([51,56,57,60,61,76,77,78,79,168,169,178,179,180,182,184,190,192,197,200,201,],[-34,-35,-36,-37,-38,-30,-31,-32,-33,177,-91,-27,-28,-29,-91,-39,-41,-44,-42,-43,-40,]),'EQUALS':([52,53,58,99,147,],[80,-48,-49,136,-50,]),'LBRACE':([53,105,],[82,82,]),'INT':([55,80,81,82,93,97,98,110,117,120,121,123,124,126,127,130,131,136,167,187,],[94,94,94,112,94,94,94,94,94,94,94,94,94,94,94,94,94,161,175,94,]),'FLOAT':([55,80,81,93,97,98,110,117,120,121,123,124,126,127,130,131,187,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'STRING':([55,80,81,93,97,98,110,117,120,121,123,124,126,127,130,131,187,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'OR':([87,88,89,90,91,92,94,95,96,125,128,129,132,152,153,154,155,156,157,158,],[120,-80,-91,-91,-77,-78,-57,-58,-59,-69,-72,-73,-76,-81,-82,-70,-71,-74,-75,-79,]),'AND':([87,88,89,90,91,92,94,95,96,125,128,129,132,152,153,154,155,156,157,158,],[121,-80,-91,-91,-77,-78,-57,-58,-59,-69,-72,-73,-76,-81,-82,-70,-71,-74,-75,-79,]),'GT':([88,89,90,91,92,94,95,96,125,128,129,132,154,155,156,157,158,],[123,-91,-91,-77,-78,-57,-58,-59,-69,-72,-73,-76,-70,-71,-74,-75,-79,]),'LT':([88,89,90,91,92,94,95,96,125,128,129,132,154,155,156,157,158,],[124,-91,-91,-77,-78,-57,-58,-59,-69,-72,-73,-76,-70,-71,-74,-75,-79,]),'PLUS':([89,90,91,92,94,95,96,129,132,156,157,158,],[126,-91,-77,-78,-57,-58,-59,-73,-76,-74,-75,-79,]),'MINUS':([89,90,91,92,94,95,96,129,132,156,157,158,],[127,-91,-77,-78,-57,-58,-59,-73,-76,-74,-75,-79,]),'TIMES':([90,91,92,94,95,96,158,],[130,-77,-78,-57,-58,-59,-79,]),'DIVIDE':([90,91,92,94,95,96,158,],[131,-77,-78,-57,-58,-59,-79,]),'RBRACE':([112,],[147,]),'TO_K':([161,],[167,]),'DO_K':([175,],[185,]),'ELSE_K':([182,],[191,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,8,27,28,37,39,40,41,46,71,81,84,86,87,89,90,100,101,102,107,109,110,138,165,166,169,172,181,182,186,189,193,],[5,14,33,35,44,66,66,70,75,44,111,115,118,122,128,132,139,141,141,111,111,111,66,173,173,180,173,14,192,14,173,173,]),'BLOCK':([6,],[7,]),'VAR_BLOCK':([6,],[8,]),'PROC_BLOCK':([8,],[10,]),'PROC_DECL':([8,181,186,],[11,188,194,]),'PROC_DECL_RETURN':([8,181,186,],[12,12,12,]),'PROC_DECL_VOID':([8,181,186,],[13,13,13,]),'PRINCIPAL_BLOCK':([10,],[17,]),'TYPE':([15,16,39,40,41,138,],[19,25,64,64,25,64,]),'VAR_DECL':([16,41,],[24,69,]),'neural_proc_return_id':([27,],[32,]),'neural_proc_void_id':([28,],[34,]),'VAR_LIST':([30,],[36,]),'VAR_LIST2':([37,71,],[42,103,]),'PRINCIPAL_BODY':([38,46,],[45,74,]),'STATEMENT':([38,46,163,164,165,166,169,172,189,193,],[46,46,169,169,172,172,169,172,172,172,]),'ASSIGN':([38,46,163,164,165,166,169,172,189,193,],[47,47,47,47,47,47,47,47,47,47,]),'FUNC_CALL':([38,46,163,164,165,166,169,172,189,193,],[48,48,48,48,48,48,48,48,48,48,]),'READ':([38,46,163,164,165,166,169,172,189,193,],[49,49,49,49,49,49,49,49,49,49,]),'WRITE':([38,46,163,164,165,166,169,172,189,193,],[50,50,50,50,50,50,50,50,50,50,]),'FLOW':([38,46,163,164,165,166,169,172,189,193,],[51,51,51,51,51,51,51,51,51,51,]),'VAR':([38,46,81,110,163,164,165,166,169,172,189,193,],[52,52,107,107,52,52,52,52,52,52,52,52,]),'DECISION':([38,46,163,164,165,166,169,172,189,191,193,],[56,56,56,56,56,56,56,56,56,197,56,]),'LOOP':([38,46,163,164,165,166,169,172,189,193,],[57,57,57,57,57,57,57,57,57,57,]),'ARRAY':([38,46,81,110,163,164,165,166,169,172,189,193,],[58,58,58,58,58,58,58,58,58,58,58,58,]),'WHILE_LOOP':([38,46,163,164,165,166,169,172,189,193,],[60,60,60,60,60,60,60,60,60,60,]),'FOR_LOOP':([38,46,163,164,165,166,169,172,189,193,],[61,61,61,61,61,61,61,61,61,61,]),'PARAM_DECL':([39,40,138,],[65,67,162,]),'VAR_DECL_R':([41,],[68,]),'PRINCIPAL_BODY_R':([46,],[73,]),'ID_LIST':([54,114,],[83,148,]),'WRITE_LIST':([55,],[85,]),'H_EXPRESSION':([55,80,97,98,117,120,121,187,],[86,104,134,135,149,150,151,195,]),'S_EXPRESSION':([55,80,97,98,117,120,121,187,],[87,87,87,87,87,87,87,87,]),'EXPRESSION':([55,80,93,97,98,117,120,121,123,124,126,127,187,],[88,88,133,88,88,88,88,88,152,153,154,155,88,]),'TERM':([55,80,93,97,98,117,120,121,123,124,126,127,130,131,187,],[89,89,89,89,89,89,89,89,89,89,89,89,156,157,89,]),'FACTOR':([55,80,93,97,98,117,120,121,123,124,126,127,130,131,187,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'CONSTANT':([55,80,81,93,97,98,110,117,120,121,123,124,126,127,130,131,187,],[92,92,109,92,92,92,109,92,92,92,92,92,92,92,92,92,92,]),'ARG_LIST':([81,110,],[106,146,]),'ARG_LIST_R':([81,107,109,110,],[108,144,145,108,]),'ID_LIST_R':([84,],[113,]),'WRITE_LIST_R':([86,],[116,]),'H_EXPRESSION_R':([87,],[119,]),'EXPRESSION_R':([89,],[125,]),'TERM_R':([90,],[129,]),'PARAM_DECL_R':([100,],[137,]),'neural_param_decl':([101,102,],[140,142,]),'PROC_BODY':([163,164,169,],[168,170,179,]),'STATEMENT_R':([165,166,172,189,193,],[171,174,183,196,198,]),'RETURN':([168,],[176,]),'PROC_BODY_R':([169,],[178,]),'DECISION_ALT':([182,],[190,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK','PROGRAM',5,'p_program','new.py',157),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','new.py',161),
  ('BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK','BLOCK',3,'p_block','new.py',164),
  ('VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND','VAR_BLOCK',4,'p_var_block','new.py',167),
  ('VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R','VAR_DECL',5,'p_var_decl','new.py',170),
  ('VAR_DECL_R -> VAR_DECL','VAR_DECL_R',1,'p_var_decl_r','new.py',173),
  ('VAR_DECL_R -> EMPTY','VAR_DECL_R',1,'p_var_decl_r','new.py',174),
  ('VAR_LIST -> ID VAR_LIST2','VAR_LIST',2,'p_var_list','new.py',177),
  ('VAR_LIST2 -> COMMA ID VAR_LIST2','VAR_LIST2',3,'p_var_list2','new.py',180),
  ('VAR_LIST2 -> EMPTY','VAR_LIST2',1,'p_var_list2','new.py',181),
  ('TYPE -> INT_K','TYPE',1,'p_type','new.py',184),
  ('TYPE -> FLOAT_K','TYPE',1,'p_type','new.py',185),
  ('TYPE -> STRING_K','TYPE',1,'p_type','new.py',186),
  ('PROC_BLOCK -> PROC_DECL','PROC_BLOCK',1,'p_proc_block','new.py',189),
  ('PROC_DECL -> PROC_DECL_RETURN','PROC_DECL',1,'p_proc_decl','new.py',192),
  ('PROC_DECL -> PROC_DECL_VOID','PROC_DECL',1,'p_proc_decl','new.py',193),
  ('PROC_DECL -> EMPTY','PROC_DECL',1,'p_proc_decl','new.py',194),
  ('PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL','PROC_DECL_VOID',12,'p_proc_decl_void','new.py',198),
  ('neural_proc_void_id -> EMPTY','neural_proc_void_id',1,'p_neural_proc_void_id','new.py',201),
  ('PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL','PROC_DECL_RETURN',13,'p_proc_decl_return','new.py',204),
  ('neural_proc_return_id -> EMPTY','neural_proc_return_id',1,'p_neural_proc_return_id','new.py',207),
  ('neural_param_decl -> EMPTY','neural_param_decl',1,'p_neural_param_decl','new.py',210),
  ('PARAM_DECL -> TYPE ID PARAM_DECL_R','PARAM_DECL',3,'p_param_decl','new.py',213),
  ('PARAM_DECL -> EMPTY','PARAM_DECL',1,'p_param_decl','new.py',214),
  ('PARAM_DECL_R -> COMMA PARAM_DECL','PARAM_DECL_R',2,'p_param_decl_r','new.py',217),
  ('PARAM_DECL_R -> EMPTY','PARAM_DECL_R',1,'p_param_decl_r','new.py',218),
  ('PROC_BODY -> STATEMENT PROC_BODY_R','PROC_BODY',2,'p_proc_body','new.py',221),
  ('PROC_BODY_R -> PROC_BODY','PROC_BODY_R',1,'p_proc_body_r','new.py',224),
  ('PROC_BODY_R -> EMPTY','PROC_BODY_R',1,'p_proc_body_r','new.py',225),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','new.py',228),
  ('STATEMENT -> FUNC_CALL SEMICOLON','STATEMENT',2,'p_statement','new.py',229),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','new.py',230),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','new.py',231),
  ('STATEMENT -> FLOW','STATEMENT',1,'p_statement','new.py',232),
  ('FLOW -> DECISION','FLOW',1,'p_flow','new.py',236),
  ('FLOW -> LOOP','FLOW',1,'p_flow','new.py',237),
  ('LOOP -> WHILE_LOOP','LOOP',1,'p_loop','new.py',240),
  ('LOOP -> FOR_LOOP','LOOP',1,'p_loop','new.py',241),
  ('WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND','WHILE_LOOP',7,'p_while_loop','new.py',244),
  ('FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND','FOR_LOOP',10,'p_for_loop','new.py',247),
  ('DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT','DECISION',8,'p_decision','new.py',250),
  ('DECISION_ALT -> ELSE_K DECISION','DECISION_ALT',2,'p_decision_alt','new.py',253),
  ('DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND','DECISION_ALT',3,'p_decision_alt','new.py',254),
  ('DECISION_ALT -> EMPTY','DECISION_ALT',1,'p_decision_alt','new.py',255),
  ('STATEMENT_R -> STATEMENT STATEMENT_R','STATEMENT_R',2,'p_statement_r','new.py',258),
  ('STATEMENT_R -> EMPTY','STATEMENT_R',1,'p_statement_r','new.py',259),
  ('ASSIGN -> VAR EQUALS H_EXPRESSION','ASSIGN',3,'p_assign','new.py',262),
  ('VAR -> ID','VAR',1,'p_var','new.py',265),
  ('VAR -> ARRAY','VAR',1,'p_var','new.py',266),
  ('ARRAY -> ID LBRACE INT RBRACE','ARRAY',4,'p_array','new.py',269),
  ('FUNC_CALL -> ID LPAREN ARG_LIST RPAREN','FUNC_CALL',4,'p_func_call','new.py',272),
  ('ARG_LIST -> VAR ARG_LIST_R','ARG_LIST',2,'p_arg_list','new.py',275),
  ('ARG_LIST -> CONSTANT ARG_LIST_R','ARG_LIST',2,'p_arg_list','new.py',276),
  ('ARG_LIST -> ARG_LIST_R','ARG_LIST',1,'p_arg_list','new.py',277),
  ('ARG_LIST_R -> COMMA ARG_LIST','ARG_LIST_R',2,'p_arglist_r','new.py',280),
  ('ARG_LIST_R -> EMPTY','ARG_LIST_R',1,'p_arglist_r','new.py',281),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','new.py',284),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','new.py',285),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','new.py',286),
  ('READ -> READ_K ID_LIST','READ',2,'p_read','new.py',289),
  ('ID_LIST -> ID ID_LIST_R','ID_LIST',2,'p_id_list','new.py',292),
  ('ID_LIST_R -> COMMA ID_LIST','ID_LIST_R',2,'p_id_list_r','new.py',295),
  ('ID_LIST_R -> EMPTY','ID_LIST_R',1,'p_id_list_r','new.py',296),
  ('WRITE -> WRITE_K WRITE_LIST','WRITE',2,'p_write','new.py',299),
  ('WRITE_LIST -> H_EXPRESSION WRITE_LIST_R','WRITE_LIST',2,'p_write_list','new.py',302),
  ('WRITE_LIST_R -> COMMA H_EXPRESSION','WRITE_LIST_R',2,'p_write_list_r','new.py',305),
  ('WRITE_LIST_R -> EMPTY','WRITE_LIST_R',1,'p_write_list_r','new.py',306),
  ('RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','new.py',309),
  ('EXPRESSION -> TERM EXPRESSION_R','EXPRESSION',2,'p_expression','new.py',313),
  ('EXPRESSION_R -> PLUS EXPRESSION','EXPRESSION_R',2,'p_expression_r','new.py',317),
  ('EXPRESSION_R -> MINUS EXPRESSION','EXPRESSION_R',2,'p_expression_r','new.py',318),
  ('EXPRESSION_R -> EMPTY','EXPRESSION_R',1,'p_expression_r','new.py',319),
  ('TERM -> FACTOR TERM_R','TERM',2,'p_term','new.py',322),
  ('TERM_R -> TIMES TERM','TERM_R',2,'p_term_r','new.py',326),
  ('TERM_R -> DIVIDE TERM','TERM_R',2,'p_term_r','new.py',327),
  ('TERM_R -> EMPTY','TERM_R',1,'p_term_r','new.py',328),
  ('FACTOR -> ID','FACTOR',1,'p_factor_','new.py',332),
  ('FACTOR -> CONSTANT','FACTOR',1,'p_factor_','new.py',333),
  ('FACTOR -> LPAREN EXPRESSION RPAREN','FACTOR',3,'p_factor_','new.py',334),
  ('S_EXPRESSION -> EXPRESSION','S_EXPRESSION',1,'p_s_expression','new.py',338),
  ('S_EXPRESSION -> EXPRESSION GT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',339),
  ('S_EXPRESSION -> EXPRESSION LT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',340),
  ('H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R','H_EXPRESSION',2,'p_h_expression','new.py',344),
  ('H_EXPRESSION_R -> OR H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',348),
  ('H_EXPRESSION_R -> AND H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',349),
  ('H_EXPRESSION_R -> EMPTY','H_EXPRESSION_R',1,'p_h_expression_r','new.py',350),
  ('PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND','PRINCIPAL_BLOCK',6,'p_principal_block','new.py',353),
  ('PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R','PRINCIPAL_BODY',2,'p_principal_body','new.py',356),
  ('PRINCIPAL_BODY_R -> PRINCIPAL_BODY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',359),
  ('PRINCIPAL_BODY_R -> EMPTY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',360),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','new.py',363),
]
