
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENAND BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MINUS OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON BLOCKneural_program_id : EMPTYBLOCK : VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCKVAR_BLOCK : VARS_K BLOCKSTART VAR_DECL BLOCKENDVAR_DECL : TYPE COLON VAR_LIST SEMICOLON VAR_DECL_RVAR_DECL_R : VAR_DECL\n                  | EMPTYVAR_LIST : ID VAR_LIST2VAR_LIST2 : COMMA ID VAR_LIST2\n                 | EMPTYTYPE : INT_K NEURAL_TYPE\n            | FLOAT_K NEURAL_TYPE\n            | STRING_K NEURAL_TYPENEURAL_TYPE : EMPTYPROC_BLOCK : PROC_DECLPROC_DECL : PROC_DECL_RETURN\n                 | PROC_DECL_VOID\n                 | EMPTYPROC_DECL_VOID : FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECLneural_proc_void_id : EMPTYPROC_DECL_RETURN : FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECLPOST_FUNC : EMPTYneural_proc_return_id : EMPTYneural_param_decl : EMPTYPARAM_DECL : TYPE ID neuro PARAM_DECL_R\n                  | EMPTYneuro : EMPTYPARAM_DECL_R : COMMA PARAM_DECL\n                    | EMPTYPROC_BODY : STATEMENT PROC_BODY_RFN_VARBLOCK : VARS_K BLOCKSTART LS_VARDECL BLOCKENDLS_VARDECL : TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_RLS_VARDECL_R : LS_VARDECL\n                    | EMPTYFNVAR_LS : ID FNVAR_LS2FNVAR_LS2 : COMMA ID FNVAR_LS2\n                 | EMPTYPROC_BODY_R : PROC_BODY\n                   | EMPTYSTATEMENT : ASSIGN SEMICOLON\n                 | FUNC_CALL SEMICOLON\n                 | READ SEMICOLON\n                 | WRITE SEMICOLON\n                 | FLOW\n                STATEMENT_R : STATEMENT STATEMENT_R\n                   | EMPTYFLOW : DECISION\n            | LOOPLOOP : WHILE_LOOP\n            | DO_WHILE_LOOP SEMICOLON\n            | FOR_LOOPDO_WHILE_LOOP : DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURALDW_PREV_NEURAL : EMPTYDW_END_NEURAL : EMPTYWHILE_LOOP : WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURALWHILE_PREV_NEURAL : EMPTYWHILE_POST_NEURAL : EMPTYWHILE_END_NEURAL : EMPTYFOR_LOOP : FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKENDDECISION : IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURALEXP_RESULT_NEURAL : EMPTYDECISION_END_NEURAL : EMPTYDECISION_ALT : ELSE\n                    | EMPTYELSE : ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKENDELSE_NEURAL : EMPTYASSIGN : VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURALASSI_H_EXP_NEURAL : EMPTYEQUALS_NEURAL : EMPTYASSIGN_VAR_N : EMPTYVAR : ID\n           | ARRAYARRAY : ID LBRACE INT RBRACEFUNC_CALL : ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPARENPOST_VERIFY : EMPTYPRE_VERIFY : EMPTYEXP_LIST : H_EXPRESSION EXP_NEURAL EXP_LIST_2EXP_NEURAL : EMPTYEXP_LIST_2 : COMMA EXP_LIST\n                  | EMPTYCONSTANT : INT\n                | FLOAT\n                | STRINGREAD : READ_K LPAREN ID_LIST RPARENID_LIST : ID READ_NEURAL ID_LIST_RREAD_NEURAL : EMPTYID_LIST_R : COMMA ID_LIST\n                 | EMPTYWRITE : WRITE_K LPAREN WRITE_LIST RPARENWRITE_LIST : H_EXPRESSION WRITE_LIST_R\n                  | CONSTANT CONSTANT_WRITE_N WRITE_LIST_RCONSTANT_WRITE_N : EMPTYWRITE_LIST_R : WRITE_NEURAL COMMA WRITE_LIST\n                    | WRITE_NEURAL EMPTYWRITE_NEURAL : EMPTYRETURN : RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLONEXPRESSION : TERM NEURAL_EXPRESSION EXPRESSION_RNEURAL_EXPRESSION : EMPTYEXPRESSION_R : PLUS NEURAL_PLUS EXPRESSION\n                    | MINUS NEURAL_MINUS EXPRESSION\n                    | EMPTYNEURAL_PLUS : EMPTYNEURAL_MINUS : EMPTYTERM : FACTOR NEURAL_TERM TERM_RNEURAL_TERM : EMPTYTERM_R : TIMES NEURAL_TIMES TERM\n              | DIVIDE NEURAL_DIVIDE TERM\n              | EMPTYNEURAL_TIMES : EMPTYNEURAL_DIVIDE : EMPTYFACTOR : ID NEURAL_ID_FAC\n              | CONSTANT NEURAL_CNT_FACT\n              | LPAREN H_EXPRESSION RPARENNEURAL_ID_FAC : EMPTYNEURAL_CNT_FACT : EMPTYS_EXPRESSION : EXPRESSION\n                    | EXPRESSION GT EXPRESSION\n                    | EXPRESSION LT EXPRESSION\n                    | EXPRESSION GTE EXPRESSION\n                    | EXPRESSION LTE EXPRESSION\n                    | EXPRESSION DOUBLEEQUAL EXPRESSIONH_EXPRESSION : S_EXPRESSION H_EXPRESSION_RH_EXPRESSION_R : OR H_EXPRESSION\n                      | AND H_EXPRESSION\n                      | EMPTYPRINCIPAL_BLOCK : MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKENDMAIN_NEURAL : EMPTYPRINCIPAL_BODY : STATEMENT PRINCIPAL_BODY_R\n                      | EMPTYPRINCIPAL_BODY_R : PRINCIPAL_BODYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,7,17,85,],[0,-1,-3,-126,]),'ID':([2,19,20,21,22,23,30,31,32,33,35,48,50,51,60,66,71,72,75,77,80,88,89,90,91,97,98,99,100,111,112,116,130,131,138,139,155,156,158,159,160,161,162,173,177,179,186,189,200,201,204,205,214,221,225,226,227,228,229,230,231,232,233,252,253,256,257,258,261,264,270,271,272,274,281,283,284,286,287,290,296,299,],[3,28,29,-131,-131,-131,-11,-14,-12,-13,42,58,68,81,68,-44,-47,-48,-49,-51,105,-40,-41,-42,-43,115,127,127,-50,-131,127,127,127,68,127,-69,127,127,127,127,127,127,127,68,68,68,115,127,-131,-131,-131,-131,68,127,127,-102,127,-103,127,-109,127,-110,68,68,127,127,-31,268,-131,68,-131,-63,-64,-131,295,-60,-62,-55,-58,-59,68,-65,]),'SEMICOLON':([3,4,5,41,42,47,49,58,62,63,64,65,76,84,120,121,122,123,124,125,126,127,129,143,147,152,154,157,163,164,165,166,167,168,170,180,188,192,193,194,195,196,197,198,199,202,203,206,217,218,219,247,248,249,250,267,268,275,278,280,282,288,289,295,297,],[-131,6,-2,46,-131,-8,-10,-131,88,89,90,91,100,-9,-131,-81,-82,-83,-116,-131,-131,-131,-131,-84,-89,-112,-122,-125,-131,-98,-131,-105,-111,-114,-115,-131,-113,-123,-124,-117,-118,-119,-120,-121,-97,-101,-104,-108,-67,-68,-74,-99,-100,-106,-107,279,-131,-131,291,-35,-37,-52,-54,-131,-36,]),'VARS_K':([6,136,137,],[9,178,178,]),'FUNCTION_K':([8,34,245,255,259,260,265,],[15,-4,-131,-131,15,-22,15,]),'MAIN_K':([8,10,11,12,13,14,34,245,255,259,260,265,269,277,],[-131,18,-15,-16,-17,-18,-4,-131,-131,-131,-22,-131,-19,-21,]),'BLOCKSTART':([9,43,79,82,83,103,104,108,109,110,169,178,207,208,209,234,235,254,285,],[16,50,-131,-131,-131,131,-53,136,-24,137,-131,215,233,-61,-131,252,-57,264,296,]),'VOID_K':([15,],[20,]),'INT_K':([15,16,44,45,46,134,215,279,],[21,21,21,21,21,21,21,21,]),'FLOAT_K':([15,16,44,45,46,134,215,279,],[22,22,22,22,22,22,22,22,]),'STRING_K':([15,16,44,45,46,134,215,279,],[23,23,23,23,23,23,23,23,]),'LPAREN':([18,26,27,28,29,37,38,39,40,68,69,70,74,78,94,96,98,99,101,102,111,112,116,130,138,139,155,156,158,159,160,161,162,189,200,201,204,205,221,225,226,227,228,229,230,231,232,236,239,253,256,],[-131,36,-127,-131,-131,44,-23,45,-20,-131,97,98,99,-131,112,-76,116,116,130,-56,-131,116,116,116,116,-69,116,116,116,116,116,116,116,116,-131,-131,-131,-131,116,116,-102,116,-103,116,-109,116,-110,253,256,116,116,]),'COLON':([21,22,23,25,30,31,32,33,244,],[-131,-131,-131,35,-11,-14,-12,-13,258,]),'BLOCKEND':([24,46,50,55,56,57,59,60,61,66,71,72,75,77,86,87,88,89,90,91,100,131,172,173,174,211,214,216,233,238,240,241,242,243,251,252,261,262,264,270,271,272,274,276,279,283,284,286,287,290,291,292,293,294,296,298,299,],[34,-131,-131,-5,-6,-7,85,-131,-129,-44,-47,-48,-49,-51,-128,-130,-40,-41,-42,-43,-50,-131,210,-131,-46,-45,-131,245,-131,255,-30,-38,-39,257,261,-131,-131,274,-131,-131,-63,-64,-131,290,-131,-60,-62,-55,-58,-59,-96,-32,-33,-34,-131,299,-65,]),'RPAREN':([36,44,45,52,53,54,81,106,107,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,133,134,135,140,141,144,145,146,148,149,150,151,152,153,154,157,163,164,165,166,167,168,170,171,176,181,182,183,184,185,187,188,190,191,192,193,194,195,196,197,198,199,202,203,206,220,222,223,224,246,247,248,249,250,263,266,],[43,-131,-131,82,-26,83,-131,-131,-27,143,-131,147,-131,-131,-131,-81,-82,-83,-116,-131,-131,-131,169,-131,-25,-131,-29,-131,-131,-131,-86,188,-90,-131,-95,-131,-112,-92,-122,-125,-131,-98,-131,-105,-111,-114,-115,209,-28,219,-75,-131,-78,-85,-88,-113,-94,-91,-123,-124,-117,-118,-119,-120,-121,-97,-101,-104,-108,-77,-80,-87,-93,-79,-99,-100,-106,-107,275,278,]),'COMMA':([42,58,81,106,107,115,118,119,120,121,122,123,124,125,126,127,129,141,144,145,149,150,151,152,153,154,157,163,164,165,166,167,168,170,183,184,188,192,193,194,195,196,197,198,199,202,203,206,247,248,249,250,268,295,],[48,48,-131,134,-27,-131,-131,-131,-131,-81,-82,-83,-116,-131,-131,-131,-131,-131,186,-86,189,-95,-131,-112,-92,-122,-125,-131,-98,-131,-105,-111,-114,-115,221,-78,-113,-123,-124,-117,-118,-119,-120,-121,-97,-101,-104,-108,-99,-100,-106,-107,281,281,]),'READ_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,173,177,179,214,233,252,257,261,264,270,271,272,274,283,284,286,287,290,296,299,],[69,69,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,69,69,69,69,69,69,69,-31,-131,69,-131,-63,-64,-131,-60,-62,-55,-58,-59,69,-65,]),'WRITE_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,173,177,179,214,233,252,257,261,264,270,271,272,274,283,284,286,287,290,296,299,],[70,70,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,70,70,70,70,70,70,70,-31,-131,70,-131,-63,-64,-131,-60,-62,-55,-58,-59,70,-65,]),'IF_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,173,177,179,214,233,252,257,261,264,270,271,272,274,283,284,286,287,290,296,299,],[74,74,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,74,74,74,74,74,74,74,-31,-131,74,-131,-63,-64,-131,-60,-62,-55,-58,-59,74,-65,]),'WHILE_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,173,177,179,210,214,233,252,257,261,264,270,271,272,274,283,284,286,287,290,296,299,],[78,78,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,78,78,78,78,236,78,78,78,-31,-131,78,-131,-63,-64,-131,-60,-62,-55,-58,-59,78,-65,]),'DO_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,173,177,179,214,233,237,252,257,261,264,270,271,272,274,283,284,286,287,290,296,299,],[79,79,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,79,79,79,79,79,79,254,79,-31,-131,79,-131,-63,-64,-131,-60,-62,-55,-58,-59,79,-65,]),'FOR_K':([50,60,66,71,72,75,77,88,89,90,91,100,131,173,177,179,214,233,252,257,261,264,270,271,272,274,283,284,286,287,290,296,299,],[80,80,-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,80,80,80,80,80,80,80,-31,-131,80,-131,-63,-64,-131,-60,-62,-55,-58,-59,80,-65,]),'RETURN_K':([66,71,72,75,77,88,89,90,91,100,213,214,240,241,242,261,270,271,272,274,283,284,286,287,290,299,],[-44,-47,-48,-49,-51,-40,-41,-42,-43,-50,239,-131,-30,-38,-39,-131,-131,-63,-64,-131,-60,-62,-55,-58,-59,-65,]),'EQUALS':([67,68,73,92,93,105,142,],[-131,-71,-72,111,-70,132,-73,]),'LBRACE':([68,],[95,]),'INT':([95,98,99,111,112,116,130,132,138,139,155,156,158,159,160,161,162,189,200,201,204,205,212,221,225,226,227,228,229,230,231,232,253,256,],[113,121,121,-131,121,121,121,175,121,-69,121,121,121,121,121,121,121,121,-131,-131,-131,-131,237,121,121,-102,121,-103,121,-109,121,-110,121,121,]),'FLOAT':([98,99,111,112,116,130,138,139,155,156,158,159,160,161,162,189,200,201,204,205,221,225,226,227,228,229,230,231,232,253,256,],[122,122,-131,122,122,122,122,-69,122,122,122,122,122,122,122,122,-131,-131,-131,-131,122,122,-102,122,-103,122,-109,122,-110,122,122,]),'STRING':([98,99,111,112,116,130,138,139,155,156,158,159,160,161,162,189,200,201,204,205,221,225,226,227,228,229,230,231,232,253,256,],[123,123,-131,123,123,123,123,-69,123,123,123,123,123,123,123,123,-131,-131,-131,-131,123,123,-102,123,-103,123,-109,123,-110,123,123,]),'RBRACE':([113,],[142,]),'TIMES':([119,121,122,123,126,127,129,152,153,165,166,167,168,170,188,],[-131,-81,-82,-83,-131,-131,-131,-112,-115,204,-105,-111,-114,-115,-113,]),'DIVIDE':([119,121,122,123,126,127,129,152,153,165,166,167,168,170,188,],[-131,-81,-82,-83,-131,-131,-131,-112,-115,205,-105,-111,-114,-115,-113,]),'PLUS':([119,121,122,123,125,126,127,129,152,153,163,164,165,166,167,168,170,188,203,206,249,250,],[-131,-81,-82,-83,-131,-131,-131,-131,-112,-115,200,-98,-131,-105,-111,-114,-115,-113,-104,-108,-106,-107,]),'MINUS':([119,121,122,123,125,126,127,129,152,153,163,164,165,166,167,168,170,188,203,206,249,250,],[-131,-81,-82,-83,-131,-131,-131,-131,-112,-115,201,-98,-131,-105,-111,-114,-115,-113,-104,-108,-106,-107,]),'GT':([119,121,122,123,124,125,126,127,129,152,153,163,164,165,166,167,168,170,188,199,202,203,206,247,248,249,250,],[-131,-81,-82,-83,158,-131,-131,-131,-131,-112,-115,-131,-98,-131,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'LT':([119,121,122,123,124,125,126,127,129,152,153,163,164,165,166,167,168,170,188,199,202,203,206,247,248,249,250,],[-131,-81,-82,-83,159,-131,-131,-131,-131,-112,-115,-131,-98,-131,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'GTE':([119,121,122,123,124,125,126,127,129,152,153,163,164,165,166,167,168,170,188,199,202,203,206,247,248,249,250,],[-131,-81,-82,-83,160,-131,-131,-131,-131,-112,-115,-131,-98,-131,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'LTE':([119,121,122,123,124,125,126,127,129,152,153,163,164,165,166,167,168,170,188,199,202,203,206,247,248,249,250,],[-131,-81,-82,-83,161,-131,-131,-131,-131,-112,-115,-131,-98,-131,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'DOUBLEEQUAL':([119,121,122,123,124,125,126,127,129,152,153,163,164,165,166,167,168,170,188,199,202,203,206,247,248,249,250,],[-131,-81,-82,-83,162,-131,-131,-131,-131,-112,-115,-131,-98,-131,-105,-111,-114,-115,-113,-97,-101,-104,-108,-99,-100,-106,-107,]),'OR':([119,120,121,122,123,124,125,126,127,129,152,153,163,164,165,166,167,168,170,188,194,195,196,197,198,199,202,203,206,247,248,249,250,],[-131,155,-81,-82,-83,-116,-131,-131,-131,-131,-112,-115,-131,-98,-131,-105,-111,-114,-115,-113,-117,-118,-119,-120,-121,-97,-101,-104,-108,-99,-100,-106,-107,]),'AND':([119,120,121,122,123,124,125,126,127,129,152,153,163,164,165,166,167,168,170,188,194,195,196,197,198,199,202,203,206,247,248,249,250,],[-131,156,-81,-82,-83,-116,-131,-131,-131,-131,-112,-115,-131,-98,-131,-105,-111,-114,-115,-113,-117,-118,-119,-120,-121,-97,-101,-104,-108,-99,-100,-106,-107,]),'TO_K':([175,],[212,]),'ELSE_K':([261,272,273,],[-131,-66,285,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,8,18,21,22,23,28,29,42,44,45,46,50,58,60,67,68,78,79,81,82,83,106,111,115,118,119,120,125,126,127,129,131,134,140,141,144,149,151,163,165,169,173,180,183,200,201,204,205,209,214,233,245,252,255,259,261,264,265,268,270,274,275,279,295,296,],[5,14,27,31,31,31,38,40,49,53,53,57,61,49,61,93,96,102,104,107,109,109,135,139,145,150,153,157,164,166,168,170,174,53,182,184,187,190,150,202,206,208,174,218,222,226,228,230,232,235,242,174,260,174,260,14,272,174,14,282,284,287,289,294,282,174,]),'BLOCK':([6,],[7,]),'VAR_BLOCK':([6,],[8,]),'PROC_BLOCK':([8,],[10,]),'PROC_DECL':([8,259,265,],[11,269,277,]),'PROC_DECL_RETURN':([8,259,265,],[12,12,12,]),'PROC_DECL_VOID':([8,259,265,],[13,13,13,]),'PRINCIPAL_BLOCK':([10,],[17,]),'TYPE':([15,16,44,45,46,134,215,279,],[19,25,51,51,25,51,244,244,]),'VAR_DECL':([16,46,],[24,56,]),'MAIN_NEURAL':([18,],[26,]),'NEURAL_TYPE':([21,22,23,],[30,32,33,]),'neural_proc_return_id':([28,],[37,]),'neural_proc_void_id':([29,],[39,]),'VAR_LIST':([35,],[41,]),'VAR_LIST2':([42,58,],[47,84,]),'PARAM_DECL':([44,45,134,],[52,54,176,]),'VAR_DECL_R':([46,],[55,]),'PRINCIPAL_BODY':([50,60,],[59,87,]),'STATEMENT':([50,60,131,173,177,179,214,233,252,264,296,],[60,60,173,173,214,214,214,173,173,173,173,]),'ASSIGN':([50,60,131,173,177,179,214,233,252,264,296,],[62,62,62,62,62,62,62,62,62,62,62,]),'FUNC_CALL':([50,60,131,173,177,179,214,233,252,264,296,],[63,63,63,63,63,63,63,63,63,63,63,]),'READ':([50,60,131,173,177,179,214,233,252,264,296,],[64,64,64,64,64,64,64,64,64,64,64,]),'WRITE':([50,60,131,173,177,179,214,233,252,264,296,],[65,65,65,65,65,65,65,65,65,65,65,]),'FLOW':([50,60,131,173,177,179,214,233,252,264,296,],[66,66,66,66,66,66,66,66,66,66,66,]),'VAR':([50,60,131,173,177,179,214,233,252,264,296,],[67,67,67,67,67,67,67,67,67,67,67,]),'DECISION':([50,60,131,173,177,179,214,233,252,264,296,],[71,71,71,71,71,71,71,71,71,71,71,]),'LOOP':([50,60,131,173,177,179,214,233,252,264,296,],[72,72,72,72,72,72,72,72,72,72,72,]),'ARRAY':([50,60,131,173,177,179,214,233,252,264,296,],[73,73,73,73,73,73,73,73,73,73,73,]),'WHILE_LOOP':([50,60,131,173,177,179,214,233,252,264,296,],[75,75,75,75,75,75,75,75,75,75,75,]),'DO_WHILE_LOOP':([50,60,131,173,177,179,214,233,252,264,296,],[76,76,76,76,76,76,76,76,76,76,76,]),'FOR_LOOP':([50,60,131,173,177,179,214,233,252,264,296,],[77,77,77,77,77,77,77,77,77,77,77,]),'PRINCIPAL_BODY_R':([60,],[86,]),'ASSIGN_VAR_N':([67,],[92,]),'PRE_VERIFY':([68,],[94,]),'WHILE_PREV_NEURAL':([78,],[101,]),'DW_PREV_NEURAL':([79,],[103,]),'neuro':([81,],[106,]),'neural_param_decl':([82,83,],[108,110,]),'ID_LIST':([97,186,],[114,223,]),'WRITE_LIST':([98,189,],[117,224,]),'H_EXPRESSION':([98,99,112,116,130,138,155,156,189,221,253,256,],[118,128,141,146,171,180,192,193,118,141,263,266,]),'CONSTANT':([98,99,112,116,130,138,155,156,158,159,160,161,162,189,221,225,227,229,231,253,256,],[119,129,129,129,129,129,129,129,129,129,129,129,129,119,129,129,129,129,129,129,129,]),'S_EXPRESSION':([98,99,112,116,130,138,155,156,189,221,253,256,],[120,120,120,120,120,120,120,120,120,120,120,120,]),'EXPRESSION':([98,99,112,116,130,138,155,156,158,159,160,161,162,189,221,225,227,253,256,],[124,124,124,124,124,124,124,124,194,195,196,197,198,124,124,247,248,124,124,]),'TERM':([98,99,112,116,130,138,155,156,158,159,160,161,162,189,221,225,227,229,231,253,256,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,249,250,125,125,]),'FACTOR':([98,99,112,116,130,138,155,156,158,159,160,161,162,189,221,225,227,229,231,253,256,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'PARAM_DECL_R':([106,],[133,]),'EQUALS_NEURAL':([111,],[138,]),'EXP_LIST':([112,221,],[140,246,]),'READ_NEURAL':([115,],[144,]),'WRITE_LIST_R':([118,151,],[148,191,]),'WRITE_NEURAL':([118,151,],[149,149,]),'CONSTANT_WRITE_N':([119,],[151,]),'NEURAL_CNT_FACT':([119,129,],[152,152,]),'H_EXPRESSION_R':([120,],[154,]),'NEURAL_EXPRESSION':([125,],[163,]),'NEURAL_TERM':([126,],[165,]),'NEURAL_ID_FAC':([127,],[167,]),'STATEMENT_R':([131,173,233,252,264,296,],[172,211,251,262,276,298,]),'FN_VARBLOCK':([136,137,],[177,179,]),'POST_VERIFY':([140,],[181,]),'EXP_NEURAL':([141,],[183,]),'ID_LIST_R':([144,],[185,]),'EXPRESSION_R':([163,],[199,]),'TERM_R':([165,],[203,]),'EXP_RESULT_NEURAL':([169,],[207,]),'PROC_BODY':([177,179,214,],[213,216,241,]),'ASSI_H_EXP_NEURAL':([180,],[217,]),'EXP_LIST_2':([183,],[220,]),'NEURAL_PLUS':([200,],[225,]),'NEURAL_MINUS':([201,],[227,]),'NEURAL_TIMES':([204,],[229,]),'NEURAL_DIVIDE':([205,],[231,]),'WHILE_POST_NEURAL':([209,],[234,]),'RETURN':([213,],[238,]),'PROC_BODY_R':([214,],[240,]),'LS_VARDECL':([215,279,],[243,293,]),'POST_FUNC':([245,255,],[259,265,]),'FNVAR_LS':([258,],[267,]),'DECISION_ALT':([261,],[270,]),'ELSE':([261,],[271,]),'ELSE_NEURAL':([261,],[273,]),'FNVAR_LS2':([268,295,],[280,297,]),'DECISION_END_NEURAL':([270,],[283,]),'WHILE_END_NEURAL':([274,],[286,]),'DW_END_NEURAL':([275,],[288,]),'LS_VARDECL_R':([279,],[292,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK','PROGRAM',5,'p_program','new.py',183),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','new.py',188),
  ('BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK','BLOCK',3,'p_block','new.py',202),
  ('VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND','VAR_BLOCK',4,'p_var_block','new.py',205),
  ('VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R','VAR_DECL',5,'p_var_decl','new.py',208),
  ('VAR_DECL_R -> VAR_DECL','VAR_DECL_R',1,'p_var_decl_r','new.py',211),
  ('VAR_DECL_R -> EMPTY','VAR_DECL_R',1,'p_var_decl_r','new.py',212),
  ('VAR_LIST -> ID VAR_LIST2','VAR_LIST',2,'p_var_list','new.py',215),
  ('VAR_LIST2 -> COMMA ID VAR_LIST2','VAR_LIST2',3,'p_var_list2','new.py',219),
  ('VAR_LIST2 -> EMPTY','VAR_LIST2',1,'p_var_list2','new.py',220),
  ('TYPE -> INT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',246),
  ('TYPE -> FLOAT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',247),
  ('TYPE -> STRING_K NEURAL_TYPE','TYPE',2,'p_type','new.py',248),
  ('NEURAL_TYPE -> EMPTY','NEURAL_TYPE',1,'p_neural_type','new.py',255),
  ('PROC_BLOCK -> PROC_DECL','PROC_BLOCK',1,'p_proc_block','new.py',258),
  ('PROC_DECL -> PROC_DECL_RETURN','PROC_DECL',1,'p_proc_decl','new.py',261),
  ('PROC_DECL -> PROC_DECL_VOID','PROC_DECL',1,'p_proc_decl','new.py',262),
  ('PROC_DECL -> EMPTY','PROC_DECL',1,'p_proc_decl','new.py',263),
  ('PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_VOID',14,'p_proc_decl_void','new.py',267),
  ('neural_proc_void_id -> EMPTY','neural_proc_void_id',1,'p_neural_proc_void_id','new.py',272),
  ('PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_RETURN',15,'p_proc_decl_return','new.py',286),
  ('POST_FUNC -> EMPTY','POST_FUNC',1,'p_post_func','new.py',291),
  ('neural_proc_return_id -> EMPTY','neural_proc_return_id',1,'p_neural_proc_return_id','new.py',298),
  ('neural_param_decl -> EMPTY','neural_param_decl',1,'p_neural_param_decl','new.py',315),
  ('PARAM_DECL -> TYPE ID neuro PARAM_DECL_R','PARAM_DECL',4,'p_param_decl','new.py',318),
  ('PARAM_DECL -> EMPTY','PARAM_DECL',1,'p_param_decl','new.py',319),
  ('neuro -> EMPTY','neuro',1,'p_neuro','new.py',324),
  ('PARAM_DECL_R -> COMMA PARAM_DECL','PARAM_DECL_R',2,'p_param_decl_r','new.py',342),
  ('PARAM_DECL_R -> EMPTY','PARAM_DECL_R',1,'p_param_decl_r','new.py',343),
  ('PROC_BODY -> STATEMENT PROC_BODY_R','PROC_BODY',2,'p_proc_body','new.py',346),
  ('FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND','FN_VARBLOCK',4,'p_fn_varblock','new.py',349),
  ('LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R','LS_VARDECL',5,'p_ls_vardecl','new.py',360),
  ('LS_VARDECL_R -> LS_VARDECL','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',364),
  ('LS_VARDECL_R -> EMPTY','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',365),
  ('FNVAR_LS -> ID FNVAR_LS2','FNVAR_LS',2,'p_fnvar_ls','new.py',369),
  ('FNVAR_LS2 -> COMMA ID FNVAR_LS2','FNVAR_LS2',3,'p_fnvar_ls2','new.py',373),
  ('FNVAR_LS2 -> EMPTY','FNVAR_LS2',1,'p_fnvar_ls2','new.py',374),
  ('PROC_BODY_R -> PROC_BODY','PROC_BODY_R',1,'p_proc_body_r','new.py',394),
  ('PROC_BODY_R -> EMPTY','PROC_BODY_R',1,'p_proc_body_r','new.py',395),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','new.py',398),
  ('STATEMENT -> FUNC_CALL SEMICOLON','STATEMENT',2,'p_statement','new.py',399),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','new.py',400),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','new.py',401),
  ('STATEMENT -> FLOW','STATEMENT',1,'p_statement','new.py',402),
  ('STATEMENT_R -> STATEMENT STATEMENT_R','STATEMENT_R',2,'p_statement_r','new.py',407),
  ('STATEMENT_R -> EMPTY','STATEMENT_R',1,'p_statement_r','new.py',408),
  ('FLOW -> DECISION','FLOW',1,'p_flow','new.py',411),
  ('FLOW -> LOOP','FLOW',1,'p_flow','new.py',412),
  ('LOOP -> WHILE_LOOP','LOOP',1,'p_loop','new.py',415),
  ('LOOP -> DO_WHILE_LOOP SEMICOLON','LOOP',2,'p_loop','new.py',416),
  ('LOOP -> FOR_LOOP','LOOP',1,'p_loop','new.py',417),
  ('DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL','DO_WHILE_LOOP',10,'p_do_while_loop','new.py',420),
  ('DW_PREV_NEURAL -> EMPTY','DW_PREV_NEURAL',1,'p_dw_prev_neural','new.py',424),
  ('DW_END_NEURAL -> EMPTY','DW_END_NEURAL',1,'p_dw_end_neural','new.py',429),
  ('WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL','WHILE_LOOP',10,'p_while_loop','new.py',440),
  ('WHILE_PREV_NEURAL -> EMPTY','WHILE_PREV_NEURAL',1,'p_while_prev_neural','new.py',444),
  ('WHILE_POST_NEURAL -> EMPTY','WHILE_POST_NEURAL',1,'p_while_post_neural','new.py',449),
  ('WHILE_END_NEURAL -> EMPTY','WHILE_END_NEURAL',1,'p_while_end_neural','new.py',461),
  ('FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND','FOR_LOOP',10,'p_for_loop','new.py',471),
  ('DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL','DECISION',10,'p_decision','new.py',474),
  ('EXP_RESULT_NEURAL -> EMPTY','EXP_RESULT_NEURAL',1,'p_exp_result_neural','new.py',477),
  ('DECISION_END_NEURAL -> EMPTY','DECISION_END_NEURAL',1,'p_decision_end_neural','new.py',489),
  ('DECISION_ALT -> ELSE','DECISION_ALT',1,'p_decision_alt','new.py',494),
  ('DECISION_ALT -> EMPTY','DECISION_ALT',1,'p_decision_alt','new.py',495),
  ('ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND','ELSE',5,'p_else','new.py',498),
  ('ELSE_NEURAL -> EMPTY','ELSE_NEURAL',1,'p_else_neural','new.py',502),
  ('ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL','ASSIGN',6,'p_assign','new.py',510),
  ('ASSI_H_EXP_NEURAL -> EMPTY','ASSI_H_EXP_NEURAL',1,'p_assi_h_exp_neural','new.py',513),
  ('EQUALS_NEURAL -> EMPTY','EQUALS_NEURAL',1,'p_equals_neural','new.py',538),
  ('ASSIGN_VAR_N -> EMPTY','ASSIGN_VAR_N',1,'p_assing_var_n','new.py',542),
  ('VAR -> ID','VAR',1,'p_var','new.py',570),
  ('VAR -> ARRAY','VAR',1,'p_var','new.py',571),
  ('ARRAY -> ID LBRACE INT RBRACE','ARRAY',4,'p_array','new.py',575),
  ('FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN','FUNC_CALL',6,'p_func_call','new.py',578),
  ('POST_VERIFY -> EMPTY','POST_VERIFY',1,'p_post_verify','new.py',582),
  ('PRE_VERIFY -> EMPTY','PRE_VERIFY',1,'p_pre_verify','new.py',604),
  ('EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2','EXP_LIST',3,'p_exp_list','new.py',616),
  ('EXP_NEURAL -> EMPTY','EXP_NEURAL',1,'p_exp_neural','new.py',620),
  ('EXP_LIST_2 -> COMMA EXP_LIST','EXP_LIST_2',2,'p_exp_list_2','new.py',635),
  ('EXP_LIST_2 -> EMPTY','EXP_LIST_2',1,'p_exp_list_2','new.py',636),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','new.py',640),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','new.py',641),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','new.py',642),
  ('READ -> READ_K LPAREN ID_LIST RPAREN','READ',4,'p_read','new.py',647),
  ('ID_LIST -> ID READ_NEURAL ID_LIST_R','ID_LIST',3,'p_id_list','new.py',650),
  ('READ_NEURAL -> EMPTY','READ_NEURAL',1,'p_read_neural','new.py',653),
  ('ID_LIST_R -> COMMA ID_LIST','ID_LIST_R',2,'p_id_list_r','new.py',658),
  ('ID_LIST_R -> EMPTY','ID_LIST_R',1,'p_id_list_r','new.py',659),
  ('WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN','WRITE',4,'p_write','new.py',662),
  ('WRITE_LIST -> H_EXPRESSION WRITE_LIST_R','WRITE_LIST',2,'p_write_list','new.py',665),
  ('WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R','WRITE_LIST',3,'p_write_list','new.py',666),
  ('CONSTANT_WRITE_N -> EMPTY','CONSTANT_WRITE_N',1,'p_constant_write_n','new.py',669),
  ('WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST','WRITE_LIST_R',3,'p_write_list_r','new.py',676),
  ('WRITE_LIST_R -> WRITE_NEURAL EMPTY','WRITE_LIST_R',2,'p_write_list_r','new.py',677),
  ('WRITE_NEURAL -> EMPTY','WRITE_NEURAL',1,'p_write_neural','new.py',680),
  ('RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','new.py',687),
  ('EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R','EXPRESSION',3,'p_expression','new.py',691),
  ('NEURAL_EXPRESSION -> EMPTY','NEURAL_EXPRESSION',1,'p_neural_expression','new.py',696),
  ('EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',725),
  ('EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',726),
  ('EXPRESSION_R -> EMPTY','EXPRESSION_R',1,'p_expression_r','new.py',727),
  ('NEURAL_PLUS -> EMPTY','NEURAL_PLUS',1,'p_neural_plus','new.py',731),
  ('NEURAL_MINUS -> EMPTY','NEURAL_MINUS',1,'p_neural_minus','new.py',737),
  ('TERM -> FACTOR NEURAL_TERM TERM_R','TERM',3,'p_term','new.py',742),
  ('NEURAL_TERM -> EMPTY','NEURAL_TERM',1,'p_neural_term','new.py',746),
  ('TERM_R -> TIMES NEURAL_TIMES TERM','TERM_R',3,'p_term_r','new.py',774),
  ('TERM_R -> DIVIDE NEURAL_DIVIDE TERM','TERM_R',3,'p_term_r','new.py',775),
  ('TERM_R -> EMPTY','TERM_R',1,'p_term_r','new.py',776),
  ('NEURAL_TIMES -> EMPTY','NEURAL_TIMES',1,'p_neural_times','new.py',780),
  ('NEURAL_DIVIDE -> EMPTY','NEURAL_DIVIDE',1,'p_neural_divide','new.py',785),
  ('FACTOR -> ID NEURAL_ID_FAC','FACTOR',2,'p_factor_','new.py',790),
  ('FACTOR -> CONSTANT NEURAL_CNT_FACT','FACTOR',2,'p_factor_','new.py',791),
  ('FACTOR -> LPAREN H_EXPRESSION RPAREN','FACTOR',3,'p_factor_','new.py',792),
  ('NEURAL_ID_FAC -> EMPTY','NEURAL_ID_FAC',1,'p_neural_id_fac','new.py',796),
  ('NEURAL_CNT_FACT -> EMPTY','NEURAL_CNT_FACT',1,'p_neural_cnt_fact','new.py',820),
  ('S_EXPRESSION -> EXPRESSION','S_EXPRESSION',1,'p_s_expression','new.py',846),
  ('S_EXPRESSION -> EXPRESSION GT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',847),
  ('S_EXPRESSION -> EXPRESSION LT EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',848),
  ('S_EXPRESSION -> EXPRESSION GTE EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',849),
  ('S_EXPRESSION -> EXPRESSION LTE EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',850),
  ('S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION','S_EXPRESSION',3,'p_s_expression','new.py',851),
  ('H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R','H_EXPRESSION',2,'p_h_expression','new.py',855),
  ('H_EXPRESSION_R -> OR H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',859),
  ('H_EXPRESSION_R -> AND H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',860),
  ('H_EXPRESSION_R -> EMPTY','H_EXPRESSION_R',1,'p_h_expression_r','new.py',861),
  ('PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND','PRINCIPAL_BLOCK',7,'p_principal_block','new.py',865),
  ('MAIN_NEURAL -> EMPTY','MAIN_NEURAL',1,'p_main_neural','new.py',869),
  ('PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R','PRINCIPAL_BODY',2,'p_principal_body','new.py',879),
  ('PRINCIPAL_BODY -> EMPTY','PRINCIPAL_BODY',1,'p_principal_body','new.py',880),
  ('PRINCIPAL_BODY_R -> PRINCIPAL_BODY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',884),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','new.py',887),
]
