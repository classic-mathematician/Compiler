
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALSleftLTLTEGTGTEleftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENAND BLOCKEND BLOCKSTART COLON COMMA COMMENT DIVIDE DOUBLEEQUAL DO_K ELSE_K EQUALS FLOAT FLOAT_K FOR_K FUNCTION_K GT GTE ID IF_K INT INT_K LBRACE LPAREN LT LTE MAIN_K MINUS OR PLUS PROGRAM_K RBRACE READ_K RETURN_K RPAREN SEMICOLON STRING STRING_K TIMES TO_K VARS_K VOID_K WHILE_K WRITE_KPROGRAM : PROGRAM_K ID neural_program_id SEMICOLON BLOCKneural_program_id : EMPTYBLOCK : VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCKVAR_BLOCK : VARS_K BLOCKSTART VAR_DECL BLOCKENDVAR_DECL : TYPE COLON VAR_LIST SEMICOLON VAR_DECL_RVAR_DECL_R : VAR_DECL\n                  | EMPTYVAR_LIST : VAR VAR_LIST2VAR_LIST2 : COMMA VAR VAR_LIST2\n                 | EMPTYTYPE : INT_K NEURAL_TYPE\n            | FLOAT_K NEURAL_TYPE\n            | STRING_K NEURAL_TYPENEURAL_TYPE : EMPTYPROC_BLOCK : PROC_DECLPROC_DECL : PROC_DECL_RETURN\n                 | PROC_DECL_VOID\n                 | EMPTYPROC_DECL_VOID : FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECLneural_proc_void_id : EMPTYPROC_DECL_RETURN : FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECLPOST_FUNC : EMPTYneural_proc_return_id : EMPTYneural_param_decl : EMPTYPARAM_DECL : TYPE VAR neuro PARAM_DECL_R\n                  | EMPTYneuro : EMPTYPARAM_DECL_R : COMMA PARAM_DECL\n                    | EMPTYPROC_BODY : STATEMENT PROC_BODY_RFN_VARBLOCK : VARS_K BLOCKSTART LS_VARDECL BLOCKENDLS_VARDECL : TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_RLS_VARDECL_R : LS_VARDECL\n                    | EMPTYFNVAR_LS : VAR FNVAR_LS2FNVAR_LS2 : COMMA FNVAR_LS\n                 | EMPTYPROC_BODY_R : PROC_BODY\n                   | EMPTYSTATEMENT : ASSIGN SEMICOLON\n                 | ASSIGN1 SEMICOLON\n                 | FUNC_CALL SEMICOLON\n                 | READ SEMICOLON\n                 | WRITE SEMICOLON\n                 | FLOW\n                STATEMENT_R : STATEMENT STATEMENT_R\n                   | EMPTYFLOW : DECISION\n            | LOOPLOOP : WHILE_LOOP\n            | DO_WHILE_LOOP SEMICOLON\n            | FOR_LOOPDO_WHILE_LOOP : DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURALDW_PREV_NEURAL : EMPTYDW_END_NEURAL : EMPTYWHILE_LOOP : WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURALWHILE_PREV_NEURAL : EMPTYWHILE_POST_NEURAL : EMPTYWHILE_END_NEURAL : EMPTYFOR_LOOP : FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKENDDECISION : IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURALEXP_RESULT_NEURAL : EMPTYDECISION_END_NEURAL : EMPTYDECISION_ALT : ELSE\n                    | EMPTYELSE : ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKENDELSE_NEURAL : EMPTYASSIGN : VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURALASSIGN1 : ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURALN : EMPTYASSI_H_EXP_NEURAL : EMPTYEQUALS_NEURAL : EMPTYASSIGN_VAR_N : EMPTYARR_AC : ID ARR_ID_NP1 DIM_ACARR_ID_NP1 : EMPTYDIM_AC : LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_RDIM_AC_PREV : EMPTYDIM_AC_R : DIM_AC\n                | EMPTYVAR : ID\n           | ARRAYARRAY : ID ARR_ID_NP DIMARR_ID_NP : EMPTYDIM : LBRACE INT LIM_NP RBRACE DIM_RLIM_NP : EMPTYDIM_R : DIM\n             | EMPTYFUNC_CALL : ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPARENPOST_VERIFY : EMPTYPRE_VERIFY : EMPTYEXP_LIST : H_EXPRESSION EXP_NEURAL EXP_LIST_2EXP_NEURAL : EMPTYEXP_LIST_2 : COMMA EXP_LIST\n                  | EMPTYCONSTANT : INT\n                | FLOAT\n                | STRINGREAD : READ_K LPAREN ID_LIST RPARENID_LIST : ID READ_NEURAL ID_LIST_RREAD_NEURAL : EMPTYID_LIST_R : COMMA ID_LIST\n                 | EMPTYWRITE : WRITE_K LPAREN WRITE_LIST RPARENWRITE_LIST : H_EXPRESSION WRITE_LIST_R\n                  | CONSTANT CONSTANT_WRITE_N WRITE_LIST_RCONSTANT_WRITE_N : EMPTYWRITE_LIST_R : WRITE_NEURAL COMMA WRITE_LIST\n                    | WRITE_NEURAL EMPTYWRITE_NEURAL : EMPTYRETURN : RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLONEXPRESSION : TERM NEURAL_EXPRESSION EXPRESSION_RNEURAL_EXPRESSION : EMPTYEXPRESSION_R : PLUS NEURAL_PLUS EXPRESSION\n                    | MINUS NEURAL_MINUS EXPRESSION\n                    | EMPTYNEURAL_PLUS : EMPTYNEURAL_MINUS : EMPTYTERM : FACTOR NEURAL_TERM TERM_RNEURAL_TERM : EMPTYTERM_R : TIMES NEURAL_TIMES TERM\n              | DIVIDE NEURAL_DIVIDE TERM\n              | EMPTYNEURAL_TIMES : EMPTYNEURAL_DIVIDE : EMPTYFACTOR : ID NEURAL_ID_FAC\n              | CONSTANT NEURAL_CNT_FACT\n              | LPAREN H_EXPRESSION RPARENNEURAL_ID_FAC : EMPTYNEURAL_CNT_FACT : EMPTYS_EXPRESSION : EXPRESSION S_EXPRESSION_RNEURAL_EXP : EMPTYS_EXPRESSION_R : CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP\n                      | EMPTYNEURAL_CONDI : EMPTYCONDI : GT\n             | LT\n             | LTE\n             | GTE\n             | DOUBLEEQUAL\n             | AND\n             | ORH_EXPRESSION : S_EXPRESSION H_EXPRESSION_RH_EXPRESSION_R : OR H_EXPRESSION\n                      | AND H_EXPRESSION\n                      | EMPTYPRINCIPAL_BLOCK : MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKENDMAIN_NEURAL : EMPTYPRINCIPAL_BODY : STATEMENT PRINCIPAL_BODY_R\n                      | EMPTYPRINCIPAL_BODY_R : PRINCIPAL_BODYEMPTY : '
    
_lr_action_items = {'PROGRAM_K':([0,],[2,]),'$end':([1,7,17,93,],[0,-1,-3,-146,]),'ID':([2,19,20,21,22,23,30,31,32,33,35,50,54,55,66,73,79,80,82,84,87,96,97,98,99,100,107,108,109,110,123,124,125,127,130,144,145,153,154,155,171,172,175,177,178,179,180,181,182,183,194,198,200,213,216,221,222,224,225,228,229,238,246,252,253,254,255,256,257,258,259,260,284,285,288,289,290,293,296,302,303,304,306,313,315,316,318,319,322,328,330,],[3,28,29,-151,-151,-151,-11,-14,-12,-13,43,43,76,43,76,-45,-48,-49,-50,-52,115,-40,-41,-42,-43,-44,129,141,141,-51,-151,-151,141,141,141,141,76,141,-72,141,141,141,-151,-135,-136,-137,-138,-139,-140,-141,76,76,76,129,141,141,-134,-151,-151,-151,-151,76,141,141,-116,141,-117,141,-123,141,-124,76,76,141,141,-31,43,-151,76,-151,-64,-65,-151,43,-61,-63,-56,-59,-60,76,-66,]),'SEMICOLON':([3,4,5,41,42,43,44,49,51,62,63,68,69,70,71,72,83,91,134,135,136,137,138,139,140,141,143,152,159,163,168,170,173,174,176,184,185,186,187,188,189,191,201,202,203,204,205,215,219,220,223,226,227,230,241,242,243,244,251,277,278,279,280,281,282,299,300,307,310,312,314,320,321,327,],[-151,6,-2,48,-151,-80,-81,-8,-10,-151,-82,96,97,98,99,100,110,-9,-151,-95,-96,-97,-151,-151,-151,-151,-151,-151,-98,-103,-126,-142,-145,-130,-133,-151,-112,-151,-119,-125,-128,-129,-84,-86,-87,-151,-151,-127,-143,-144,-111,-115,-118,-122,-68,-71,-69,-88,-151,-132,-131,-113,-114,-120,-121,311,-151,-151,323,-35,-37,-53,-55,-36,]),'VARS_K':([6,150,151,],[9,199,199,]),'FUNCTION_K':([8,34,272,287,291,292,297,],[15,-4,-151,-151,15,-22,15,]),'MAIN_K':([8,10,11,12,13,14,34,272,287,291,292,297,301,309,],[-151,18,-15,-16,-17,-18,-4,-151,-151,-151,-22,-151,-19,-21,]),'BLOCKSTART':([9,45,86,89,90,113,114,118,119,120,190,199,231,232,233,261,262,286,317,],[16,54,-151,-151,-151,145,-54,150,-24,151,-151,239,260,-62,-151,284,-58,296,328,]),'VOID_K':([15,],[20,]),'INT_K':([15,16,46,47,48,148,239,311,],[21,21,21,21,21,21,21,21,]),'FLOAT_K':([15,16,46,47,48,148,239,311,],[22,22,22,22,22,22,22,22,]),'STRING_K':([15,16,46,47,48,148,239,311,],[23,23,23,23,23,23,23,23,]),'LPAREN':([18,26,27,28,29,37,38,39,40,76,77,78,81,85,104,106,108,109,111,112,123,124,125,127,130,144,153,154,155,171,172,175,177,178,179,180,181,182,183,216,221,222,224,225,228,229,246,252,253,254,255,256,257,258,259,263,266,285,288,],[-151,36,-147,-151,-151,46,-23,47,-20,-151,107,108,109,-151,125,-90,130,130,144,-57,-151,-151,130,130,130,130,130,-72,130,130,130,-151,-135,-136,-137,-138,-139,-140,-141,130,130,-134,-151,-151,-151,-151,130,130,-116,130,-117,130,-123,130,-124,285,288,130,130,]),'COLON':([21,22,23,25,30,31,32,33,271,],[-151,-151,-151,35,-11,-14,-12,-13,290,]),'BLOCKEND':([24,48,54,59,60,61,65,66,67,73,79,80,82,84,94,95,96,97,98,99,100,110,145,193,194,195,235,238,240,260,265,267,268,269,270,283,284,293,294,296,302,303,304,306,308,311,315,316,318,319,322,323,324,325,326,328,329,330,],[34,-151,-151,-5,-6,-7,93,-151,-149,-45,-48,-49,-50,-52,-148,-150,-40,-41,-42,-43,-44,-51,-151,234,-151,-47,-46,-151,272,-151,287,-30,-38,-39,289,293,-151,-151,306,-151,-151,-64,-65,-151,322,-151,-61,-63,-56,-59,-60,-110,-32,-33,-34,-151,330,-66,]),'RPAREN':([36,43,44,46,47,56,57,58,63,88,116,117,128,129,131,132,133,134,135,136,137,138,139,140,141,142,143,147,148,149,152,156,157,160,161,162,164,165,166,167,168,169,170,173,174,176,184,185,186,187,188,189,191,192,197,201,202,203,206,207,208,209,212,214,215,217,218,219,220,223,226,227,230,245,247,249,250,251,273,277,278,279,280,281,282,295,298,],[45,-80,-81,-151,-151,89,-26,90,-82,-151,-151,-27,159,-151,163,-151,-151,-151,-95,-96,-97,-151,-151,-151,-151,190,-151,-25,-151,-29,-151,-151,-151,-151,-100,215,-104,-151,-109,-151,-126,-106,-142,-145,-130,-133,-151,-112,-151,-119,-125,-128,-129,233,-28,-84,-86,-87,244,-89,-151,-92,-99,-102,-127,-108,-105,-143,-144,-111,-115,-118,-122,-91,-94,-101,-107,-151,-93,-132,-131,-113,-114,-120,-121,307,310,]),'COMMA':([42,43,44,62,63,88,116,117,129,132,133,134,135,136,137,138,139,140,141,143,152,157,160,161,165,166,167,168,169,170,173,174,176,184,185,186,187,188,189,191,201,202,203,208,209,215,219,220,223,226,227,230,251,277,278,279,280,281,282,300,],[50,-80,-81,50,-82,-151,148,-27,-151,-151,-151,-151,-95,-96,-97,-151,-151,-151,-151,-151,-151,-151,213,-100,216,-109,-151,-126,-106,-142,-145,-130,-133,-151,-112,-151,-119,-125,-128,-129,-84,-86,-87,246,-92,-127,-143,-144,-111,-115,-118,-122,-151,-132,-131,-113,-114,-120,-121,313,]),'LBRACE':([43,52,53,76,105,106,152,248,],[-151,64,-83,-151,127,-75,64,127,]),'EQUALS':([44,63,74,75,76,101,102,103,115,126,152,201,202,203,248,274,275,276,],[-81,-82,-151,-151,-80,123,-73,124,146,-74,-151,-84,-86,-87,-151,-76,-78,-79,]),'READ_K':([54,66,73,79,80,82,84,96,97,98,99,100,110,145,194,198,200,238,260,284,289,293,296,302,303,304,306,315,316,318,319,322,328,330,],[77,77,-45,-48,-49,-50,-52,-40,-41,-42,-43,-44,-51,77,77,77,77,77,77,77,-31,-151,77,-151,-64,-65,-151,-61,-63,-56,-59,-60,77,-66,]),'WRITE_K':([54,66,73,79,80,82,84,96,97,98,99,100,110,145,194,198,200,238,260,284,289,293,296,302,303,304,306,315,316,318,319,322,328,330,],[78,78,-45,-48,-49,-50,-52,-40,-41,-42,-43,-44,-51,78,78,78,78,78,78,78,-31,-151,78,-151,-64,-65,-151,-61,-63,-56,-59,-60,78,-66,]),'IF_K':([54,66,73,79,80,82,84,96,97,98,99,100,110,145,194,198,200,238,260,284,289,293,296,302,303,304,306,315,316,318,319,322,328,330,],[81,81,-45,-48,-49,-50,-52,-40,-41,-42,-43,-44,-51,81,81,81,81,81,81,81,-31,-151,81,-151,-64,-65,-151,-61,-63,-56,-59,-60,81,-66,]),'WHILE_K':([54,66,73,79,80,82,84,96,97,98,99,100,110,145,194,198,200,234,238,260,284,289,293,296,302,303,304,306,315,316,318,319,322,328,330,],[85,85,-45,-48,-49,-50,-52,-40,-41,-42,-43,-44,-51,85,85,85,85,263,85,85,85,-31,-151,85,-151,-64,-65,-151,-61,-63,-56,-59,-60,85,-66,]),'DO_K':([54,66,73,79,80,82,84,96,97,98,99,100,110,145,194,198,200,238,260,264,284,289,293,296,302,303,304,306,315,316,318,319,322,328,330,],[86,86,-45,-48,-49,-50,-52,-40,-41,-42,-43,-44,-51,86,86,86,86,86,86,286,86,-31,-151,86,-151,-64,-65,-151,-61,-63,-56,-59,-60,86,-66,]),'FOR_K':([54,66,73,79,80,82,84,96,97,98,99,100,110,145,194,198,200,238,260,284,289,293,296,302,303,304,306,315,316,318,319,322,328,330,],[87,87,-45,-48,-49,-50,-52,-40,-41,-42,-43,-44,-51,87,87,87,87,87,87,87,-31,-151,87,-151,-64,-65,-151,-61,-63,-56,-59,-60,87,-66,]),'INT':([64,108,109,123,124,125,127,130,144,146,153,154,155,171,172,175,177,178,179,180,181,182,183,216,221,222,224,225,228,229,236,246,252,253,254,255,256,257,258,259,285,288,],[92,135,135,-151,-151,135,135,135,135,196,135,-72,135,135,135,-151,-135,-136,-137,-138,-139,-140,-141,135,135,-134,-151,-151,-151,-151,264,135,135,-116,135,-117,135,-123,135,-124,135,135,]),'RETURN_K':([73,79,80,82,84,96,97,98,99,100,110,237,238,267,268,269,293,302,303,304,306,315,316,318,319,322,330,],[-45,-48,-49,-50,-52,-40,-41,-42,-43,-44,-51,266,-151,-30,-38,-39,-151,-151,-64,-65,-151,-61,-63,-56,-59,-60,-66,]),'RBRACE':([92,121,122,134,135,136,137,138,139,140,141,143,158,168,170,173,174,176,184,185,186,187,188,189,191,210,211,215,219,220,223,226,227,230,251,277,278,279,280,281,282,],[-151,152,-85,-151,-95,-96,-97,-151,-151,-151,-151,-151,-151,-126,-142,-145,-130,-133,-151,-112,-151,-119,-125,-128,-129,248,-77,-127,-143,-144,-111,-115,-118,-122,-151,-132,-131,-113,-114,-120,-121,]),'FLOAT':([108,109,123,124,125,127,130,144,153,154,155,171,172,175,177,178,179,180,181,182,183,216,221,222,224,225,228,229,246,252,253,254,255,256,257,258,259,285,288,],[136,136,-151,-151,136,136,136,136,136,-72,136,136,136,-151,-135,-136,-137,-138,-139,-140,-141,136,136,-134,-151,-151,-151,-151,136,136,-116,136,-117,136,-123,136,-124,136,136,]),'STRING':([108,109,123,124,125,127,130,144,153,154,155,171,172,175,177,178,179,180,181,182,183,216,221,222,224,225,228,229,246,252,253,254,255,256,257,258,259,285,288,],[137,137,-151,-151,137,137,137,137,137,-72,137,137,137,-151,-135,-136,-137,-138,-139,-140,-141,137,137,-134,-151,-151,-151,-151,137,137,-116,137,-117,137,-123,137,-124,137,137,]),'TIMES':([133,135,136,137,140,141,143,168,169,186,187,188,189,191,215,],[-151,-95,-96,-97,-151,-151,-151,-126,-129,228,-119,-125,-128,-129,-127,]),'DIVIDE':([133,135,136,137,140,141,143,168,169,186,187,188,189,191,215,],[-151,-95,-96,-97,-151,-151,-151,-126,-129,229,-119,-125,-128,-129,-127,]),'PLUS':([133,135,136,137,139,140,141,143,168,169,184,185,186,187,188,189,191,215,227,230,281,282,],[-151,-95,-96,-97,-151,-151,-151,-151,-126,-129,224,-112,-151,-119,-125,-128,-129,-127,-118,-122,-120,-121,]),'MINUS':([133,135,136,137,139,140,141,143,168,169,184,185,186,187,188,189,191,215,227,230,281,282,],[-151,-95,-96,-97,-151,-151,-151,-151,-126,-129,225,-112,-151,-119,-125,-128,-129,-127,-118,-122,-120,-121,]),'GT':([133,135,136,137,138,139,140,141,143,168,169,184,185,186,187,188,189,191,215,223,226,227,230,279,280,281,282,],[-151,-95,-96,-97,177,-151,-151,-151,-151,-126,-129,-151,-112,-151,-119,-125,-128,-129,-127,-111,-115,-118,-122,-113,-114,-120,-121,]),'LT':([133,135,136,137,138,139,140,141,143,168,169,184,185,186,187,188,189,191,215,223,226,227,230,279,280,281,282,],[-151,-95,-96,-97,178,-151,-151,-151,-151,-126,-129,-151,-112,-151,-119,-125,-128,-129,-127,-111,-115,-118,-122,-113,-114,-120,-121,]),'LTE':([133,135,136,137,138,139,140,141,143,168,169,184,185,186,187,188,189,191,215,223,226,227,230,279,280,281,282,],[-151,-95,-96,-97,179,-151,-151,-151,-151,-126,-129,-151,-112,-151,-119,-125,-128,-129,-127,-111,-115,-118,-122,-113,-114,-120,-121,]),'GTE':([133,135,136,137,138,139,140,141,143,168,169,184,185,186,187,188,189,191,215,223,226,227,230,279,280,281,282,],[-151,-95,-96,-97,180,-151,-151,-151,-151,-126,-129,-151,-112,-151,-119,-125,-128,-129,-127,-111,-115,-118,-122,-113,-114,-120,-121,]),'DOUBLEEQUAL':([133,135,136,137,138,139,140,141,143,168,169,184,185,186,187,188,189,191,215,223,226,227,230,279,280,281,282,],[-151,-95,-96,-97,181,-151,-151,-151,-151,-126,-129,-151,-112,-151,-119,-125,-128,-129,-127,-111,-115,-118,-122,-113,-114,-120,-121,]),'AND':([133,134,135,136,137,138,139,140,141,143,168,169,174,176,184,185,186,187,188,189,191,215,223,226,227,230,251,277,278,279,280,281,282,],[-151,172,-95,-96,-97,182,-151,-151,-151,-151,-126,-129,-130,-133,-151,-112,-151,-119,-125,-128,-129,-127,-111,-115,-118,-122,-151,-132,-131,-113,-114,-120,-121,]),'OR':([133,134,135,136,137,138,139,140,141,143,168,169,174,176,184,185,186,187,188,189,191,215,223,226,227,230,251,277,278,279,280,281,282,],[-151,171,-95,-96,-97,183,-151,-151,-151,-151,-126,-129,-130,-133,-151,-112,-151,-119,-125,-128,-129,-127,-111,-115,-118,-122,-151,-132,-131,-113,-114,-120,-121,]),'TO_K':([196,],[236,]),'ELSE_K':([293,304,305,],[-151,-67,317,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,],[1,]),'neural_program_id':([3,],[4,]),'EMPTY':([3,8,18,21,22,23,28,29,42,43,46,47,48,54,62,66,74,75,76,85,86,88,89,90,92,116,123,124,129,132,133,134,138,139,140,141,143,145,148,152,156,157,158,160,165,167,175,184,186,190,194,204,205,208,224,225,228,229,233,238,248,251,260,272,284,287,291,293,296,297,300,302,306,307,311,328,],[5,14,27,31,31,31,38,40,51,53,57,57,61,67,51,67,102,102,106,112,114,117,119,119,122,149,154,154,161,166,169,173,176,185,187,189,191,195,57,203,207,209,211,214,217,166,222,226,230,232,195,242,242,247,253,255,257,259,262,269,276,278,195,292,195,292,14,304,195,14,314,316,319,321,326,195,]),'BLOCK':([6,],[7,]),'VAR_BLOCK':([6,],[8,]),'PROC_BLOCK':([8,],[10,]),'PROC_DECL':([8,291,297,],[11,301,309,]),'PROC_DECL_RETURN':([8,291,297,],[12,12,12,]),'PROC_DECL_VOID':([8,291,297,],[13,13,13,]),'PRINCIPAL_BLOCK':([10,],[17,]),'TYPE':([15,16,46,47,48,148,239,311,],[19,25,55,55,25,55,271,271,]),'VAR_DECL':([16,48,],[24,60,]),'MAIN_NEURAL':([18,],[26,]),'NEURAL_TYPE':([21,22,23,],[30,32,33,]),'neural_proc_return_id':([28,],[37,]),'neural_proc_void_id':([29,],[39,]),'VAR_LIST':([35,],[41,]),'VAR':([35,50,54,55,66,145,194,198,200,238,260,284,290,296,313,328,],[42,62,74,88,74,74,74,74,74,74,74,74,300,74,300,74,]),'ARRAY':([35,50,54,55,66,145,194,198,200,238,260,284,290,296,313,328,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'VAR_LIST2':([42,62,],[49,91,]),'ARR_ID_NP':([43,76,],[52,52,]),'PARAM_DECL':([46,47,148,],[56,58,197,]),'VAR_DECL_R':([48,],[59,]),'DIM':([52,152,],[63,202,]),'PRINCIPAL_BODY':([54,66,],[65,95,]),'STATEMENT':([54,66,145,194,198,200,238,260,284,296,328,],[66,66,194,194,238,238,238,194,194,194,194,]),'ASSIGN':([54,66,145,194,198,200,238,260,284,296,328,],[68,68,68,68,68,68,68,68,68,68,68,]),'ASSIGN1':([54,66,145,194,198,200,238,260,284,296,328,],[69,69,69,69,69,69,69,69,69,69,69,]),'FUNC_CALL':([54,66,145,194,198,200,238,260,284,296,328,],[70,70,70,70,70,70,70,70,70,70,70,]),'READ':([54,66,145,194,198,200,238,260,284,296,328,],[71,71,71,71,71,71,71,71,71,71,71,]),'WRITE':([54,66,145,194,198,200,238,260,284,296,328,],[72,72,72,72,72,72,72,72,72,72,72,]),'FLOW':([54,66,145,194,198,200,238,260,284,296,328,],[73,73,73,73,73,73,73,73,73,73,73,]),'ARR_AC':([54,66,145,194,198,200,238,260,284,296,328,],[75,75,75,75,75,75,75,75,75,75,75,]),'DECISION':([54,66,145,194,198,200,238,260,284,296,328,],[79,79,79,79,79,79,79,79,79,79,79,]),'LOOP':([54,66,145,194,198,200,238,260,284,296,328,],[80,80,80,80,80,80,80,80,80,80,80,]),'WHILE_LOOP':([54,66,145,194,198,200,238,260,284,296,328,],[82,82,82,82,82,82,82,82,82,82,82,]),'DO_WHILE_LOOP':([54,66,145,194,198,200,238,260,284,296,328,],[83,83,83,83,83,83,83,83,83,83,83,]),'FOR_LOOP':([54,66,145,194,198,200,238,260,284,296,328,],[84,84,84,84,84,84,84,84,84,84,84,]),'PRINCIPAL_BODY_R':([66,],[94,]),'ASSIGN_VAR_N':([74,75,],[101,103,]),'PRE_VERIFY':([76,],[104,]),'ARR_ID_NP1':([76,],[105,]),'WHILE_PREV_NEURAL':([85,],[111,]),'DW_PREV_NEURAL':([86,],[113,]),'neuro':([88,],[116,]),'neural_param_decl':([89,90,],[118,120,]),'LIM_NP':([92,],[121,]),'DIM_AC':([105,248,],[126,275,]),'ID_LIST':([107,213,],[128,249,]),'WRITE_LIST':([108,216,],[131,250,]),'H_EXPRESSION':([108,109,125,127,130,144,153,155,171,172,216,246,285,288,],[132,142,157,158,162,192,204,205,219,220,132,157,295,298,]),'CONSTANT':([108,109,125,127,130,144,153,155,171,172,216,221,246,252,254,256,258,285,288,],[133,143,143,143,143,143,143,143,143,143,133,143,143,143,143,143,143,143,143,]),'S_EXPRESSION':([108,109,125,127,130,144,153,155,171,172,216,246,285,288,],[134,134,134,134,134,134,134,134,134,134,134,134,134,134,]),'EXPRESSION':([108,109,125,127,130,144,153,155,171,172,216,221,246,252,254,285,288,],[138,138,138,138,138,138,138,138,138,138,138,251,138,279,280,138,138,]),'TERM':([108,109,125,127,130,144,153,155,171,172,216,221,246,252,254,256,258,285,288,],[139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,281,282,139,139,]),'FACTOR':([108,109,125,127,130,144,153,155,171,172,216,221,246,252,254,256,258,285,288,],[140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,]),'PARAM_DECL_R':([116,],[147,]),'EQUALS_NEURAL':([123,124,],[153,155,]),'EXP_LIST':([125,246,],[156,273,]),'READ_NEURAL':([129,],[160,]),'WRITE_LIST_R':([132,167,],[164,218,]),'WRITE_NEURAL':([132,167,],[165,165,]),'CONSTANT_WRITE_N':([133,],[167,]),'NEURAL_CNT_FACT':([133,143,],[168,168,]),'H_EXPRESSION_R':([134,],[170,]),'S_EXPRESSION_R':([138,],[174,]),'CONDI':([138,],[175,]),'NEURAL_EXPRESSION':([139,],[184,]),'NEURAL_TERM':([140,],[186,]),'NEURAL_ID_FAC':([141,],[188,]),'STATEMENT_R':([145,194,260,284,296,328,],[193,235,283,294,308,329,]),'FN_VARBLOCK':([150,151,],[198,200,]),'DIM_R':([152,],[201,]),'POST_VERIFY':([156,],[206,]),'EXP_NEURAL':([157,],[208,]),'DIM_AC_PREV':([158,],[210,]),'ID_LIST_R':([160,],[212,]),'NEURAL_CONDI':([175,],[221,]),'EXPRESSION_R':([184,],[223,]),'TERM_R':([186,],[227,]),'EXP_RESULT_NEURAL':([190,],[231,]),'PROC_BODY':([198,200,238,],[237,240,268,]),'ASSI_H_EXP_NEURAL':([204,205,],[241,243,]),'EXP_LIST_2':([208,],[245,]),'NEURAL_PLUS':([224,],[252,]),'NEURAL_MINUS':([225,],[254,]),'NEURAL_TIMES':([228,],[256,]),'NEURAL_DIVIDE':([229,],[258,]),'WHILE_POST_NEURAL':([233,],[261,]),'RETURN':([237,],[265,]),'PROC_BODY_R':([238,],[267,]),'LS_VARDECL':([239,311,],[270,325,]),'DIM_AC_R':([248,],[274,]),'NEURAL_EXP':([251,],[277,]),'POST_FUNC':([272,287,],[291,297,]),'FNVAR_LS':([290,313,],[299,327,]),'DECISION_ALT':([293,],[302,]),'ELSE':([293,],[303,]),'ELSE_NEURAL':([293,],[305,]),'FNVAR_LS2':([300,],[312,]),'DECISION_END_NEURAL':([302,],[315,]),'WHILE_END_NEURAL':([306,],[318,]),'DW_END_NEURAL':([307,],[320,]),'LS_VARDECL_R':([311,],[324,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK','PROGRAM',5,'p_program','new.py',183),
  ('neural_program_id -> EMPTY','neural_program_id',1,'p_neural_program_id','new.py',188),
  ('BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK','BLOCK',3,'p_block','new.py',202),
  ('VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND','VAR_BLOCK',4,'p_var_block','new.py',205),
  ('VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R','VAR_DECL',5,'p_var_decl','new.py',208),
  ('VAR_DECL_R -> VAR_DECL','VAR_DECL_R',1,'p_var_decl_r','new.py',211),
  ('VAR_DECL_R -> EMPTY','VAR_DECL_R',1,'p_var_decl_r','new.py',212),
  ('VAR_LIST -> VAR VAR_LIST2','VAR_LIST',2,'p_var_list','new.py',215),
  ('VAR_LIST2 -> COMMA VAR VAR_LIST2','VAR_LIST2',3,'p_var_list2','new.py',219),
  ('VAR_LIST2 -> EMPTY','VAR_LIST2',1,'p_var_list2','new.py',220),
  ('TYPE -> INT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',249),
  ('TYPE -> FLOAT_K NEURAL_TYPE','TYPE',2,'p_type','new.py',250),
  ('TYPE -> STRING_K NEURAL_TYPE','TYPE',2,'p_type','new.py',251),
  ('NEURAL_TYPE -> EMPTY','NEURAL_TYPE',1,'p_neural_type','new.py',259),
  ('PROC_BLOCK -> PROC_DECL','PROC_BLOCK',1,'p_proc_block','new.py',262),
  ('PROC_DECL -> PROC_DECL_RETURN','PROC_DECL',1,'p_proc_decl','new.py',265),
  ('PROC_DECL -> PROC_DECL_VOID','PROC_DECL',1,'p_proc_decl','new.py',266),
  ('PROC_DECL -> EMPTY','PROC_DECL',1,'p_proc_decl','new.py',267),
  ('PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_VOID',14,'p_proc_decl_void','new.py',271),
  ('neural_proc_void_id -> EMPTY','neural_proc_void_id',1,'p_neural_proc_void_id','new.py',276),
  ('PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL','PROC_DECL_RETURN',15,'p_proc_decl_return','new.py',290),
  ('POST_FUNC -> EMPTY','POST_FUNC',1,'p_post_func','new.py',295),
  ('neural_proc_return_id -> EMPTY','neural_proc_return_id',1,'p_neural_proc_return_id','new.py',302),
  ('neural_param_decl -> EMPTY','neural_param_decl',1,'p_neural_param_decl','new.py',319),
  ('PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R','PARAM_DECL',4,'p_param_decl','new.py',322),
  ('PARAM_DECL -> EMPTY','PARAM_DECL',1,'p_param_decl','new.py',323),
  ('neuro -> EMPTY','neuro',1,'p_neuro','new.py',328),
  ('PARAM_DECL_R -> COMMA PARAM_DECL','PARAM_DECL_R',2,'p_param_decl_r','new.py',345),
  ('PARAM_DECL_R -> EMPTY','PARAM_DECL_R',1,'p_param_decl_r','new.py',346),
  ('PROC_BODY -> STATEMENT PROC_BODY_R','PROC_BODY',2,'p_proc_body','new.py',349),
  ('FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND','FN_VARBLOCK',4,'p_fn_varblock','new.py',352),
  ('LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R','LS_VARDECL',5,'p_ls_vardecl','new.py',363),
  ('LS_VARDECL_R -> LS_VARDECL','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',367),
  ('LS_VARDECL_R -> EMPTY','LS_VARDECL_R',1,'p_ls_vardecl_r','new.py',368),
  ('FNVAR_LS -> VAR FNVAR_LS2','FNVAR_LS',2,'p_fnvar_ls','new.py',372),
  ('FNVAR_LS2 -> COMMA FNVAR_LS','FNVAR_LS2',2,'p_fnvar_ls2','new.py',377),
  ('FNVAR_LS2 -> EMPTY','FNVAR_LS2',1,'p_fnvar_ls2','new.py',378),
  ('PROC_BODY_R -> PROC_BODY','PROC_BODY_R',1,'p_proc_body_r','new.py',398),
  ('PROC_BODY_R -> EMPTY','PROC_BODY_R',1,'p_proc_body_r','new.py',399),
  ('STATEMENT -> ASSIGN SEMICOLON','STATEMENT',2,'p_statement','new.py',403),
  ('STATEMENT -> ASSIGN1 SEMICOLON','STATEMENT',2,'p_statement','new.py',404),
  ('STATEMENT -> FUNC_CALL SEMICOLON','STATEMENT',2,'p_statement','new.py',405),
  ('STATEMENT -> READ SEMICOLON','STATEMENT',2,'p_statement','new.py',406),
  ('STATEMENT -> WRITE SEMICOLON','STATEMENT',2,'p_statement','new.py',407),
  ('STATEMENT -> FLOW','STATEMENT',1,'p_statement','new.py',408),
  ('STATEMENT_R -> STATEMENT STATEMENT_R','STATEMENT_R',2,'p_statement_r','new.py',413),
  ('STATEMENT_R -> EMPTY','STATEMENT_R',1,'p_statement_r','new.py',414),
  ('FLOW -> DECISION','FLOW',1,'p_flow','new.py',418),
  ('FLOW -> LOOP','FLOW',1,'p_flow','new.py',419),
  ('LOOP -> WHILE_LOOP','LOOP',1,'p_loop','new.py',423),
  ('LOOP -> DO_WHILE_LOOP SEMICOLON','LOOP',2,'p_loop','new.py',424),
  ('LOOP -> FOR_LOOP','LOOP',1,'p_loop','new.py',425),
  ('DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL','DO_WHILE_LOOP',10,'p_do_while_loop','new.py',429),
  ('DW_PREV_NEURAL -> EMPTY','DW_PREV_NEURAL',1,'p_dw_prev_neural','new.py',433),
  ('DW_END_NEURAL -> EMPTY','DW_END_NEURAL',1,'p_dw_end_neural','new.py',438),
  ('WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL','WHILE_LOOP',10,'p_while_loop','new.py',449),
  ('WHILE_PREV_NEURAL -> EMPTY','WHILE_PREV_NEURAL',1,'p_while_prev_neural','new.py',453),
  ('WHILE_POST_NEURAL -> EMPTY','WHILE_POST_NEURAL',1,'p_while_post_neural','new.py',458),
  ('WHILE_END_NEURAL -> EMPTY','WHILE_END_NEURAL',1,'p_while_end_neural','new.py',470),
  ('FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND','FOR_LOOP',10,'p_for_loop','new.py',480),
  ('DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL','DECISION',10,'p_decision','new.py',483),
  ('EXP_RESULT_NEURAL -> EMPTY','EXP_RESULT_NEURAL',1,'p_exp_result_neural','new.py',486),
  ('DECISION_END_NEURAL -> EMPTY','DECISION_END_NEURAL',1,'p_decision_end_neural','new.py',498),
  ('DECISION_ALT -> ELSE','DECISION_ALT',1,'p_decision_alt','new.py',503),
  ('DECISION_ALT -> EMPTY','DECISION_ALT',1,'p_decision_alt','new.py',504),
  ('ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND','ELSE',5,'p_else','new.py',507),
  ('ELSE_NEURAL -> EMPTY','ELSE_NEURAL',1,'p_else_neural','new.py',511),
  ('ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL','ASSIGN',6,'p_assign','new.py',519),
  ('ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL','ASSIGN1',6,'p_assign1','new.py',523),
  ('N -> EMPTY','N',1,'p_n','new.py',528),
  ('ASSI_H_EXP_NEURAL -> EMPTY','ASSI_H_EXP_NEURAL',1,'p_assi_h_exp_neural','new.py',532),
  ('EQUALS_NEURAL -> EMPTY','EQUALS_NEURAL',1,'p_equals_neural','new.py',557),
  ('ASSIGN_VAR_N -> EMPTY','ASSIGN_VAR_N',1,'p_assing_var_n','new.py',561),
  ('ARR_AC -> ID ARR_ID_NP1 DIM_AC','ARR_AC',3,'p_arr_ac','new.py',585),
  ('ARR_ID_NP1 -> EMPTY','ARR_ID_NP1',1,'p_arr_id_np1','new.py',636),
  ('DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R','DIM_AC',5,'p_dim_ac','new.py',670),
  ('DIM_AC_PREV -> EMPTY','DIM_AC_PREV',1,'p_dim_ac_prev','new.py',676),
  ('DIM_AC_R -> DIM_AC','DIM_AC_R',1,'p_dim_ac_r','new.py',686),
  ('DIM_AC_R -> EMPTY','DIM_AC_R',1,'p_dim_ac_r','new.py',687),
  ('VAR -> ID','VAR',1,'p_var','new.py',690),
  ('VAR -> ARRAY','VAR',1,'p_var','new.py',691),
  ('ARRAY -> ID ARR_ID_NP DIM','ARRAY',3,'p_array','new.py',699),
  ('ARR_ID_NP -> EMPTY','ARR_ID_NP',1,'p_arr_id_np','new.py',738),
  ('DIM -> LBRACE INT LIM_NP RBRACE DIM_R','DIM',5,'p_dim','new.py',749),
  ('LIM_NP -> EMPTY','LIM_NP',1,'p_lim_np','new.py',756),
  ('DIM_R -> DIM','DIM_R',1,'p_dim_r','new.py',766),
  ('DIM_R -> EMPTY','DIM_R',1,'p_dim_r','new.py',767),
  ('FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN','FUNC_CALL',6,'p_func_call','new.py',773),
  ('POST_VERIFY -> EMPTY','POST_VERIFY',1,'p_post_verify','new.py',777),
  ('PRE_VERIFY -> EMPTY','PRE_VERIFY',1,'p_pre_verify','new.py',799),
  ('EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2','EXP_LIST',3,'p_exp_list','new.py',819),
  ('EXP_NEURAL -> EMPTY','EXP_NEURAL',1,'p_exp_neural','new.py',823),
  ('EXP_LIST_2 -> COMMA EXP_LIST','EXP_LIST_2',2,'p_exp_list_2','new.py',838),
  ('EXP_LIST_2 -> EMPTY','EXP_LIST_2',1,'p_exp_list_2','new.py',839),
  ('CONSTANT -> INT','CONSTANT',1,'p_constant','new.py',843),
  ('CONSTANT -> FLOAT','CONSTANT',1,'p_constant','new.py',844),
  ('CONSTANT -> STRING','CONSTANT',1,'p_constant','new.py',845),
  ('READ -> READ_K LPAREN ID_LIST RPAREN','READ',4,'p_read','new.py',850),
  ('ID_LIST -> ID READ_NEURAL ID_LIST_R','ID_LIST',3,'p_id_list','new.py',853),
  ('READ_NEURAL -> EMPTY','READ_NEURAL',1,'p_read_neural','new.py',856),
  ('ID_LIST_R -> COMMA ID_LIST','ID_LIST_R',2,'p_id_list_r','new.py',861),
  ('ID_LIST_R -> EMPTY','ID_LIST_R',1,'p_id_list_r','new.py',862),
  ('WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN','WRITE',4,'p_write','new.py',865),
  ('WRITE_LIST -> H_EXPRESSION WRITE_LIST_R','WRITE_LIST',2,'p_write_list','new.py',868),
  ('WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R','WRITE_LIST',3,'p_write_list','new.py',869),
  ('CONSTANT_WRITE_N -> EMPTY','CONSTANT_WRITE_N',1,'p_constant_write_n','new.py',872),
  ('WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST','WRITE_LIST_R',3,'p_write_list_r','new.py',879),
  ('WRITE_LIST_R -> WRITE_NEURAL EMPTY','WRITE_LIST_R',2,'p_write_list_r','new.py',880),
  ('WRITE_NEURAL -> EMPTY','WRITE_NEURAL',1,'p_write_neural','new.py',883),
  ('RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON','RETURN',5,'p_return','new.py',890),
  ('EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R','EXPRESSION',3,'p_expression','new.py',895),
  ('NEURAL_EXPRESSION -> EMPTY','NEURAL_EXPRESSION',1,'p_neural_expression','new.py',900),
  ('EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',929),
  ('EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION','EXPRESSION_R',3,'p_expression_r','new.py',930),
  ('EXPRESSION_R -> EMPTY','EXPRESSION_R',1,'p_expression_r','new.py',931),
  ('NEURAL_PLUS -> EMPTY','NEURAL_PLUS',1,'p_neural_plus','new.py',935),
  ('NEURAL_MINUS -> EMPTY','NEURAL_MINUS',1,'p_neural_minus','new.py',941),
  ('TERM -> FACTOR NEURAL_TERM TERM_R','TERM',3,'p_term','new.py',946),
  ('NEURAL_TERM -> EMPTY','NEURAL_TERM',1,'p_neural_term','new.py',950),
  ('TERM_R -> TIMES NEURAL_TIMES TERM','TERM_R',3,'p_term_r','new.py',978),
  ('TERM_R -> DIVIDE NEURAL_DIVIDE TERM','TERM_R',3,'p_term_r','new.py',979),
  ('TERM_R -> EMPTY','TERM_R',1,'p_term_r','new.py',980),
  ('NEURAL_TIMES -> EMPTY','NEURAL_TIMES',1,'p_neural_times','new.py',984),
  ('NEURAL_DIVIDE -> EMPTY','NEURAL_DIVIDE',1,'p_neural_divide','new.py',989),
  ('FACTOR -> ID NEURAL_ID_FAC','FACTOR',2,'p_factor_','new.py',994),
  ('FACTOR -> CONSTANT NEURAL_CNT_FACT','FACTOR',2,'p_factor_','new.py',995),
  ('FACTOR -> LPAREN H_EXPRESSION RPAREN','FACTOR',3,'p_factor_','new.py',996),
  ('NEURAL_ID_FAC -> EMPTY','NEURAL_ID_FAC',1,'p_neural_id_fac','new.py',1000),
  ('NEURAL_CNT_FACT -> EMPTY','NEURAL_CNT_FACT',1,'p_neural_cnt_fact','new.py',1024),
  ('S_EXPRESSION -> EXPRESSION S_EXPRESSION_R','S_EXPRESSION',2,'p_s_expression','new.py',1050),
  ('NEURAL_EXP -> EMPTY','NEURAL_EXP',1,'p_neural_exp','new.py',1054),
  ('S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP','S_EXPRESSION_R',4,'p_s_expression_r','new.py',1080),
  ('S_EXPRESSION_R -> EMPTY','S_EXPRESSION_R',1,'p_s_expression_r','new.py',1081),
  ('NEURAL_CONDI -> EMPTY','NEURAL_CONDI',1,'p_neural_condi','new.py',1085),
  ('CONDI -> GT','CONDI',1,'p_condi','new.py',1092),
  ('CONDI -> LT','CONDI',1,'p_condi','new.py',1093),
  ('CONDI -> LTE','CONDI',1,'p_condi','new.py',1094),
  ('CONDI -> GTE','CONDI',1,'p_condi','new.py',1095),
  ('CONDI -> DOUBLEEQUAL','CONDI',1,'p_condi','new.py',1096),
  ('CONDI -> AND','CONDI',1,'p_condi','new.py',1097),
  ('CONDI -> OR','CONDI',1,'p_condi','new.py',1098),
  ('H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R','H_EXPRESSION',2,'p_h_expression','new.py',1107),
  ('H_EXPRESSION_R -> OR H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',1111),
  ('H_EXPRESSION_R -> AND H_EXPRESSION','H_EXPRESSION_R',2,'p_h_expression_r','new.py',1112),
  ('H_EXPRESSION_R -> EMPTY','H_EXPRESSION_R',1,'p_h_expression_r','new.py',1113),
  ('PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND','PRINCIPAL_BLOCK',7,'p_principal_block','new.py',1117),
  ('MAIN_NEURAL -> EMPTY','MAIN_NEURAL',1,'p_main_neural','new.py',1121),
  ('PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R','PRINCIPAL_BODY',2,'p_principal_body','new.py',1131),
  ('PRINCIPAL_BODY -> EMPTY','PRINCIPAL_BODY',1,'p_principal_body','new.py',1132),
  ('PRINCIPAL_BODY_R -> PRINCIPAL_BODY','PRINCIPAL_BODY_R',1,'p_principal_body_r','new.py',1136),
  ('EMPTY -> <empty>','EMPTY',0,'p_empty','new.py',1139),
]
