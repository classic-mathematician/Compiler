Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK
Rule 2     neural_program_id -> EMPTY
Rule 3     BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
Rule 4     VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND
Rule 5     VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
Rule 6     VAR_DECL_R -> VAR_DECL
Rule 7     VAR_DECL_R -> EMPTY
Rule 8     VAR_LIST -> VAR VAR_LIST2
Rule 9     VAR_LIST2 -> COMMA VAR VAR_LIST2
Rule 10    VAR_LIST2 -> EMPTY
Rule 11    TYPE -> INT_K NEURAL_TYPE
Rule 12    TYPE -> FLOAT_K NEURAL_TYPE
Rule 13    TYPE -> STRING_K NEURAL_TYPE
Rule 14    NEURAL_TYPE -> EMPTY
Rule 15    PROC_BLOCK -> PROC_DECL
Rule 16    PROC_DECL -> PROC_DECL_RETURN
Rule 17    PROC_DECL -> PROC_DECL_VOID
Rule 18    PROC_DECL -> EMPTY
Rule 19    PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
Rule 20    neural_proc_void_id -> EMPTY
Rule 21    PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
Rule 22    POST_FUNC -> EMPTY
Rule 23    neural_proc_return_id -> EMPTY
Rule 24    neural_param_decl -> EMPTY
Rule 25    PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R
Rule 26    PARAM_DECL -> EMPTY
Rule 27    neuro -> EMPTY
Rule 28    PARAM_DECL_R -> COMMA PARAM_DECL
Rule 29    PARAM_DECL_R -> EMPTY
Rule 30    PROC_BODY -> STATEMENT PROC_BODY_R
Rule 31    FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND
Rule 32    LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
Rule 33    LS_VARDECL_R -> LS_VARDECL
Rule 34    LS_VARDECL_R -> EMPTY
Rule 35    FNVAR_LS -> VAR FNVAR_LS2
Rule 36    FNVAR_LS2 -> COMMA FNVAR_LS
Rule 37    FNVAR_LS2 -> EMPTY
Rule 38    PROC_BODY_R -> PROC_BODY
Rule 39    PROC_BODY_R -> EMPTY
Rule 40    STATEMENT -> ASSIGN SEMICOLON
Rule 41    STATEMENT -> FUNC_CALL SEMICOLON
Rule 42    STATEMENT -> READ SEMICOLON
Rule 43    STATEMENT -> WRITE SEMICOLON
Rule 44    STATEMENT -> FLOW
Rule 45    STATEMENT_R -> STATEMENT STATEMENT_R
Rule 46    STATEMENT_R -> EMPTY
Rule 47    FLOW -> DECISION
Rule 48    FLOW -> LOOP
Rule 49    LOOP -> WHILE_LOOP
Rule 50    LOOP -> DO_WHILE_LOOP SEMICOLON
Rule 51    LOOP -> FOR_LOOP
Rule 52    DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
Rule 53    DW_PREV_NEURAL -> EMPTY
Rule 54    DW_END_NEURAL -> EMPTY
Rule 55    WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
Rule 56    WHILE_PREV_NEURAL -> EMPTY
Rule 57    WHILE_POST_NEURAL -> EMPTY
Rule 58    WHILE_END_NEURAL -> EMPTY
Rule 59    FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 60    DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
Rule 61    EXP_RESULT_NEURAL -> EMPTY
Rule 62    DECISION_END_NEURAL -> EMPTY
Rule 63    DECISION_ALT -> ELSE
Rule 64    DECISION_ALT -> EMPTY
Rule 65    ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 66    ELSE_NEURAL -> EMPTY
Rule 67    ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
Rule 68    ASSI_H_EXP_NEURAL -> EMPTY
Rule 69    EQUALS_NEURAL -> EMPTY
Rule 70    ASSIGN_VAR_N -> EMPTY
Rule 71    ARR_AC -> ID ARR_ID_NP DIM_AC
Rule 72    DIM_AC -> LBRACE H_EXPRESSION RBRACE DIM_AC_R
Rule 73    DIM_AC_R -> DIM_AC
Rule 74    DIM_AC_R -> EMPTY
Rule 75    VAR -> ID
Rule 76    VAR -> ARRAY
Rule 77    ARRAY -> ID ARR_ID_NP DIM
Rule 78    ARR_ID_NP -> EMPTY
Rule 79    DIM -> LBRACE INT LIM_NP RBRACE DIM_R
Rule 80    LIM_NP -> EMPTY
Rule 81    DIM_R -> DIM
Rule 82    DIM_R -> EMPTY
Rule 83    FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
Rule 84    POST_VERIFY -> EMPTY
Rule 85    PRE_VERIFY -> EMPTY
Rule 86    EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2
Rule 87    EXP_NEURAL -> EMPTY
Rule 88    EXP_LIST_2 -> COMMA EXP_LIST
Rule 89    EXP_LIST_2 -> EMPTY
Rule 90    CONSTANT -> INT
Rule 91    CONSTANT -> FLOAT
Rule 92    CONSTANT -> STRING
Rule 93    READ -> READ_K LPAREN ID_LIST RPAREN
Rule 94    ID_LIST -> ID READ_NEURAL ID_LIST_R
Rule 95    READ_NEURAL -> EMPTY
Rule 96    ID_LIST_R -> COMMA ID_LIST
Rule 97    ID_LIST_R -> EMPTY
Rule 98    WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN
Rule 99    WRITE_LIST -> H_EXPRESSION WRITE_LIST_R
Rule 100   WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
Rule 101   CONSTANT_WRITE_N -> EMPTY
Rule 102   WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST
Rule 103   WRITE_LIST_R -> WRITE_NEURAL EMPTY
Rule 104   WRITE_NEURAL -> EMPTY
Rule 105   RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
Rule 106   EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R
Rule 107   NEURAL_EXPRESSION -> EMPTY
Rule 108   EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION
Rule 109   EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION
Rule 110   EXPRESSION_R -> EMPTY
Rule 111   NEURAL_PLUS -> EMPTY
Rule 112   NEURAL_MINUS -> EMPTY
Rule 113   TERM -> FACTOR NEURAL_TERM TERM_R
Rule 114   NEURAL_TERM -> EMPTY
Rule 115   TERM_R -> TIMES NEURAL_TIMES TERM
Rule 116   TERM_R -> DIVIDE NEURAL_DIVIDE TERM
Rule 117   TERM_R -> EMPTY
Rule 118   NEURAL_TIMES -> EMPTY
Rule 119   NEURAL_DIVIDE -> EMPTY
Rule 120   FACTOR -> ID NEURAL_ID_FAC
Rule 121   FACTOR -> CONSTANT NEURAL_CNT_FACT
Rule 122   FACTOR -> LPAREN H_EXPRESSION RPAREN
Rule 123   NEURAL_ID_FAC -> EMPTY
Rule 124   NEURAL_CNT_FACT -> EMPTY
Rule 125   S_EXPRESSION -> EXPRESSION S_EXPRESSION_R
Rule 126   NEURAL_EXP -> EMPTY
Rule 127   S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP
Rule 128   S_EXPRESSION_R -> EMPTY
Rule 129   NEURAL_CONDI -> EMPTY
Rule 130   CONDI -> GT
Rule 131   CONDI -> LT
Rule 132   CONDI -> LTE
Rule 133   CONDI -> GTE
Rule 134   CONDI -> DOUBLEEQUAL
Rule 135   CONDI -> AND
Rule 136   CONDI -> OR
Rule 137   H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R
Rule 138   H_EXPRESSION_R -> OR H_EXPRESSION
Rule 139   H_EXPRESSION_R -> AND H_EXPRESSION
Rule 140   H_EXPRESSION_R -> EMPTY
Rule 141   PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
Rule 142   MAIN_NEURAL -> EMPTY
Rule 143   PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R
Rule 144   PRINCIPAL_BODY -> EMPTY
Rule 145   PRINCIPAL_BODY_R -> PRINCIPAL_BODY
Rule 146   EMPTY -> <empty>

Terminals, with rules where they appear

AND                  : 135 139
BLOCKEND             : 4 19 21 31 52 55 59 60 65 141
BLOCKSTART           : 4 19 21 31 52 55 59 60 65 141
COLON                : 5 32
COMMA                : 9 28 36 88 96 102
COMMENT              : 
DIVIDE               : 116
DOUBLEEQUAL          : 134
DO_K                 : 52 59
ELSE_K               : 65
EQUALS               : 59 67
FLOAT                : 91
FLOAT_K              : 12
FOR_K                : 59
FUNCTION_K           : 19 21
GT                   : 130
GTE                  : 133
ID                   : 1 19 21 59 71 75 77 83 94 120
IF_K                 : 60
INT                  : 59 59 79 90
INT_K                : 11
LBRACE               : 72 79
LPAREN               : 19 21 52 55 60 83 93 98 105 122 141
LT                   : 131
LTE                  : 132
MAIN_K               : 141
MINUS                : 109
OR                   : 136 138
PLUS                 : 108
PROGRAM_K            : 1
RBRACE               : 72 79
READ_K               : 93
RETURN_K             : 105
RPAREN               : 19 21 52 55 60 83 93 98 105 122 141
SEMICOLON            : 1 5 32 40 41 42 43 50 105
STRING               : 92
STRING_K             : 13
TIMES                : 115
TO_K                 : 59
VARS_K               : 4 31
VOID_K               : 19
WHILE_K              : 52 55
WRITE_K              : 98
error                : 

Nonterminals, with rules where they appear

ARRAY                : 76
ARR_AC               : 
ARR_ID_NP            : 71 77
ASSIGN               : 40
ASSIGN_VAR_N         : 67
ASSI_H_EXP_NEURAL    : 67
BLOCK                : 1
CONDI                : 127
CONSTANT             : 100 121
CONSTANT_WRITE_N     : 100
DECISION             : 47
DECISION_ALT         : 60
DECISION_END_NEURAL  : 60
DIM                  : 77 81
DIM_AC               : 71 73
DIM_AC_R             : 72
DIM_R                : 79
DO_WHILE_LOOP        : 50
DW_END_NEURAL        : 52
DW_PREV_NEURAL       : 52
ELSE                 : 63
ELSE_NEURAL          : 65
EMPTY                : 2 7 10 14 18 20 22 23 24 26 27 29 34 37 39 46 53 54 56 57 58 61 62 64 66 68 69 70 74 78 80 82 84 85 87 89 95 97 101 103 104 107 110 111 112 114 117 118 119 123 124 126 128 129 140 142 144
EQUALS_NEURAL        : 67
EXPRESSION           : 108 109 125 127
EXPRESSION_R         : 106
EXP_LIST             : 83 88
EXP_LIST_2           : 86
EXP_NEURAL           : 86
EXP_RESULT_NEURAL    : 60
FACTOR               : 113
FLOW                 : 44
FNVAR_LS             : 32 36
FNVAR_LS2            : 35
FN_VARBLOCK          : 19 21
FOR_LOOP             : 51
FUNC_CALL            : 41
H_EXPRESSION         : 52 55 60 67 72 86 99 105 122 138 139
H_EXPRESSION_R       : 137
ID_LIST              : 93 96
ID_LIST_R            : 94
LIM_NP               : 79
LOOP                 : 48
LS_VARDECL           : 31 33
LS_VARDECL_R         : 32
MAIN_NEURAL          : 141
NEURAL_CNT_FACT      : 121
NEURAL_CONDI         : 127
NEURAL_DIVIDE        : 116
NEURAL_EXP           : 127
NEURAL_EXPRESSION    : 106
NEURAL_ID_FAC        : 120
NEURAL_MINUS         : 109
NEURAL_PLUS          : 108
NEURAL_TERM          : 113
NEURAL_TIMES         : 115
NEURAL_TYPE          : 11 12 13
PARAM_DECL           : 19 21 28
PARAM_DECL_R         : 25
POST_FUNC            : 19 21
POST_VERIFY          : 83
PRE_VERIFY           : 83
PRINCIPAL_BLOCK      : 3
PRINCIPAL_BODY       : 141 145
PRINCIPAL_BODY_R     : 143
PROC_BLOCK           : 3
PROC_BODY            : 19 21 38
PROC_BODY_R          : 30
PROC_DECL            : 15 19 21
PROC_DECL_RETURN     : 16
PROC_DECL_VOID       : 17
PROGRAM              : 0
READ                 : 42
READ_NEURAL          : 94
RETURN               : 21
STATEMENT            : 30 45 143
STATEMENT_R          : 45 52 55 59 60 65
S_EXPRESSION         : 137
S_EXPRESSION_R       : 125
TERM                 : 106 115 116
TERM_R               : 113
TYPE                 : 5 21 25 32
VAR                  : 8 9 25 35 67
VAR_BLOCK            : 3
VAR_DECL             : 4 6
VAR_DECL_R           : 5
VAR_LIST             : 5
VAR_LIST2            : 8 9
WHILE_END_NEURAL     : 55
WHILE_LOOP           : 49
WHILE_POST_NEURAL    : 55
WHILE_PREV_NEURAL    : 55
WRITE                : 43
WRITE_LIST           : 98 102
WRITE_LIST_R         : 99 100
WRITE_NEURAL         : 102 103
neural_param_decl    : 19 21
neural_proc_return_id : 21
neural_proc_void_id  : 19
neural_program_id    : 1
neuro                : 25

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROGRAM_K ID neural_program_id SEMICOLON BLOCK

    PROGRAM_K       shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROGRAM_K . ID neural_program_id SEMICOLON BLOCK

    ID              shift and go to state 3


state 3

    (1) PROGRAM -> PROGRAM_K ID . neural_program_id SEMICOLON BLOCK
    (2) neural_program_id -> . EMPTY
    (146) EMPTY -> .

    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    neural_program_id              shift and go to state 4
    EMPTY                          shift and go to state 5

state 4

    (1) PROGRAM -> PROGRAM_K ID neural_program_id . SEMICOLON BLOCK

    SEMICOLON       shift and go to state 6


state 5

    (2) neural_program_id -> EMPTY .

    SEMICOLON       reduce using rule 2 (neural_program_id -> EMPTY .)


state 6

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON . BLOCK
    (3) BLOCK -> . VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
    (4) VAR_BLOCK -> . VARS_K BLOCKSTART VAR_DECL BLOCKEND

    VARS_K          shift and go to state 9

    BLOCK                          shift and go to state 7
    VAR_BLOCK                      shift and go to state 8

state 7

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .

    $end            reduce using rule 1 (PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .)


state 8

    (3) BLOCK -> VAR_BLOCK . PROC_BLOCK PRINCIPAL_BLOCK
    (15) PROC_BLOCK -> . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (146) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 146 (EMPTY -> .)

    PROC_BLOCK                     shift and go to state 10
    PROC_DECL                      shift and go to state 11
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 9

    (4) VAR_BLOCK -> VARS_K . BLOCKSTART VAR_DECL BLOCKEND

    BLOCKSTART      shift and go to state 16


state 10

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK . PRINCIPAL_BLOCK
    (141) PRINCIPAL_BLOCK -> . MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    MAIN_K          shift and go to state 18

    PRINCIPAL_BLOCK                shift and go to state 17

state 11

    (15) PROC_BLOCK -> PROC_DECL .

    MAIN_K          reduce using rule 15 (PROC_BLOCK -> PROC_DECL .)


state 12

    (16) PROC_DECL -> PROC_DECL_RETURN .

    MAIN_K          reduce using rule 16 (PROC_DECL -> PROC_DECL_RETURN .)


state 13

    (17) PROC_DECL -> PROC_DECL_VOID .

    MAIN_K          reduce using rule 17 (PROC_DECL -> PROC_DECL_VOID .)


state 14

    (18) PROC_DECL -> EMPTY .

    MAIN_K          reduce using rule 18 (PROC_DECL -> EMPTY .)


state 15

    (21) PROC_DECL_RETURN -> FUNCTION_K . TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> FUNCTION_K . VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    VOID_K          shift and go to state 20
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 19

state 16

    (4) VAR_BLOCK -> VARS_K BLOCKSTART . VAR_DECL BLOCKEND
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    VAR_DECL                       shift and go to state 24
    TYPE                           shift and go to state 25

state 17

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .

    $end            reduce using rule 3 (BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .)


state 18

    (141) PRINCIPAL_BLOCK -> MAIN_K . MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
    (142) MAIN_NEURAL -> . EMPTY
    (146) EMPTY -> .

    LPAREN          reduce using rule 146 (EMPTY -> .)

    MAIN_NEURAL                    shift and go to state 26
    EMPTY                          shift and go to state 27

state 19

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE . ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    ID              shift and go to state 28


state 20

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K . ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    ID              shift and go to state 29


state 21

    (11) TYPE -> INT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    COLON           reduce using rule 146 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 30
    EMPTY                          shift and go to state 31

state 22

    (12) TYPE -> FLOAT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    COLON           reduce using rule 146 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 32
    EMPTY                          shift and go to state 31

state 23

    (13) TYPE -> STRING_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    COLON           reduce using rule 146 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 33
    EMPTY                          shift and go to state 31

state 24

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL . BLOCKEND

    BLOCKEND        shift and go to state 34


state 25

    (5) VAR_DECL -> TYPE . COLON VAR_LIST SEMICOLON VAR_DECL_R

    COLON           shift and go to state 35


state 26

    (141) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL . LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    LPAREN          shift and go to state 36


state 27

    (142) MAIN_NEURAL -> EMPTY .

    LPAREN          reduce using rule 142 (MAIN_NEURAL -> EMPTY .)


state 28

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID . neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (23) neural_proc_return_id -> . EMPTY
    (146) EMPTY -> .

    LPAREN          reduce using rule 146 (EMPTY -> .)

    neural_proc_return_id          shift and go to state 37
    EMPTY                          shift and go to state 38

state 29

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID . neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (20) neural_proc_void_id -> . EMPTY
    (146) EMPTY -> .

    LPAREN          reduce using rule 146 (EMPTY -> .)

    neural_proc_void_id            shift and go to state 39
    EMPTY                          shift and go to state 40

state 30

    (11) TYPE -> INT_K NEURAL_TYPE .

    ID              reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)
    COLON           reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)


state 31

    (14) NEURAL_TYPE -> EMPTY .

    ID              reduce using rule 14 (NEURAL_TYPE -> EMPTY .)
    COLON           reduce using rule 14 (NEURAL_TYPE -> EMPTY .)


state 32

    (12) TYPE -> FLOAT_K NEURAL_TYPE .

    ID              reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)
    COLON           reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)


state 33

    (13) TYPE -> STRING_K NEURAL_TYPE .

    ID              reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)
    COLON           reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)


state 34

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .

    FUNCTION_K      reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)
    MAIN_K          reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)


state 35

    (5) VAR_DECL -> TYPE COLON . VAR_LIST SEMICOLON VAR_DECL_R
    (8) VAR_LIST -> . VAR VAR_LIST2
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (77) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    VAR_LIST                       shift and go to state 41
    VAR                            shift and go to state 42
    ARRAY                          shift and go to state 44

state 36

    (141) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN . RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    RPAREN          shift and go to state 45


state 37

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    LPAREN          shift and go to state 46


state 38

    (23) neural_proc_return_id -> EMPTY .

    LPAREN          reduce using rule 23 (neural_proc_return_id -> EMPTY .)


state 39

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    LPAREN          shift and go to state 47


state 40

    (20) neural_proc_void_id -> EMPTY .

    LPAREN          reduce using rule 20 (neural_proc_void_id -> EMPTY .)


state 41

    (5) VAR_DECL -> TYPE COLON VAR_LIST . SEMICOLON VAR_DECL_R

    SEMICOLON       shift and go to state 48


state 42

    (8) VAR_LIST -> VAR . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA VAR VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (146) EMPTY -> .

    COMMA           shift and go to state 50
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 49
    EMPTY                          shift and go to state 51

state 43

    (75) VAR -> ID .
    (77) ARRAY -> ID . ARR_ID_NP DIM
    (78) ARR_ID_NP -> . EMPTY
    (146) EMPTY -> .

    COMMA           reduce using rule 75 (VAR -> ID .)
    SEMICOLON       reduce using rule 75 (VAR -> ID .)
    RPAREN          reduce using rule 75 (VAR -> ID .)
    LBRACE          reduce using rule 146 (EMPTY -> .)

    ARR_ID_NP                      shift and go to state 52
    EMPTY                          shift and go to state 53

state 44

    (76) VAR -> ARRAY .

    COMMA           reduce using rule 76 (VAR -> ARRAY .)
    SEMICOLON       reduce using rule 76 (VAR -> ARRAY .)
    EQUALS          reduce using rule 76 (VAR -> ARRAY .)
    RPAREN          reduce using rule 76 (VAR -> ARRAY .)


state 45

    (141) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN . BLOCKSTART PRINCIPAL_BODY BLOCKEND

    BLOCKSTART      shift and go to state 54


state 46

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (25) PARAM_DECL -> . TYPE VAR neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (146) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 146 (EMPTY -> .)

    TYPE                           shift and go to state 55
    PARAM_DECL                     shift and go to state 56
    EMPTY                          shift and go to state 57

state 47

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (25) PARAM_DECL -> . TYPE VAR neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (146) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 146 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 58
    TYPE                           shift and go to state 55
    EMPTY                          shift and go to state 57

state 48

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON . VAR_DECL_R
    (6) VAR_DECL_R -> . VAR_DECL
    (7) VAR_DECL_R -> . EMPTY
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (146) EMPTY -> .
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 25
    VAR_DECL_R                     shift and go to state 59
    VAR_DECL                       shift and go to state 60
    EMPTY                          shift and go to state 61

state 49

    (8) VAR_LIST -> VAR VAR_LIST2 .

    SEMICOLON       reduce using rule 8 (VAR_LIST -> VAR VAR_LIST2 .)


state 50

    (9) VAR_LIST2 -> COMMA . VAR VAR_LIST2
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (77) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    VAR                            shift and go to state 62
    ARRAY                          shift and go to state 44

state 51

    (10) VAR_LIST2 -> EMPTY .

    SEMICOLON       reduce using rule 10 (VAR_LIST2 -> EMPTY .)


state 52

    (77) ARRAY -> ID ARR_ID_NP . DIM
    (79) DIM -> . LBRACE INT LIM_NP RBRACE DIM_R

    LBRACE          shift and go to state 64

    DIM                            shift and go to state 63

state 53

    (78) ARR_ID_NP -> EMPTY .

    LBRACE          reduce using rule 78 (ARR_ID_NP -> EMPTY .)


state 54

    (141) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART . PRINCIPAL_BODY BLOCKEND
    (143) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (144) PRINCIPAL_BODY -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (146) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    PRINCIPAL_BODY                 shift and go to state 65
    STATEMENT                      shift and go to state 66
    EMPTY                          shift and go to state 67
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 55

    (25) PARAM_DECL -> TYPE . VAR neuro PARAM_DECL_R
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (77) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    VAR                            shift and go to state 86
    ARRAY                          shift and go to state 44

state 56

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    RPAREN          shift and go to state 87


state 57

    (26) PARAM_DECL -> EMPTY .

    RPAREN          reduce using rule 26 (PARAM_DECL -> EMPTY .)


state 58

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    RPAREN          shift and go to state 88


state 59

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .

    BLOCKEND        reduce using rule 5 (VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .)


state 60

    (6) VAR_DECL_R -> VAR_DECL .

    BLOCKEND        reduce using rule 6 (VAR_DECL_R -> VAR_DECL .)


state 61

    (7) VAR_DECL_R -> EMPTY .

    BLOCKEND        reduce using rule 7 (VAR_DECL_R -> EMPTY .)


state 62

    (9) VAR_LIST2 -> COMMA VAR . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA VAR VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (146) EMPTY -> .

    COMMA           shift and go to state 50
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 89
    EMPTY                          shift and go to state 51

state 63

    (77) ARRAY -> ID ARR_ID_NP DIM .

    COMMA           reduce using rule 77 (ARRAY -> ID ARR_ID_NP DIM .)
    SEMICOLON       reduce using rule 77 (ARRAY -> ID ARR_ID_NP DIM .)
    EQUALS          reduce using rule 77 (ARRAY -> ID ARR_ID_NP DIM .)
    RPAREN          reduce using rule 77 (ARRAY -> ID ARR_ID_NP DIM .)


state 64

    (79) DIM -> LBRACE . INT LIM_NP RBRACE DIM_R

    INT             shift and go to state 90


state 65

    (141) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY . BLOCKEND

    BLOCKEND        shift and go to state 91


state 66

    (143) PRINCIPAL_BODY -> STATEMENT . PRINCIPAL_BODY_R
    (145) PRINCIPAL_BODY_R -> . PRINCIPAL_BODY
    (143) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (144) PRINCIPAL_BODY -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (146) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    STATEMENT                      shift and go to state 66
    PRINCIPAL_BODY_R               shift and go to state 92
    PRINCIPAL_BODY                 shift and go to state 93
    EMPTY                          shift and go to state 67
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 67

    (144) PRINCIPAL_BODY -> EMPTY .

    BLOCKEND        reduce using rule 144 (PRINCIPAL_BODY -> EMPTY .)


state 68

    (40) STATEMENT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 94


state 69

    (41) STATEMENT -> FUNC_CALL . SEMICOLON

    SEMICOLON       shift and go to state 95


state 70

    (42) STATEMENT -> READ . SEMICOLON

    SEMICOLON       shift and go to state 96


state 71

    (43) STATEMENT -> WRITE . SEMICOLON

    SEMICOLON       shift and go to state 97


state 72

    (44) STATEMENT -> FLOW .

    ID              reduce using rule 44 (STATEMENT -> FLOW .)
    READ_K          reduce using rule 44 (STATEMENT -> FLOW .)
    WRITE_K         reduce using rule 44 (STATEMENT -> FLOW .)
    IF_K            reduce using rule 44 (STATEMENT -> FLOW .)
    WHILE_K         reduce using rule 44 (STATEMENT -> FLOW .)
    DO_K            reduce using rule 44 (STATEMENT -> FLOW .)
    FOR_K           reduce using rule 44 (STATEMENT -> FLOW .)
    BLOCKEND        reduce using rule 44 (STATEMENT -> FLOW .)
    RETURN_K        reduce using rule 44 (STATEMENT -> FLOW .)


state 73

    (67) ASSIGN -> VAR . ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (70) ASSIGN_VAR_N -> . EMPTY
    (146) EMPTY -> .

    EQUALS          reduce using rule 146 (EMPTY -> .)

    ASSIGN_VAR_N                   shift and go to state 98
    EMPTY                          shift and go to state 99

state 74

    (83) FUNC_CALL -> ID . PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (75) VAR -> ID .
    (77) ARRAY -> ID . ARR_ID_NP DIM
    (85) PRE_VERIFY -> . EMPTY
    (78) ARR_ID_NP -> . EMPTY
    (146) EMPTY -> .

    EQUALS          reduce using rule 75 (VAR -> ID .)
    LPAREN          reduce using rule 146 (EMPTY -> .)
    LBRACE          reduce using rule 146 (EMPTY -> .)

    PRE_VERIFY                     shift and go to state 100
    ARR_ID_NP                      shift and go to state 52
    EMPTY                          shift and go to state 101

state 75

    (93) READ -> READ_K . LPAREN ID_LIST RPAREN

    LPAREN          shift and go to state 102


state 76

    (98) WRITE -> WRITE_K . LPAREN WRITE_LIST RPAREN

    LPAREN          shift and go to state 103


state 77

    (47) FLOW -> DECISION .

    ID              reduce using rule 47 (FLOW -> DECISION .)
    READ_K          reduce using rule 47 (FLOW -> DECISION .)
    WRITE_K         reduce using rule 47 (FLOW -> DECISION .)
    IF_K            reduce using rule 47 (FLOW -> DECISION .)
    WHILE_K         reduce using rule 47 (FLOW -> DECISION .)
    DO_K            reduce using rule 47 (FLOW -> DECISION .)
    FOR_K           reduce using rule 47 (FLOW -> DECISION .)
    BLOCKEND        reduce using rule 47 (FLOW -> DECISION .)
    RETURN_K        reduce using rule 47 (FLOW -> DECISION .)


state 78

    (48) FLOW -> LOOP .

    ID              reduce using rule 48 (FLOW -> LOOP .)
    READ_K          reduce using rule 48 (FLOW -> LOOP .)
    WRITE_K         reduce using rule 48 (FLOW -> LOOP .)
    IF_K            reduce using rule 48 (FLOW -> LOOP .)
    WHILE_K         reduce using rule 48 (FLOW -> LOOP .)
    DO_K            reduce using rule 48 (FLOW -> LOOP .)
    FOR_K           reduce using rule 48 (FLOW -> LOOP .)
    BLOCKEND        reduce using rule 48 (FLOW -> LOOP .)
    RETURN_K        reduce using rule 48 (FLOW -> LOOP .)


state 79

    (60) DECISION -> IF_K . LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    LPAREN          shift and go to state 104


state 80

    (49) LOOP -> WHILE_LOOP .

    ID              reduce using rule 49 (LOOP -> WHILE_LOOP .)
    READ_K          reduce using rule 49 (LOOP -> WHILE_LOOP .)
    WRITE_K         reduce using rule 49 (LOOP -> WHILE_LOOP .)
    IF_K            reduce using rule 49 (LOOP -> WHILE_LOOP .)
    WHILE_K         reduce using rule 49 (LOOP -> WHILE_LOOP .)
    DO_K            reduce using rule 49 (LOOP -> WHILE_LOOP .)
    FOR_K           reduce using rule 49 (LOOP -> WHILE_LOOP .)
    BLOCKEND        reduce using rule 49 (LOOP -> WHILE_LOOP .)
    RETURN_K        reduce using rule 49 (LOOP -> WHILE_LOOP .)


state 81

    (50) LOOP -> DO_WHILE_LOOP . SEMICOLON

    SEMICOLON       shift and go to state 105


state 82

    (51) LOOP -> FOR_LOOP .

    ID              reduce using rule 51 (LOOP -> FOR_LOOP .)
    READ_K          reduce using rule 51 (LOOP -> FOR_LOOP .)
    WRITE_K         reduce using rule 51 (LOOP -> FOR_LOOP .)
    IF_K            reduce using rule 51 (LOOP -> FOR_LOOP .)
    WHILE_K         reduce using rule 51 (LOOP -> FOR_LOOP .)
    DO_K            reduce using rule 51 (LOOP -> FOR_LOOP .)
    FOR_K           reduce using rule 51 (LOOP -> FOR_LOOP .)
    BLOCKEND        reduce using rule 51 (LOOP -> FOR_LOOP .)
    RETURN_K        reduce using rule 51 (LOOP -> FOR_LOOP .)


state 83

    (55) WHILE_LOOP -> WHILE_K . WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (56) WHILE_PREV_NEURAL -> . EMPTY
    (146) EMPTY -> .

    LPAREN          reduce using rule 146 (EMPTY -> .)

    WHILE_PREV_NEURAL              shift and go to state 106
    EMPTY                          shift and go to state 107

state 84

    (52) DO_WHILE_LOOP -> DO_K . DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (53) DW_PREV_NEURAL -> . EMPTY
    (146) EMPTY -> .

    BLOCKSTART      reduce using rule 146 (EMPTY -> .)

    DW_PREV_NEURAL                 shift and go to state 108
    EMPTY                          shift and go to state 109

state 85

    (59) FOR_LOOP -> FOR_K . ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 110


state 86

    (25) PARAM_DECL -> TYPE VAR . neuro PARAM_DECL_R
    (27) neuro -> . EMPTY
    (146) EMPTY -> .

    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)

    neuro                          shift and go to state 111
    EMPTY                          shift and go to state 112

state 87

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (24) neural_param_decl -> . EMPTY
    (146) EMPTY -> .

    BLOCKSTART      reduce using rule 146 (EMPTY -> .)

    neural_param_decl              shift and go to state 113
    EMPTY                          shift and go to state 114

state 88

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (24) neural_param_decl -> . EMPTY
    (146) EMPTY -> .

    BLOCKSTART      reduce using rule 146 (EMPTY -> .)

    neural_param_decl              shift and go to state 115
    EMPTY                          shift and go to state 114

state 89

    (9) VAR_LIST2 -> COMMA VAR VAR_LIST2 .

    SEMICOLON       reduce using rule 9 (VAR_LIST2 -> COMMA VAR VAR_LIST2 .)


state 90

    (79) DIM -> LBRACE INT . LIM_NP RBRACE DIM_R
    (80) LIM_NP -> . EMPTY
    (146) EMPTY -> .

    RBRACE          reduce using rule 146 (EMPTY -> .)

    LIM_NP                         shift and go to state 116
    EMPTY                          shift and go to state 117

state 91

    (141) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .

    $end            reduce using rule 141 (PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .)


state 92

    (143) PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .

    BLOCKEND        reduce using rule 143 (PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .)


state 93

    (145) PRINCIPAL_BODY_R -> PRINCIPAL_BODY .

    BLOCKEND        reduce using rule 145 (PRINCIPAL_BODY_R -> PRINCIPAL_BODY .)


state 94

    (40) STATEMENT -> ASSIGN SEMICOLON .

    ID              reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    READ_K          reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    WRITE_K         reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    IF_K            reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    WHILE_K         reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    DO_K            reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    FOR_K           reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    BLOCKEND        reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    RETURN_K        reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)


state 95

    (41) STATEMENT -> FUNC_CALL SEMICOLON .

    ID              reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    READ_K          reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WRITE_K         reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    IF_K            reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WHILE_K         reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    DO_K            reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    FOR_K           reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    BLOCKEND        reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    RETURN_K        reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)


state 96

    (42) STATEMENT -> READ SEMICOLON .

    ID              reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    READ_K          reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    WRITE_K         reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    IF_K            reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    WHILE_K         reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    DO_K            reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    FOR_K           reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    BLOCKEND        reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    RETURN_K        reduce using rule 42 (STATEMENT -> READ SEMICOLON .)


state 97

    (43) STATEMENT -> WRITE SEMICOLON .

    ID              reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    READ_K          reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    WRITE_K         reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    IF_K            reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    WHILE_K         reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    DO_K            reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    FOR_K           reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    BLOCKEND        reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    RETURN_K        reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)


state 98

    (67) ASSIGN -> VAR ASSIGN_VAR_N . EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL

    EQUALS          shift and go to state 118


state 99

    (70) ASSIGN_VAR_N -> EMPTY .

    EQUALS          reduce using rule 70 (ASSIGN_VAR_N -> EMPTY .)


state 100

    (83) FUNC_CALL -> ID PRE_VERIFY . LPAREN EXP_LIST POST_VERIFY RPAREN

    LPAREN          shift and go to state 119


state 101

    (85) PRE_VERIFY -> EMPTY .
    (78) ARR_ID_NP -> EMPTY .

    LPAREN          reduce using rule 85 (PRE_VERIFY -> EMPTY .)
    LBRACE          reduce using rule 78 (ARR_ID_NP -> EMPTY .)


state 102

    (93) READ -> READ_K LPAREN . ID_LIST RPAREN
    (94) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 121

    ID_LIST                        shift and go to state 120

state 103

    (98) WRITE -> WRITE_K LPAREN . WRITE_LIST RPAREN
    (99) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (100) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129
    ID              shift and go to state 133
    LPAREN          shift and go to state 122

    WRITE_LIST                     shift and go to state 123
    H_EXPRESSION                   shift and go to state 124
    CONSTANT                       shift and go to state 125
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132

state 104

    (60) DECISION -> IF_K LPAREN . H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    H_EXPRESSION                   shift and go to state 134
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 105

    (50) LOOP -> DO_WHILE_LOOP SEMICOLON .

    ID              reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    READ_K          reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    WRITE_K         reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    IF_K            reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    WHILE_K         reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    DO_K            reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    FOR_K           reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    BLOCKEND        reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    RETURN_K        reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)


state 106

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL . LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    LPAREN          shift and go to state 136


state 107

    (56) WHILE_PREV_NEURAL -> EMPTY .

    LPAREN          reduce using rule 56 (WHILE_PREV_NEURAL -> EMPTY .)


state 108

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    BLOCKSTART      shift and go to state 137


state 109

    (53) DW_PREV_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 53 (DW_PREV_NEURAL -> EMPTY .)


state 110

    (59) FOR_LOOP -> FOR_K ID . EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    EQUALS          shift and go to state 138


state 111

    (25) PARAM_DECL -> TYPE VAR neuro . PARAM_DECL_R
    (28) PARAM_DECL_R -> . COMMA PARAM_DECL
    (29) PARAM_DECL_R -> . EMPTY
    (146) EMPTY -> .

    COMMA           shift and go to state 140
    RPAREN          reduce using rule 146 (EMPTY -> .)

    PARAM_DECL_R                   shift and go to state 139
    EMPTY                          shift and go to state 141

state 112

    (27) neuro -> EMPTY .

    COMMA           reduce using rule 27 (neuro -> EMPTY .)
    RPAREN          reduce using rule 27 (neuro -> EMPTY .)


state 113

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    BLOCKSTART      shift and go to state 142


state 114

    (24) neural_param_decl -> EMPTY .

    BLOCKSTART      reduce using rule 24 (neural_param_decl -> EMPTY .)


state 115

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    BLOCKSTART      shift and go to state 143


state 116

    (79) DIM -> LBRACE INT LIM_NP . RBRACE DIM_R

    RBRACE          shift and go to state 144


state 117

    (80) LIM_NP -> EMPTY .

    RBRACE          reduce using rule 80 (LIM_NP -> EMPTY .)


state 118

    (67) ASSIGN -> VAR ASSIGN_VAR_N EQUALS . EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) EQUALS_NEURAL -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    LPAREN          reduce using rule 146 (EMPTY -> .)
    INT             reduce using rule 146 (EMPTY -> .)
    FLOAT           reduce using rule 146 (EMPTY -> .)
    STRING          reduce using rule 146 (EMPTY -> .)

    EQUALS_NEURAL                  shift and go to state 145
    EMPTY                          shift and go to state 146

state 119

    (83) FUNC_CALL -> ID PRE_VERIFY LPAREN . EXP_LIST POST_VERIFY RPAREN
    (86) EXP_LIST -> . H_EXPRESSION EXP_NEURAL EXP_LIST_2
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    EXP_LIST                       shift and go to state 147
    H_EXPRESSION                   shift and go to state 148
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 120

    (93) READ -> READ_K LPAREN ID_LIST . RPAREN

    RPAREN          shift and go to state 149


state 121

    (94) ID_LIST -> ID . READ_NEURAL ID_LIST_R
    (95) READ_NEURAL -> . EMPTY
    (146) EMPTY -> .

    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)

    READ_NEURAL                    shift and go to state 150
    EMPTY                          shift and go to state 151

state 122

    (122) FACTOR -> LPAREN . H_EXPRESSION RPAREN
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    H_EXPRESSION                   shift and go to state 152
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 123

    (98) WRITE -> WRITE_K LPAREN WRITE_LIST . RPAREN

    RPAREN          shift and go to state 153


state 124

    (99) WRITE_LIST -> H_EXPRESSION . WRITE_LIST_R
    (102) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (103) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (104) WRITE_NEURAL -> . EMPTY
    (146) EMPTY -> .

    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 154
    WRITE_NEURAL                   shift and go to state 155
    EMPTY                          shift and go to state 156

state 125

    (100) WRITE_LIST -> CONSTANT . CONSTANT_WRITE_N WRITE_LIST_R
    (121) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (101) CONSTANT_WRITE_N -> . EMPTY
    (124) NEURAL_CNT_FACT -> . EMPTY
    (146) EMPTY -> .

    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)
    TIMES           reduce using rule 146 (EMPTY -> .)
    DIVIDE          reduce using rule 146 (EMPTY -> .)
    PLUS            reduce using rule 146 (EMPTY -> .)
    MINUS           reduce using rule 146 (EMPTY -> .)
    GT              reduce using rule 146 (EMPTY -> .)
    LT              reduce using rule 146 (EMPTY -> .)
    LTE             reduce using rule 146 (EMPTY -> .)
    GTE             reduce using rule 146 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 146 (EMPTY -> .)
    AND             reduce using rule 146 (EMPTY -> .)
    OR              reduce using rule 146 (EMPTY -> .)

    CONSTANT_WRITE_N               shift and go to state 157
    NEURAL_CNT_FACT                shift and go to state 158
    EMPTY                          shift and go to state 159

state 126

    (137) H_EXPRESSION -> S_EXPRESSION . H_EXPRESSION_R
    (138) H_EXPRESSION_R -> . OR H_EXPRESSION
    (139) H_EXPRESSION_R -> . AND H_EXPRESSION
    (140) H_EXPRESSION_R -> . EMPTY
    (146) EMPTY -> .

    OR              shift and go to state 161
    AND             shift and go to state 162
    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    H_EXPRESSION_R                 shift and go to state 160
    EMPTY                          shift and go to state 163

state 127

    (90) CONSTANT -> INT .

    COMMA           reduce using rule 90 (CONSTANT -> INT .)
    RPAREN          reduce using rule 90 (CONSTANT -> INT .)
    TIMES           reduce using rule 90 (CONSTANT -> INT .)
    DIVIDE          reduce using rule 90 (CONSTANT -> INT .)
    PLUS            reduce using rule 90 (CONSTANT -> INT .)
    MINUS           reduce using rule 90 (CONSTANT -> INT .)
    GT              reduce using rule 90 (CONSTANT -> INT .)
    LT              reduce using rule 90 (CONSTANT -> INT .)
    LTE             reduce using rule 90 (CONSTANT -> INT .)
    GTE             reduce using rule 90 (CONSTANT -> INT .)
    DOUBLEEQUAL     reduce using rule 90 (CONSTANT -> INT .)
    AND             reduce using rule 90 (CONSTANT -> INT .)
    OR              reduce using rule 90 (CONSTANT -> INT .)
    SEMICOLON       reduce using rule 90 (CONSTANT -> INT .)


state 128

    (91) CONSTANT -> FLOAT .

    COMMA           reduce using rule 91 (CONSTANT -> FLOAT .)
    RPAREN          reduce using rule 91 (CONSTANT -> FLOAT .)
    TIMES           reduce using rule 91 (CONSTANT -> FLOAT .)
    DIVIDE          reduce using rule 91 (CONSTANT -> FLOAT .)
    PLUS            reduce using rule 91 (CONSTANT -> FLOAT .)
    MINUS           reduce using rule 91 (CONSTANT -> FLOAT .)
    GT              reduce using rule 91 (CONSTANT -> FLOAT .)
    LT              reduce using rule 91 (CONSTANT -> FLOAT .)
    LTE             reduce using rule 91 (CONSTANT -> FLOAT .)
    GTE             reduce using rule 91 (CONSTANT -> FLOAT .)
    DOUBLEEQUAL     reduce using rule 91 (CONSTANT -> FLOAT .)
    AND             reduce using rule 91 (CONSTANT -> FLOAT .)
    OR              reduce using rule 91 (CONSTANT -> FLOAT .)
    SEMICOLON       reduce using rule 91 (CONSTANT -> FLOAT .)


state 129

    (92) CONSTANT -> STRING .

    COMMA           reduce using rule 92 (CONSTANT -> STRING .)
    RPAREN          reduce using rule 92 (CONSTANT -> STRING .)
    TIMES           reduce using rule 92 (CONSTANT -> STRING .)
    DIVIDE          reduce using rule 92 (CONSTANT -> STRING .)
    PLUS            reduce using rule 92 (CONSTANT -> STRING .)
    MINUS           reduce using rule 92 (CONSTANT -> STRING .)
    GT              reduce using rule 92 (CONSTANT -> STRING .)
    LT              reduce using rule 92 (CONSTANT -> STRING .)
    LTE             reduce using rule 92 (CONSTANT -> STRING .)
    GTE             reduce using rule 92 (CONSTANT -> STRING .)
    DOUBLEEQUAL     reduce using rule 92 (CONSTANT -> STRING .)
    AND             reduce using rule 92 (CONSTANT -> STRING .)
    OR              reduce using rule 92 (CONSTANT -> STRING .)
    SEMICOLON       reduce using rule 92 (CONSTANT -> STRING .)


state 130

    (125) S_EXPRESSION -> EXPRESSION . S_EXPRESSION_R
    (127) S_EXPRESSION_R -> . CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP
    (128) S_EXPRESSION_R -> . EMPTY
    (130) CONDI -> . GT
    (131) CONDI -> . LT
    (132) CONDI -> . LTE
    (133) CONDI -> . GTE
    (134) CONDI -> . DOUBLEEQUAL
    (135) CONDI -> . AND
    (136) CONDI -> . OR
    (146) EMPTY -> .

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    GT              shift and go to state 167
    LT              shift and go to state 168
    LTE             shift and go to state 169
    GTE             shift and go to state 170
    DOUBLEEQUAL     shift and go to state 171
    AND             shift and go to state 172
    OR              shift and go to state 173
    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

  ! OR              [ reduce using rule 146 (EMPTY -> .) ]
  ! AND             [ reduce using rule 146 (EMPTY -> .) ]

    S_EXPRESSION_R                 shift and go to state 164
    CONDI                          shift and go to state 165
    EMPTY                          shift and go to state 166

state 131

    (106) EXPRESSION -> TERM . NEURAL_EXPRESSION EXPRESSION_R
    (107) NEURAL_EXPRESSION -> . EMPTY
    (146) EMPTY -> .

    PLUS            reduce using rule 146 (EMPTY -> .)
    MINUS           reduce using rule 146 (EMPTY -> .)
    GT              reduce using rule 146 (EMPTY -> .)
    LT              reduce using rule 146 (EMPTY -> .)
    LTE             reduce using rule 146 (EMPTY -> .)
    GTE             reduce using rule 146 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 146 (EMPTY -> .)
    AND             reduce using rule 146 (EMPTY -> .)
    OR              reduce using rule 146 (EMPTY -> .)
    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    NEURAL_EXPRESSION              shift and go to state 174
    EMPTY                          shift and go to state 175

state 132

    (113) TERM -> FACTOR . NEURAL_TERM TERM_R
    (114) NEURAL_TERM -> . EMPTY
    (146) EMPTY -> .

    TIMES           reduce using rule 146 (EMPTY -> .)
    DIVIDE          reduce using rule 146 (EMPTY -> .)
    PLUS            reduce using rule 146 (EMPTY -> .)
    MINUS           reduce using rule 146 (EMPTY -> .)
    GT              reduce using rule 146 (EMPTY -> .)
    LT              reduce using rule 146 (EMPTY -> .)
    LTE             reduce using rule 146 (EMPTY -> .)
    GTE             reduce using rule 146 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 146 (EMPTY -> .)
    AND             reduce using rule 146 (EMPTY -> .)
    OR              reduce using rule 146 (EMPTY -> .)
    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    NEURAL_TERM                    shift and go to state 176
    EMPTY                          shift and go to state 177

state 133

    (120) FACTOR -> ID . NEURAL_ID_FAC
    (123) NEURAL_ID_FAC -> . EMPTY
    (146) EMPTY -> .

    TIMES           reduce using rule 146 (EMPTY -> .)
    DIVIDE          reduce using rule 146 (EMPTY -> .)
    PLUS            reduce using rule 146 (EMPTY -> .)
    MINUS           reduce using rule 146 (EMPTY -> .)
    GT              reduce using rule 146 (EMPTY -> .)
    LT              reduce using rule 146 (EMPTY -> .)
    LTE             reduce using rule 146 (EMPTY -> .)
    GTE             reduce using rule 146 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 146 (EMPTY -> .)
    AND             reduce using rule 146 (EMPTY -> .)
    OR              reduce using rule 146 (EMPTY -> .)
    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    NEURAL_ID_FAC                  shift and go to state 178
    EMPTY                          shift and go to state 179

state 134

    (60) DECISION -> IF_K LPAREN H_EXPRESSION . RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    RPAREN          shift and go to state 180


state 135

    (121) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (124) NEURAL_CNT_FACT -> . EMPTY
    (146) EMPTY -> .

    TIMES           reduce using rule 146 (EMPTY -> .)
    DIVIDE          reduce using rule 146 (EMPTY -> .)
    PLUS            reduce using rule 146 (EMPTY -> .)
    MINUS           reduce using rule 146 (EMPTY -> .)
    GT              reduce using rule 146 (EMPTY -> .)
    LT              reduce using rule 146 (EMPTY -> .)
    LTE             reduce using rule 146 (EMPTY -> .)
    GTE             reduce using rule 146 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 146 (EMPTY -> .)
    AND             reduce using rule 146 (EMPTY -> .)
    OR              reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)
    COMMA           reduce using rule 146 (EMPTY -> .)
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    NEURAL_CNT_FACT                shift and go to state 158
    EMPTY                          shift and go to state 181

state 136

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN . H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    H_EXPRESSION                   shift and go to state 182
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 137

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (146) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    STATEMENT_R                    shift and go to state 183
    STATEMENT                      shift and go to state 184
    EMPTY                          shift and go to state 185
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 138

    (59) FOR_LOOP -> FOR_K ID EQUALS . INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 186


state 139

    (25) PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R .

    RPAREN          reduce using rule 25 (PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R .)


state 140

    (28) PARAM_DECL_R -> COMMA . PARAM_DECL
    (25) PARAM_DECL -> . TYPE VAR neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (146) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 146 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 187
    TYPE                           shift and go to state 55
    EMPTY                          shift and go to state 57

state 141

    (29) PARAM_DECL_R -> EMPTY .

    RPAREN          reduce using rule 29 (PARAM_DECL_R -> EMPTY .)


state 142

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (31) FN_VARBLOCK -> . VARS_K BLOCKSTART LS_VARDECL BLOCKEND

    VARS_K          shift and go to state 189

    FN_VARBLOCK                    shift and go to state 188

state 143

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (31) FN_VARBLOCK -> . VARS_K BLOCKSTART LS_VARDECL BLOCKEND

    VARS_K          shift and go to state 189

    FN_VARBLOCK                    shift and go to state 190

state 144

    (79) DIM -> LBRACE INT LIM_NP RBRACE . DIM_R
    (81) DIM_R -> . DIM
    (82) DIM_R -> . EMPTY
    (79) DIM -> . LBRACE INT LIM_NP RBRACE DIM_R
    (146) EMPTY -> .

    LBRACE          shift and go to state 64
    COMMA           reduce using rule 146 (EMPTY -> .)
    SEMICOLON       reduce using rule 146 (EMPTY -> .)
    EQUALS          reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)

    DIM_R                          shift and go to state 191
    DIM                            shift and go to state 192
    EMPTY                          shift and go to state 193

state 145

    (67) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL . H_EXPRESSION ASSI_H_EXP_NEURAL
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    H_EXPRESSION                   shift and go to state 194
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 146

    (69) EQUALS_NEURAL -> EMPTY .

    ID              reduce using rule 69 (EQUALS_NEURAL -> EMPTY .)
    LPAREN          reduce using rule 69 (EQUALS_NEURAL -> EMPTY .)
    INT             reduce using rule 69 (EQUALS_NEURAL -> EMPTY .)
    FLOAT           reduce using rule 69 (EQUALS_NEURAL -> EMPTY .)
    STRING          reduce using rule 69 (EQUALS_NEURAL -> EMPTY .)


state 147

    (83) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST . POST_VERIFY RPAREN
    (84) POST_VERIFY -> . EMPTY
    (146) EMPTY -> .

    RPAREN          reduce using rule 146 (EMPTY -> .)

    POST_VERIFY                    shift and go to state 195
    EMPTY                          shift and go to state 196

state 148

    (86) EXP_LIST -> H_EXPRESSION . EXP_NEURAL EXP_LIST_2
    (87) EXP_NEURAL -> . EMPTY
    (146) EMPTY -> .

    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)

    EXP_NEURAL                     shift and go to state 197
    EMPTY                          shift and go to state 198

state 149

    (93) READ -> READ_K LPAREN ID_LIST RPAREN .

    SEMICOLON       reduce using rule 93 (READ -> READ_K LPAREN ID_LIST RPAREN .)


state 150

    (94) ID_LIST -> ID READ_NEURAL . ID_LIST_R
    (96) ID_LIST_R -> . COMMA ID_LIST
    (97) ID_LIST_R -> . EMPTY
    (146) EMPTY -> .

    COMMA           shift and go to state 200
    RPAREN          reduce using rule 146 (EMPTY -> .)

    ID_LIST_R                      shift and go to state 199
    EMPTY                          shift and go to state 201

state 151

    (95) READ_NEURAL -> EMPTY .

    COMMA           reduce using rule 95 (READ_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 95 (READ_NEURAL -> EMPTY .)


state 152

    (122) FACTOR -> LPAREN H_EXPRESSION . RPAREN

    RPAREN          shift and go to state 202


state 153

    (98) WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .

    SEMICOLON       reduce using rule 98 (WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .)


state 154

    (99) WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .

    RPAREN          reduce using rule 99 (WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .)


state 155

    (102) WRITE_LIST_R -> WRITE_NEURAL . COMMA WRITE_LIST
    (103) WRITE_LIST_R -> WRITE_NEURAL . EMPTY
    (146) EMPTY -> .

    COMMA           shift and go to state 203
    RPAREN          reduce using rule 146 (EMPTY -> .)

    EMPTY                          shift and go to state 204

state 156

    (104) WRITE_NEURAL -> EMPTY .

    COMMA           reduce using rule 104 (WRITE_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 104 (WRITE_NEURAL -> EMPTY .)


state 157

    (100) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N . WRITE_LIST_R
    (102) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (103) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (104) WRITE_NEURAL -> . EMPTY
    (146) EMPTY -> .

    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 205
    WRITE_NEURAL                   shift and go to state 155
    EMPTY                          shift and go to state 156

state 158

    (121) FACTOR -> CONSTANT NEURAL_CNT_FACT .

    TIMES           reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DIVIDE          reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    PLUS            reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    MINUS           reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GT              reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LT              reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LTE             reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GTE             reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DOUBLEEQUAL     reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    AND             reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    OR              reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    COMMA           reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    RPAREN          reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    SEMICOLON       reduce using rule 121 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)


state 159

    (101) CONSTANT_WRITE_N -> EMPTY .
    (124) NEURAL_CNT_FACT -> EMPTY .

  ! reduce/reduce conflict for COMMA resolved using rule 101 (CONSTANT_WRITE_N -> EMPTY .)
  ! reduce/reduce conflict for RPAREN resolved using rule 101 (CONSTANT_WRITE_N -> EMPTY .)
    COMMA           reduce using rule 101 (CONSTANT_WRITE_N -> EMPTY .)
    RPAREN          reduce using rule 101 (CONSTANT_WRITE_N -> EMPTY .)
    TIMES           reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)

  ! COMMA           [ reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .) ]
  ! RPAREN          [ reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .) ]


state 160

    (137) H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .

    COMMA           reduce using rule 137 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    RPAREN          reduce using rule 137 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    SEMICOLON       reduce using rule 137 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)


state 161

    (138) H_EXPRESSION_R -> OR . H_EXPRESSION
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    H_EXPRESSION                   shift and go to state 206
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 162

    (139) H_EXPRESSION_R -> AND . H_EXPRESSION
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    H_EXPRESSION                   shift and go to state 207
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 163

    (140) H_EXPRESSION_R -> EMPTY .

    COMMA           reduce using rule 140 (H_EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 140 (H_EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 140 (H_EXPRESSION_R -> EMPTY .)


state 164

    (125) S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .

    OR              reduce using rule 125 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    AND             reduce using rule 125 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    COMMA           reduce using rule 125 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    RPAREN          reduce using rule 125 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    SEMICOLON       reduce using rule 125 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)


state 165

    (127) S_EXPRESSION_R -> CONDI . NEURAL_CONDI EXPRESSION NEURAL_EXP
    (129) NEURAL_CONDI -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    LPAREN          reduce using rule 146 (EMPTY -> .)
    INT             reduce using rule 146 (EMPTY -> .)
    FLOAT           reduce using rule 146 (EMPTY -> .)
    STRING          reduce using rule 146 (EMPTY -> .)

    NEURAL_CONDI                   shift and go to state 208
    EMPTY                          shift and go to state 209

state 166

    (128) S_EXPRESSION_R -> EMPTY .

    OR              reduce using rule 128 (S_EXPRESSION_R -> EMPTY .)
    AND             reduce using rule 128 (S_EXPRESSION_R -> EMPTY .)
    COMMA           reduce using rule 128 (S_EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 128 (S_EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 128 (S_EXPRESSION_R -> EMPTY .)


state 167

    (130) CONDI -> GT .

    ID              reduce using rule 130 (CONDI -> GT .)
    LPAREN          reduce using rule 130 (CONDI -> GT .)
    INT             reduce using rule 130 (CONDI -> GT .)
    FLOAT           reduce using rule 130 (CONDI -> GT .)
    STRING          reduce using rule 130 (CONDI -> GT .)


state 168

    (131) CONDI -> LT .

    ID              reduce using rule 131 (CONDI -> LT .)
    LPAREN          reduce using rule 131 (CONDI -> LT .)
    INT             reduce using rule 131 (CONDI -> LT .)
    FLOAT           reduce using rule 131 (CONDI -> LT .)
    STRING          reduce using rule 131 (CONDI -> LT .)


state 169

    (132) CONDI -> LTE .

    ID              reduce using rule 132 (CONDI -> LTE .)
    LPAREN          reduce using rule 132 (CONDI -> LTE .)
    INT             reduce using rule 132 (CONDI -> LTE .)
    FLOAT           reduce using rule 132 (CONDI -> LTE .)
    STRING          reduce using rule 132 (CONDI -> LTE .)


state 170

    (133) CONDI -> GTE .

    ID              reduce using rule 133 (CONDI -> GTE .)
    LPAREN          reduce using rule 133 (CONDI -> GTE .)
    INT             reduce using rule 133 (CONDI -> GTE .)
    FLOAT           reduce using rule 133 (CONDI -> GTE .)
    STRING          reduce using rule 133 (CONDI -> GTE .)


state 171

    (134) CONDI -> DOUBLEEQUAL .

    ID              reduce using rule 134 (CONDI -> DOUBLEEQUAL .)
    LPAREN          reduce using rule 134 (CONDI -> DOUBLEEQUAL .)
    INT             reduce using rule 134 (CONDI -> DOUBLEEQUAL .)
    FLOAT           reduce using rule 134 (CONDI -> DOUBLEEQUAL .)
    STRING          reduce using rule 134 (CONDI -> DOUBLEEQUAL .)


state 172

    (135) CONDI -> AND .

    ID              reduce using rule 135 (CONDI -> AND .)
    LPAREN          reduce using rule 135 (CONDI -> AND .)
    INT             reduce using rule 135 (CONDI -> AND .)
    FLOAT           reduce using rule 135 (CONDI -> AND .)
    STRING          reduce using rule 135 (CONDI -> AND .)


state 173

    (136) CONDI -> OR .

    ID              reduce using rule 136 (CONDI -> OR .)
    LPAREN          reduce using rule 136 (CONDI -> OR .)
    INT             reduce using rule 136 (CONDI -> OR .)
    FLOAT           reduce using rule 136 (CONDI -> OR .)
    STRING          reduce using rule 136 (CONDI -> OR .)


state 174

    (106) EXPRESSION -> TERM NEURAL_EXPRESSION . EXPRESSION_R
    (108) EXPRESSION_R -> . PLUS NEURAL_PLUS EXPRESSION
    (109) EXPRESSION_R -> . MINUS NEURAL_MINUS EXPRESSION
    (110) EXPRESSION_R -> . EMPTY
    (146) EMPTY -> .

    PLUS            shift and go to state 211
    MINUS           shift and go to state 212
    GT              reduce using rule 146 (EMPTY -> .)
    LT              reduce using rule 146 (EMPTY -> .)
    LTE             reduce using rule 146 (EMPTY -> .)
    GTE             reduce using rule 146 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 146 (EMPTY -> .)
    AND             reduce using rule 146 (EMPTY -> .)
    OR              reduce using rule 146 (EMPTY -> .)
    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    EXPRESSION_R                   shift and go to state 210
    EMPTY                          shift and go to state 213

state 175

    (107) NEURAL_EXPRESSION -> EMPTY .

    PLUS            reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    MINUS           reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    GT              reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    LT              reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    LTE             reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    GTE             reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    AND             reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    OR              reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    COMMA           reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    RPAREN          reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)
    SEMICOLON       reduce using rule 107 (NEURAL_EXPRESSION -> EMPTY .)


state 176

    (113) TERM -> FACTOR NEURAL_TERM . TERM_R
    (115) TERM_R -> . TIMES NEURAL_TIMES TERM
    (116) TERM_R -> . DIVIDE NEURAL_DIVIDE TERM
    (117) TERM_R -> . EMPTY
    (146) EMPTY -> .

    TIMES           shift and go to state 215
    DIVIDE          shift and go to state 216
    PLUS            reduce using rule 146 (EMPTY -> .)
    MINUS           reduce using rule 146 (EMPTY -> .)
    GT              reduce using rule 146 (EMPTY -> .)
    LT              reduce using rule 146 (EMPTY -> .)
    LTE             reduce using rule 146 (EMPTY -> .)
    GTE             reduce using rule 146 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 146 (EMPTY -> .)
    AND             reduce using rule 146 (EMPTY -> .)
    OR              reduce using rule 146 (EMPTY -> .)
    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    TERM_R                         shift and go to state 214
    EMPTY                          shift and go to state 217

state 177

    (114) NEURAL_TERM -> EMPTY .

    TIMES           reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    DIVIDE          reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    PLUS            reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    MINUS           reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    GT              reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    LT              reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    LTE             reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    GTE             reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    AND             reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    OR              reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    COMMA           reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    RPAREN          reduce using rule 114 (NEURAL_TERM -> EMPTY .)
    SEMICOLON       reduce using rule 114 (NEURAL_TERM -> EMPTY .)


state 178

    (120) FACTOR -> ID NEURAL_ID_FAC .

    TIMES           reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    DIVIDE          reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    PLUS            reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    MINUS           reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    GT              reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    LT              reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    LTE             reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    GTE             reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    DOUBLEEQUAL     reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    AND             reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    OR              reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    COMMA           reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    RPAREN          reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)
    SEMICOLON       reduce using rule 120 (FACTOR -> ID NEURAL_ID_FAC .)


state 179

    (123) NEURAL_ID_FAC -> EMPTY .

    TIMES           reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    DIVIDE          reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    PLUS            reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    MINUS           reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    GT              reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    LT              reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    LTE             reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    GTE             reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    AND             reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    OR              reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    COMMA           reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    RPAREN          reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)
    SEMICOLON       reduce using rule 123 (NEURAL_ID_FAC -> EMPTY .)


state 180

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN . EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (61) EXP_RESULT_NEURAL -> . EMPTY
    (146) EMPTY -> .

    BLOCKSTART      reduce using rule 146 (EMPTY -> .)

    EXP_RESULT_NEURAL              shift and go to state 218
    EMPTY                          shift and go to state 219

state 181

    (124) NEURAL_CNT_FACT -> EMPTY .

    TIMES           reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    RPAREN          reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    COMMA           reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)
    SEMICOLON       reduce using rule 124 (NEURAL_CNT_FACT -> EMPTY .)


state 182

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION . RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    RPAREN          shift and go to state 220


state 183

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    BLOCKEND        shift and go to state 221


state 184

    (45) STATEMENT_R -> STATEMENT . STATEMENT_R
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (146) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    STATEMENT                      shift and go to state 184
    STATEMENT_R                    shift and go to state 222
    EMPTY                          shift and go to state 185
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 185

    (46) STATEMENT_R -> EMPTY .

    BLOCKEND        reduce using rule 46 (STATEMENT_R -> EMPTY .)


state 186

    (59) FOR_LOOP -> FOR_K ID EQUALS INT . TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    TO_K            shift and go to state 223


state 187

    (28) PARAM_DECL_R -> COMMA PARAM_DECL .

    RPAREN          reduce using rule 28 (PARAM_DECL_R -> COMMA PARAM_DECL .)


state 188

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK . PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    PROC_BODY                      shift and go to state 224
    STATEMENT                      shift and go to state 225
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 189

    (31) FN_VARBLOCK -> VARS_K . BLOCKSTART LS_VARDECL BLOCKEND

    BLOCKSTART      shift and go to state 226


state 190

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK . PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    PROC_BODY                      shift and go to state 227
    STATEMENT                      shift and go to state 225
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 191

    (79) DIM -> LBRACE INT LIM_NP RBRACE DIM_R .

    COMMA           reduce using rule 79 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)
    SEMICOLON       reduce using rule 79 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)
    EQUALS          reduce using rule 79 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)
    RPAREN          reduce using rule 79 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)


state 192

    (81) DIM_R -> DIM .

    COMMA           reduce using rule 81 (DIM_R -> DIM .)
    SEMICOLON       reduce using rule 81 (DIM_R -> DIM .)
    EQUALS          reduce using rule 81 (DIM_R -> DIM .)
    RPAREN          reduce using rule 81 (DIM_R -> DIM .)


state 193

    (82) DIM_R -> EMPTY .

    COMMA           reduce using rule 82 (DIM_R -> EMPTY .)
    SEMICOLON       reduce using rule 82 (DIM_R -> EMPTY .)
    EQUALS          reduce using rule 82 (DIM_R -> EMPTY .)
    RPAREN          reduce using rule 82 (DIM_R -> EMPTY .)


state 194

    (67) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION . ASSI_H_EXP_NEURAL
    (68) ASSI_H_EXP_NEURAL -> . EMPTY
    (146) EMPTY -> .

    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    ASSI_H_EXP_NEURAL              shift and go to state 228
    EMPTY                          shift and go to state 229

state 195

    (83) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY . RPAREN

    RPAREN          shift and go to state 230


state 196

    (84) POST_VERIFY -> EMPTY .

    RPAREN          reduce using rule 84 (POST_VERIFY -> EMPTY .)


state 197

    (86) EXP_LIST -> H_EXPRESSION EXP_NEURAL . EXP_LIST_2
    (88) EXP_LIST_2 -> . COMMA EXP_LIST
    (89) EXP_LIST_2 -> . EMPTY
    (146) EMPTY -> .

    COMMA           shift and go to state 232
    RPAREN          reduce using rule 146 (EMPTY -> .)

    EXP_LIST_2                     shift and go to state 231
    EMPTY                          shift and go to state 233

state 198

    (87) EXP_NEURAL -> EMPTY .

    COMMA           reduce using rule 87 (EXP_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 87 (EXP_NEURAL -> EMPTY .)


state 199

    (94) ID_LIST -> ID READ_NEURAL ID_LIST_R .

    RPAREN          reduce using rule 94 (ID_LIST -> ID READ_NEURAL ID_LIST_R .)


state 200

    (96) ID_LIST_R -> COMMA . ID_LIST
    (94) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 121

    ID_LIST                        shift and go to state 234

state 201

    (97) ID_LIST_R -> EMPTY .

    RPAREN          reduce using rule 97 (ID_LIST_R -> EMPTY .)


state 202

    (122) FACTOR -> LPAREN H_EXPRESSION RPAREN .

    TIMES           reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DIVIDE          reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    PLUS            reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    MINUS           reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GT              reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LT              reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LTE             reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GTE             reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DOUBLEEQUAL     reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    AND             reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    OR              reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    COMMA           reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    RPAREN          reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    SEMICOLON       reduce using rule 122 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)


state 203

    (102) WRITE_LIST_R -> WRITE_NEURAL COMMA . WRITE_LIST
    (99) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (100) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129
    ID              shift and go to state 133
    LPAREN          shift and go to state 122

    WRITE_LIST                     shift and go to state 235
    H_EXPRESSION                   shift and go to state 124
    CONSTANT                       shift and go to state 125
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132

state 204

    (103) WRITE_LIST_R -> WRITE_NEURAL EMPTY .

    RPAREN          reduce using rule 103 (WRITE_LIST_R -> WRITE_NEURAL EMPTY .)


state 205

    (100) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .

    RPAREN          reduce using rule 100 (WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .)


state 206

    (138) H_EXPRESSION_R -> OR H_EXPRESSION .

    COMMA           reduce using rule 138 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    RPAREN          reduce using rule 138 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    SEMICOLON       reduce using rule 138 (H_EXPRESSION_R -> OR H_EXPRESSION .)


state 207

    (139) H_EXPRESSION_R -> AND H_EXPRESSION .

    COMMA           reduce using rule 139 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    RPAREN          reduce using rule 139 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    SEMICOLON       reduce using rule 139 (H_EXPRESSION_R -> AND H_EXPRESSION .)


state 208

    (127) S_EXPRESSION_R -> CONDI NEURAL_CONDI . EXPRESSION NEURAL_EXP
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    EXPRESSION                     shift and go to state 236
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 209

    (129) NEURAL_CONDI -> EMPTY .

    ID              reduce using rule 129 (NEURAL_CONDI -> EMPTY .)
    LPAREN          reduce using rule 129 (NEURAL_CONDI -> EMPTY .)
    INT             reduce using rule 129 (NEURAL_CONDI -> EMPTY .)
    FLOAT           reduce using rule 129 (NEURAL_CONDI -> EMPTY .)
    STRING          reduce using rule 129 (NEURAL_CONDI -> EMPTY .)


state 210

    (106) EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .

    GT              reduce using rule 106 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LT              reduce using rule 106 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LTE             reduce using rule 106 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    GTE             reduce using rule 106 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    DOUBLEEQUAL     reduce using rule 106 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    AND             reduce using rule 106 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    OR              reduce using rule 106 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    COMMA           reduce using rule 106 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    RPAREN          reduce using rule 106 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    SEMICOLON       reduce using rule 106 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)


state 211

    (108) EXPRESSION_R -> PLUS . NEURAL_PLUS EXPRESSION
    (111) NEURAL_PLUS -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    LPAREN          reduce using rule 146 (EMPTY -> .)
    INT             reduce using rule 146 (EMPTY -> .)
    FLOAT           reduce using rule 146 (EMPTY -> .)
    STRING          reduce using rule 146 (EMPTY -> .)

    NEURAL_PLUS                    shift and go to state 237
    EMPTY                          shift and go to state 238

state 212

    (109) EXPRESSION_R -> MINUS . NEURAL_MINUS EXPRESSION
    (112) NEURAL_MINUS -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    LPAREN          reduce using rule 146 (EMPTY -> .)
    INT             reduce using rule 146 (EMPTY -> .)
    FLOAT           reduce using rule 146 (EMPTY -> .)
    STRING          reduce using rule 146 (EMPTY -> .)

    NEURAL_MINUS                   shift and go to state 239
    EMPTY                          shift and go to state 240

state 213

    (110) EXPRESSION_R -> EMPTY .

    GT              reduce using rule 110 (EXPRESSION_R -> EMPTY .)
    LT              reduce using rule 110 (EXPRESSION_R -> EMPTY .)
    LTE             reduce using rule 110 (EXPRESSION_R -> EMPTY .)
    GTE             reduce using rule 110 (EXPRESSION_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 110 (EXPRESSION_R -> EMPTY .)
    AND             reduce using rule 110 (EXPRESSION_R -> EMPTY .)
    OR              reduce using rule 110 (EXPRESSION_R -> EMPTY .)
    COMMA           reduce using rule 110 (EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 110 (EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 110 (EXPRESSION_R -> EMPTY .)


state 214

    (113) TERM -> FACTOR NEURAL_TERM TERM_R .

    PLUS            reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    MINUS           reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GT              reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LT              reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LTE             reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GTE             reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    DOUBLEEQUAL     reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    AND             reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    OR              reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    COMMA           reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    RPAREN          reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    SEMICOLON       reduce using rule 113 (TERM -> FACTOR NEURAL_TERM TERM_R .)


state 215

    (115) TERM_R -> TIMES . NEURAL_TIMES TERM
    (118) NEURAL_TIMES -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    LPAREN          reduce using rule 146 (EMPTY -> .)
    INT             reduce using rule 146 (EMPTY -> .)
    FLOAT           reduce using rule 146 (EMPTY -> .)
    STRING          reduce using rule 146 (EMPTY -> .)

    NEURAL_TIMES                   shift and go to state 241
    EMPTY                          shift and go to state 242

state 216

    (116) TERM_R -> DIVIDE . NEURAL_DIVIDE TERM
    (119) NEURAL_DIVIDE -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    LPAREN          reduce using rule 146 (EMPTY -> .)
    INT             reduce using rule 146 (EMPTY -> .)
    FLOAT           reduce using rule 146 (EMPTY -> .)
    STRING          reduce using rule 146 (EMPTY -> .)

    NEURAL_DIVIDE                  shift and go to state 243
    EMPTY                          shift and go to state 244

state 217

    (117) TERM_R -> EMPTY .

    PLUS            reduce using rule 117 (TERM_R -> EMPTY .)
    MINUS           reduce using rule 117 (TERM_R -> EMPTY .)
    GT              reduce using rule 117 (TERM_R -> EMPTY .)
    LT              reduce using rule 117 (TERM_R -> EMPTY .)
    LTE             reduce using rule 117 (TERM_R -> EMPTY .)
    GTE             reduce using rule 117 (TERM_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 117 (TERM_R -> EMPTY .)
    AND             reduce using rule 117 (TERM_R -> EMPTY .)
    OR              reduce using rule 117 (TERM_R -> EMPTY .)
    COMMA           reduce using rule 117 (TERM_R -> EMPTY .)
    RPAREN          reduce using rule 117 (TERM_R -> EMPTY .)
    SEMICOLON       reduce using rule 117 (TERM_R -> EMPTY .)


state 218

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKSTART      shift and go to state 245


state 219

    (61) EXP_RESULT_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 61 (EXP_RESULT_NEURAL -> EMPTY .)


state 220

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN . WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (57) WHILE_POST_NEURAL -> . EMPTY
    (146) EMPTY -> .

    BLOCKSTART      reduce using rule 146 (EMPTY -> .)

    WHILE_POST_NEURAL              shift and go to state 246
    EMPTY                          shift and go to state 247

state 221

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    WHILE_K         shift and go to state 248


state 222

    (45) STATEMENT_R -> STATEMENT STATEMENT_R .

    BLOCKEND        reduce using rule 45 (STATEMENT_R -> STATEMENT STATEMENT_R .)


state 223

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K . INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 249


state 224

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY . RETURN BLOCKEND POST_FUNC PROC_DECL
    (105) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON

    RETURN_K        shift and go to state 251

    RETURN                         shift and go to state 250

state 225

    (30) PROC_BODY -> STATEMENT . PROC_BODY_R
    (38) PROC_BODY_R -> . PROC_BODY
    (39) PROC_BODY_R -> . EMPTY
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (146) EMPTY -> .
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    RETURN_K        reduce using rule 146 (EMPTY -> .)
    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    STATEMENT                      shift and go to state 225
    PROC_BODY_R                    shift and go to state 252
    PROC_BODY                      shift and go to state 253
    EMPTY                          shift and go to state 254
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 226

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART . LS_VARDECL BLOCKEND
    (32) LS_VARDECL -> . TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    LS_VARDECL                     shift and go to state 255
    TYPE                           shift and go to state 256

state 227

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY . BLOCKEND POST_FUNC PROC_DECL

    BLOCKEND        shift and go to state 257


state 228

    (67) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .

    SEMICOLON       reduce using rule 67 (ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .)


state 229

    (68) ASSI_H_EXP_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 68 (ASSI_H_EXP_NEURAL -> EMPTY .)


state 230

    (83) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN .

    SEMICOLON       reduce using rule 83 (FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN .)


state 231

    (86) EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2 .

    RPAREN          reduce using rule 86 (EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2 .)


state 232

    (88) EXP_LIST_2 -> COMMA . EXP_LIST
    (86) EXP_LIST -> . H_EXPRESSION EXP_NEURAL EXP_LIST_2
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    EXP_LIST                       shift and go to state 258
    H_EXPRESSION                   shift and go to state 148
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 233

    (89) EXP_LIST_2 -> EMPTY .

    RPAREN          reduce using rule 89 (EXP_LIST_2 -> EMPTY .)


state 234

    (96) ID_LIST_R -> COMMA ID_LIST .

    RPAREN          reduce using rule 96 (ID_LIST_R -> COMMA ID_LIST .)


state 235

    (102) WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .

    RPAREN          reduce using rule 102 (WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .)


state 236

    (127) S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION . NEURAL_EXP
    (126) NEURAL_EXP -> . EMPTY
    (146) EMPTY -> .

    OR              reduce using rule 146 (EMPTY -> .)
    AND             reduce using rule 146 (EMPTY -> .)
    COMMA           reduce using rule 146 (EMPTY -> .)
    RPAREN          reduce using rule 146 (EMPTY -> .)
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    NEURAL_EXP                     shift and go to state 259
    EMPTY                          shift and go to state 260

state 237

    (108) EXPRESSION_R -> PLUS NEURAL_PLUS . EXPRESSION
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    EXPRESSION                     shift and go to state 261
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 238

    (111) NEURAL_PLUS -> EMPTY .

    ID              reduce using rule 111 (NEURAL_PLUS -> EMPTY .)
    LPAREN          reduce using rule 111 (NEURAL_PLUS -> EMPTY .)
    INT             reduce using rule 111 (NEURAL_PLUS -> EMPTY .)
    FLOAT           reduce using rule 111 (NEURAL_PLUS -> EMPTY .)
    STRING          reduce using rule 111 (NEURAL_PLUS -> EMPTY .)


state 239

    (109) EXPRESSION_R -> MINUS NEURAL_MINUS . EXPRESSION
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    EXPRESSION                     shift and go to state 262
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 240

    (112) NEURAL_MINUS -> EMPTY .

    ID              reduce using rule 112 (NEURAL_MINUS -> EMPTY .)
    LPAREN          reduce using rule 112 (NEURAL_MINUS -> EMPTY .)
    INT             reduce using rule 112 (NEURAL_MINUS -> EMPTY .)
    FLOAT           reduce using rule 112 (NEURAL_MINUS -> EMPTY .)
    STRING          reduce using rule 112 (NEURAL_MINUS -> EMPTY .)


state 241

    (115) TERM_R -> TIMES NEURAL_TIMES . TERM
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    TERM                           shift and go to state 263
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 242

    (118) NEURAL_TIMES -> EMPTY .

    ID              reduce using rule 118 (NEURAL_TIMES -> EMPTY .)
    LPAREN          reduce using rule 118 (NEURAL_TIMES -> EMPTY .)
    INT             reduce using rule 118 (NEURAL_TIMES -> EMPTY .)
    FLOAT           reduce using rule 118 (NEURAL_TIMES -> EMPTY .)
    STRING          reduce using rule 118 (NEURAL_TIMES -> EMPTY .)


state 243

    (116) TERM_R -> DIVIDE NEURAL_DIVIDE . TERM
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    TERM                           shift and go to state 264
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 244

    (119) NEURAL_DIVIDE -> EMPTY .

    ID              reduce using rule 119 (NEURAL_DIVIDE -> EMPTY .)
    LPAREN          reduce using rule 119 (NEURAL_DIVIDE -> EMPTY .)
    INT             reduce using rule 119 (NEURAL_DIVIDE -> EMPTY .)
    FLOAT           reduce using rule 119 (NEURAL_DIVIDE -> EMPTY .)
    STRING          reduce using rule 119 (NEURAL_DIVIDE -> EMPTY .)


state 245

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (146) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    STATEMENT_R                    shift and go to state 265
    STATEMENT                      shift and go to state 184
    EMPTY                          shift and go to state 185
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 246

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    BLOCKSTART      shift and go to state 266


state 247

    (57) WHILE_POST_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 57 (WHILE_POST_NEURAL -> EMPTY .)


state 248

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K . LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    LPAREN          shift and go to state 267


state 249

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT . DO_K BLOCKSTART STATEMENT_R BLOCKEND

    DO_K            shift and go to state 268


state 250

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN . BLOCKEND POST_FUNC PROC_DECL

    BLOCKEND        shift and go to state 269


state 251

    (105) RETURN -> RETURN_K . LPAREN H_EXPRESSION RPAREN SEMICOLON

    LPAREN          shift and go to state 270


state 252

    (30) PROC_BODY -> STATEMENT PROC_BODY_R .

    RETURN_K        reduce using rule 30 (PROC_BODY -> STATEMENT PROC_BODY_R .)
    BLOCKEND        reduce using rule 30 (PROC_BODY -> STATEMENT PROC_BODY_R .)


state 253

    (38) PROC_BODY_R -> PROC_BODY .

    RETURN_K        reduce using rule 38 (PROC_BODY_R -> PROC_BODY .)
    BLOCKEND        reduce using rule 38 (PROC_BODY_R -> PROC_BODY .)


state 254

    (39) PROC_BODY_R -> EMPTY .

    RETURN_K        reduce using rule 39 (PROC_BODY_R -> EMPTY .)
    BLOCKEND        reduce using rule 39 (PROC_BODY_R -> EMPTY .)


state 255

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL . BLOCKEND

    BLOCKEND        shift and go to state 271


state 256

    (32) LS_VARDECL -> TYPE . COLON FNVAR_LS SEMICOLON LS_VARDECL_R

    COLON           shift and go to state 272


state 257

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND . POST_FUNC PROC_DECL
    (22) POST_FUNC -> . EMPTY
    (146) EMPTY -> .

    FUNCTION_K      reduce using rule 146 (EMPTY -> .)
    MAIN_K          reduce using rule 146 (EMPTY -> .)

    POST_FUNC                      shift and go to state 273
    EMPTY                          shift and go to state 274

state 258

    (88) EXP_LIST_2 -> COMMA EXP_LIST .

    RPAREN          reduce using rule 88 (EXP_LIST_2 -> COMMA EXP_LIST .)


state 259

    (127) S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .

    OR              reduce using rule 127 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    AND             reduce using rule 127 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    COMMA           reduce using rule 127 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    RPAREN          reduce using rule 127 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    SEMICOLON       reduce using rule 127 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)


state 260

    (126) NEURAL_EXP -> EMPTY .

    OR              reduce using rule 126 (NEURAL_EXP -> EMPTY .)
    AND             reduce using rule 126 (NEURAL_EXP -> EMPTY .)
    COMMA           reduce using rule 126 (NEURAL_EXP -> EMPTY .)
    RPAREN          reduce using rule 126 (NEURAL_EXP -> EMPTY .)
    SEMICOLON       reduce using rule 126 (NEURAL_EXP -> EMPTY .)


state 261

    (108) EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .

    GT              reduce using rule 108 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LT              reduce using rule 108 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LTE             reduce using rule 108 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    GTE             reduce using rule 108 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 108 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    AND             reduce using rule 108 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    OR              reduce using rule 108 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    COMMA           reduce using rule 108 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    RPAREN          reduce using rule 108 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    SEMICOLON       reduce using rule 108 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)


state 262

    (109) EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .

    GT              reduce using rule 109 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LT              reduce using rule 109 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LTE             reduce using rule 109 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    GTE             reduce using rule 109 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 109 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    AND             reduce using rule 109 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    OR              reduce using rule 109 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    COMMA           reduce using rule 109 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    RPAREN          reduce using rule 109 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    SEMICOLON       reduce using rule 109 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)


state 263

    (115) TERM_R -> TIMES NEURAL_TIMES TERM .

    PLUS            reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    MINUS           reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GT              reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LT              reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LTE             reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GTE             reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    DOUBLEEQUAL     reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    AND             reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    OR              reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    COMMA           reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    RPAREN          reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    SEMICOLON       reduce using rule 115 (TERM_R -> TIMES NEURAL_TIMES TERM .)


state 264

    (116) TERM_R -> DIVIDE NEURAL_DIVIDE TERM .

    PLUS            reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    MINUS           reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GT              reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LT              reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LTE             reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GTE             reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    DOUBLEEQUAL     reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    AND             reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    OR              reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    COMMA           reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    RPAREN          reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    SEMICOLON       reduce using rule 116 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)


state 265

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKEND        shift and go to state 275


state 266

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (146) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    STATEMENT_R                    shift and go to state 276
    STATEMENT                      shift and go to state 184
    EMPTY                          shift and go to state 185
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 267

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN . H_EXPRESSION RPAREN DW_END_NEURAL
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    H_EXPRESSION                   shift and go to state 277
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 268

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 278


state 269

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND . POST_FUNC PROC_DECL
    (22) POST_FUNC -> . EMPTY
    (146) EMPTY -> .

    FUNCTION_K      reduce using rule 146 (EMPTY -> .)
    MAIN_K          reduce using rule 146 (EMPTY -> .)

    POST_FUNC                      shift and go to state 279
    EMPTY                          shift and go to state 274

state 270

    (105) RETURN -> RETURN_K LPAREN . H_EXPRESSION RPAREN SEMICOLON
    (137) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (125) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (106) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (113) TERM -> . FACTOR NEURAL_TERM TERM_R
    (120) FACTOR -> . ID NEURAL_ID_FAC
    (121) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (122) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (90) CONSTANT -> . INT
    (91) CONSTANT -> . FLOAT
    (92) CONSTANT -> . STRING

    ID              shift and go to state 133
    LPAREN          shift and go to state 122
    INT             shift and go to state 127
    FLOAT           shift and go to state 128
    STRING          shift and go to state 129

    H_EXPRESSION                   shift and go to state 280
    S_EXPRESSION                   shift and go to state 126
    EXPRESSION                     shift and go to state 130
    TERM                           shift and go to state 131
    FACTOR                         shift and go to state 132
    CONSTANT                       shift and go to state 135

state 271

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .

    ID              reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    READ_K          reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    WRITE_K         reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    IF_K            reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    WHILE_K         reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    DO_K            reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    FOR_K           reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)


state 272

    (32) LS_VARDECL -> TYPE COLON . FNVAR_LS SEMICOLON LS_VARDECL_R
    (35) FNVAR_LS -> . VAR FNVAR_LS2
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (77) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    FNVAR_LS                       shift and go to state 281
    VAR                            shift and go to state 282
    ARRAY                          shift and go to state 44

state 273

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (146) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 146 (EMPTY -> .)

    PROC_DECL                      shift and go to state 283
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 274

    (22) POST_FUNC -> EMPTY .

    FUNCTION_K      reduce using rule 22 (POST_FUNC -> EMPTY .)
    MAIN_K          reduce using rule 22 (POST_FUNC -> EMPTY .)


state 275

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . DECISION_ALT DECISION_END_NEURAL
    (63) DECISION_ALT -> . ELSE
    (64) DECISION_ALT -> . EMPTY
    (65) ELSE -> . ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
    (146) EMPTY -> .
    (66) ELSE_NEURAL -> . EMPTY

    ID              reduce using rule 146 (EMPTY -> .)
    READ_K          reduce using rule 146 (EMPTY -> .)
    WRITE_K         reduce using rule 146 (EMPTY -> .)
    IF_K            reduce using rule 146 (EMPTY -> .)
    WHILE_K         reduce using rule 146 (EMPTY -> .)
    DO_K            reduce using rule 146 (EMPTY -> .)
    FOR_K           reduce using rule 146 (EMPTY -> .)
    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    RETURN_K        reduce using rule 146 (EMPTY -> .)
    ELSE_K          reduce using rule 146 (EMPTY -> .)

    DECISION_ALT                   shift and go to state 284
    ELSE                           shift and go to state 285
    EMPTY                          shift and go to state 286
    ELSE_NEURAL                    shift and go to state 287

state 276

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND WHILE_END_NEURAL

    BLOCKEND        shift and go to state 288


state 277

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION . RPAREN DW_END_NEURAL

    RPAREN          shift and go to state 289


state 278

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART . STATEMENT_R BLOCKEND
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (146) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    STATEMENT_R                    shift and go to state 290
    STATEMENT                      shift and go to state 184
    EMPTY                          shift and go to state 185
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 279

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (146) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 146 (EMPTY -> .)

    PROC_DECL                      shift and go to state 291
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 280

    (105) RETURN -> RETURN_K LPAREN H_EXPRESSION . RPAREN SEMICOLON

    RPAREN          shift and go to state 292


state 281

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS . SEMICOLON LS_VARDECL_R

    SEMICOLON       shift and go to state 293


state 282

    (35) FNVAR_LS -> VAR . FNVAR_LS2
    (36) FNVAR_LS2 -> . COMMA FNVAR_LS
    (37) FNVAR_LS2 -> . EMPTY
    (146) EMPTY -> .

    COMMA           shift and go to state 295
    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    FNVAR_LS2                      shift and go to state 294
    EMPTY                          shift and go to state 296

state 283

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL .

    MAIN_K          reduce using rule 19 (PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL .)


state 284

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT . DECISION_END_NEURAL
    (62) DECISION_END_NEURAL -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    READ_K          reduce using rule 146 (EMPTY -> .)
    WRITE_K         reduce using rule 146 (EMPTY -> .)
    IF_K            reduce using rule 146 (EMPTY -> .)
    WHILE_K         reduce using rule 146 (EMPTY -> .)
    DO_K            reduce using rule 146 (EMPTY -> .)
    FOR_K           reduce using rule 146 (EMPTY -> .)
    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    RETURN_K        reduce using rule 146 (EMPTY -> .)

    DECISION_END_NEURAL            shift and go to state 297
    EMPTY                          shift and go to state 298

state 285

    (63) DECISION_ALT -> ELSE .

    ID              reduce using rule 63 (DECISION_ALT -> ELSE .)
    READ_K          reduce using rule 63 (DECISION_ALT -> ELSE .)
    WRITE_K         reduce using rule 63 (DECISION_ALT -> ELSE .)
    IF_K            reduce using rule 63 (DECISION_ALT -> ELSE .)
    WHILE_K         reduce using rule 63 (DECISION_ALT -> ELSE .)
    DO_K            reduce using rule 63 (DECISION_ALT -> ELSE .)
    FOR_K           reduce using rule 63 (DECISION_ALT -> ELSE .)
    BLOCKEND        reduce using rule 63 (DECISION_ALT -> ELSE .)
    RETURN_K        reduce using rule 63 (DECISION_ALT -> ELSE .)


state 286

    (64) DECISION_ALT -> EMPTY .
    (66) ELSE_NEURAL -> EMPTY .

    ID              reduce using rule 64 (DECISION_ALT -> EMPTY .)
    READ_K          reduce using rule 64 (DECISION_ALT -> EMPTY .)
    WRITE_K         reduce using rule 64 (DECISION_ALT -> EMPTY .)
    IF_K            reduce using rule 64 (DECISION_ALT -> EMPTY .)
    WHILE_K         reduce using rule 64 (DECISION_ALT -> EMPTY .)
    DO_K            reduce using rule 64 (DECISION_ALT -> EMPTY .)
    FOR_K           reduce using rule 64 (DECISION_ALT -> EMPTY .)
    BLOCKEND        reduce using rule 64 (DECISION_ALT -> EMPTY .)
    RETURN_K        reduce using rule 64 (DECISION_ALT -> EMPTY .)
    ELSE_K          reduce using rule 66 (ELSE_NEURAL -> EMPTY .)


state 287

    (65) ELSE -> ELSE_NEURAL . ELSE_K BLOCKSTART STATEMENT_R BLOCKEND

    ELSE_K          shift and go to state 299


state 288

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . WHILE_END_NEURAL
    (58) WHILE_END_NEURAL -> . EMPTY
    (146) EMPTY -> .

    ID              reduce using rule 146 (EMPTY -> .)
    READ_K          reduce using rule 146 (EMPTY -> .)
    WRITE_K         reduce using rule 146 (EMPTY -> .)
    IF_K            reduce using rule 146 (EMPTY -> .)
    WHILE_K         reduce using rule 146 (EMPTY -> .)
    DO_K            reduce using rule 146 (EMPTY -> .)
    FOR_K           reduce using rule 146 (EMPTY -> .)
    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    RETURN_K        reduce using rule 146 (EMPTY -> .)

    WHILE_END_NEURAL               shift and go to state 300
    EMPTY                          shift and go to state 301

state 289

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN . DW_END_NEURAL
    (54) DW_END_NEURAL -> . EMPTY
    (146) EMPTY -> .

    SEMICOLON       reduce using rule 146 (EMPTY -> .)

    DW_END_NEURAL                  shift and go to state 302
    EMPTY                          shift and go to state 303

state 290

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 304


state 291

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL .

    MAIN_K          reduce using rule 21 (PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL .)


state 292

    (105) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 305


state 293

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON . LS_VARDECL_R
    (33) LS_VARDECL_R -> . LS_VARDECL
    (34) LS_VARDECL_R -> . EMPTY
    (32) LS_VARDECL -> . TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
    (146) EMPTY -> .
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 256
    LS_VARDECL_R                   shift and go to state 306
    LS_VARDECL                     shift and go to state 307
    EMPTY                          shift and go to state 308

state 294

    (35) FNVAR_LS -> VAR FNVAR_LS2 .

    SEMICOLON       reduce using rule 35 (FNVAR_LS -> VAR FNVAR_LS2 .)


state 295

    (36) FNVAR_LS2 -> COMMA . FNVAR_LS
    (35) FNVAR_LS -> . VAR FNVAR_LS2
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (77) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    FNVAR_LS                       shift and go to state 309
    VAR                            shift and go to state 282
    ARRAY                          shift and go to state 44

state 296

    (37) FNVAR_LS2 -> EMPTY .

    SEMICOLON       reduce using rule 37 (FNVAR_LS2 -> EMPTY .)


state 297

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .

    ID              reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    READ_K          reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WRITE_K         reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    IF_K            reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WHILE_K         reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    DO_K            reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    FOR_K           reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    BLOCKEND        reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    RETURN_K        reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)


state 298

    (62) DECISION_END_NEURAL -> EMPTY .

    ID              reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    DO_K            reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)


state 299

    (65) ELSE -> ELSE_NEURAL ELSE_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 310


state 300

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .

    ID              reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    READ_K          reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    WRITE_K         reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    IF_K            reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    WHILE_K         reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    DO_K            reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    FOR_K           reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    BLOCKEND        reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    RETURN_K        reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)


state 301

    (58) WHILE_END_NEURAL -> EMPTY .

    ID              reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    DO_K            reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)


state 302

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL .

    SEMICOLON       reduce using rule 52 (DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL .)


state 303

    (54) DW_END_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 54 (DW_END_NEURAL -> EMPTY .)


state 304

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    DO_K            reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)


state 305

    (105) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .

    BLOCKEND        reduce using rule 105 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)


state 306

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R .

    BLOCKEND        reduce using rule 32 (LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R .)


state 307

    (33) LS_VARDECL_R -> LS_VARDECL .

    BLOCKEND        reduce using rule 33 (LS_VARDECL_R -> LS_VARDECL .)


state 308

    (34) LS_VARDECL_R -> EMPTY .

    BLOCKEND        reduce using rule 34 (LS_VARDECL_R -> EMPTY .)


state 309

    (36) FNVAR_LS2 -> COMMA FNVAR_LS .

    SEMICOLON       reduce using rule 36 (FNVAR_LS2 -> COMMA FNVAR_LS .)


state 310

    (65) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART . STATEMENT_R BLOCKEND
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (146) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (83) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (93) READ -> . READ_K LPAREN ID_LIST RPAREN
    (98) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (75) VAR -> . ID
    (76) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (77) ARRAY -> . ID ARR_ID_NP DIM
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 146 (EMPTY -> .)
    ID              shift and go to state 74
    READ_K          shift and go to state 75
    WRITE_K         shift and go to state 76
    IF_K            shift and go to state 79
    WHILE_K         shift and go to state 83
    DO_K            shift and go to state 84
    FOR_K           shift and go to state 85

    STATEMENT_R                    shift and go to state 311
    STATEMENT                      shift and go to state 184
    EMPTY                          shift and go to state 185
    ASSIGN                         shift and go to state 68
    FUNC_CALL                      shift and go to state 69
    READ                           shift and go to state 70
    WRITE                          shift and go to state 71
    FLOW                           shift and go to state 72
    VAR                            shift and go to state 73
    DECISION                       shift and go to state 77
    LOOP                           shift and go to state 78
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 80
    DO_WHILE_LOOP                  shift and go to state 81
    FOR_LOOP                       shift and go to state 82

state 311

    (65) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 312


state 312

    (65) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    DO_K            reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 130 resolved as shift
WARNING: shift/reduce conflict for AND in state 130 resolved as shift
WARNING: reduce/reduce conflict in state 159 resolved using rule (CONSTANT_WRITE_N -> EMPTY)
WARNING: rejected rule (NEURAL_CNT_FACT -> EMPTY) in state 159
