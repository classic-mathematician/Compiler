Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK
Rule 2     neural_program_id -> EMPTY
Rule 3     BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
Rule 4     VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND
Rule 5     VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
Rule 6     VAR_DECL_R -> VAR_DECL
Rule 7     VAR_DECL_R -> EMPTY
Rule 8     VAR_LIST -> ID VAR_LIST2
Rule 9     VAR_LIST2 -> COMMA ID VAR_LIST2
Rule 10    VAR_LIST2 -> EMPTY
Rule 11    TYPE -> INT_K NEURAL_TYPE
Rule 12    TYPE -> FLOAT_K NEURAL_TYPE
Rule 13    TYPE -> STRING_K NEURAL_TYPE
Rule 14    NEURAL_TYPE -> EMPTY
Rule 15    PROC_BLOCK -> PROC_DECL
Rule 16    PROC_DECL -> PROC_DECL_RETURN
Rule 17    PROC_DECL -> PROC_DECL_VOID
Rule 18    PROC_DECL -> EMPTY
Rule 19    PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
Rule 20    neural_proc_void_id -> EMPTY
Rule 21    PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
Rule 22    POST_FUNC -> EMPTY
Rule 23    neural_proc_return_id -> EMPTY
Rule 24    neural_param_decl -> EMPTY
Rule 25    PARAM_DECL -> TYPE ID neuro PARAM_DECL_R
Rule 26    PARAM_DECL -> EMPTY
Rule 27    neuro -> EMPTY
Rule 28    PARAM_DECL_R -> COMMA PARAM_DECL
Rule 29    PARAM_DECL_R -> EMPTY
Rule 30    PROC_BODY -> STATEMENT PROC_BODY_R
Rule 31    FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND
Rule 32    LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
Rule 33    LS_VARDECL_R -> LS_VARDECL
Rule 34    LS_VARDECL_R -> EMPTY
Rule 35    FNVAR_LS -> ID FNVAR_LS2
Rule 36    FNVAR_LS2 -> COMMA ID FNVAR_LS2
Rule 37    FNVAR_LS2 -> EMPTY
Rule 38    PROC_BODY_R -> PROC_BODY
Rule 39    PROC_BODY_R -> EMPTY
Rule 40    STATEMENT -> ASSIGN SEMICOLON
Rule 41    STATEMENT -> FUNC_CALL SEMICOLON
Rule 42    STATEMENT -> READ SEMICOLON
Rule 43    STATEMENT -> WRITE SEMICOLON
Rule 44    STATEMENT -> FLOW
Rule 45    STATEMENT_R -> STATEMENT STATEMENT_R
Rule 46    STATEMENT_R -> EMPTY
Rule 47    FLOW -> DECISION
Rule 48    FLOW -> LOOP
Rule 49    LOOP -> WHILE_LOOP
Rule 50    LOOP -> DO_WHILE_LOOP SEMICOLON
Rule 51    LOOP -> FOR_LOOP
Rule 52    DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
Rule 53    DW_PREV_NEURAL -> EMPTY
Rule 54    DW_END_NEURAL -> EMPTY
Rule 55    WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
Rule 56    WHILE_PREV_NEURAL -> EMPTY
Rule 57    WHILE_POST_NEURAL -> EMPTY
Rule 58    WHILE_END_NEURAL -> EMPTY
Rule 59    FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 60    DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
Rule 61    EXP_RESULT_NEURAL -> EMPTY
Rule 62    DECISION_END_NEURAL -> EMPTY
Rule 63    DECISION_ALT -> ELSE
Rule 64    DECISION_ALT -> EMPTY
Rule 65    ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 66    ELSE_NEURAL -> EMPTY
Rule 67    ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
Rule 68    ASSI_H_EXP_NEURAL -> EMPTY
Rule 69    EQUALS_NEURAL -> EMPTY
Rule 70    ASSIGN_VAR_N -> EMPTY
Rule 71    VAR -> ID
Rule 72    VAR -> ARRAY
Rule 73    ARRAY -> ID LBRACE INT RBRACE
Rule 74    FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
Rule 75    POST_VERIFY -> EMPTY
Rule 76    PRE_VERIFY -> EMPTY
Rule 77    EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2
Rule 78    EXP_NEURAL -> EMPTY
Rule 79    EXP_LIST_2 -> COMMA EXP_LIST
Rule 80    EXP_LIST_2 -> EMPTY
Rule 81    CONSTANT -> INT
Rule 82    CONSTANT -> FLOAT
Rule 83    CONSTANT -> STRING
Rule 84    READ -> READ_K LPAREN ID_LIST RPAREN
Rule 85    ID_LIST -> ID READ_NEURAL ID_LIST_R
Rule 86    READ_NEURAL -> EMPTY
Rule 87    ID_LIST_R -> COMMA ID_LIST
Rule 88    ID_LIST_R -> EMPTY
Rule 89    WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN
Rule 90    WRITE_LIST -> H_EXPRESSION WRITE_LIST_R
Rule 91    WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
Rule 92    CONSTANT_WRITE_N -> EMPTY
Rule 93    WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST
Rule 94    WRITE_LIST_R -> WRITE_NEURAL EMPTY
Rule 95    WRITE_NEURAL -> EMPTY
Rule 96    RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
Rule 97    EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R
Rule 98    NEURAL_EXPRESSION -> EMPTY
Rule 99    EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION
Rule 100   EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION
Rule 101   EXPRESSION_R -> EMPTY
Rule 102   NEURAL_PLUS -> EMPTY
Rule 103   NEURAL_MINUS -> EMPTY
Rule 104   TERM -> FACTOR NEURAL_TERM TERM_R
Rule 105   NEURAL_TERM -> EMPTY
Rule 106   TERM_R -> TIMES NEURAL_TIMES TERM
Rule 107   TERM_R -> DIVIDE NEURAL_DIVIDE TERM
Rule 108   TERM_R -> EMPTY
Rule 109   NEURAL_TIMES -> EMPTY
Rule 110   NEURAL_DIVIDE -> EMPTY
Rule 111   FACTOR -> ID NEURAL_ID_FAC
Rule 112   FACTOR -> CONSTANT NEURAL_CNT_FACT
Rule 113   FACTOR -> LPAREN H_EXPRESSION RPAREN
Rule 114   NEURAL_ID_FAC -> EMPTY
Rule 115   NEURAL_CNT_FACT -> EMPTY
Rule 116   S_EXPRESSION -> EXPRESSION
Rule 117   S_EXPRESSION -> EXPRESSION GT EXPRESSION
Rule 118   S_EXPRESSION -> EXPRESSION LT EXPRESSION
Rule 119   S_EXPRESSION -> EXPRESSION GTE EXPRESSION
Rule 120   S_EXPRESSION -> EXPRESSION LTE EXPRESSION
Rule 121   S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION
Rule 122   H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R
Rule 123   H_EXPRESSION_R -> OR H_EXPRESSION
Rule 124   H_EXPRESSION_R -> AND H_EXPRESSION
Rule 125   H_EXPRESSION_R -> EMPTY
Rule 126   PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
Rule 127   MAIN_NEURAL -> EMPTY
Rule 128   PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R
Rule 129   PRINCIPAL_BODY -> EMPTY
Rule 130   PRINCIPAL_BODY_R -> PRINCIPAL_BODY
Rule 131   EMPTY -> <empty>

Terminals, with rules where they appear

AND                  : 124
BLOCKEND             : 4 19 21 31 52 55 59 60 65 126
BLOCKSTART           : 4 19 21 31 52 55 59 60 65 126
COLON                : 5 32
COMMA                : 9 28 36 79 87 93
COMMENT              : 
DIVIDE               : 107
DOUBLEEQUAL          : 121
DO_K                 : 52 59
ELSE_K               : 65
EQUALS               : 59 67
FLOAT                : 82
FLOAT_K              : 12
FOR_K                : 59
FUNCTION_K           : 19 21
GT                   : 117
GTE                  : 119
ID                   : 1 8 9 19 21 25 35 36 59 71 73 74 85 111
IF_K                 : 60
INT                  : 59 59 73 81
INT_K                : 11
LBRACE               : 73
LPAREN               : 19 21 52 55 60 74 84 89 96 113 126
LT                   : 118
LTE                  : 120
MAIN_K               : 126
MINUS                : 100
OR                   : 123
PLUS                 : 99
PROGRAM_K            : 1
RBRACE               : 73
READ_K               : 84
RETURN_K             : 96
RPAREN               : 19 21 52 55 60 74 84 89 96 113 126
SEMICOLON            : 1 5 32 40 41 42 43 50 96
STRING               : 83
STRING_K             : 13
TIMES                : 106
TO_K                 : 59
VARS_K               : 4 31
VOID_K               : 19
WHILE_K              : 52 55
WRITE_K              : 89
error                : 

Nonterminals, with rules where they appear

ARRAY                : 72
ASSIGN               : 40
ASSIGN_VAR_N         : 67
ASSI_H_EXP_NEURAL    : 67
BLOCK                : 1
CONSTANT             : 91 112
CONSTANT_WRITE_N     : 91
DECISION             : 47
DECISION_ALT         : 60
DECISION_END_NEURAL  : 60
DO_WHILE_LOOP        : 50
DW_END_NEURAL        : 52
DW_PREV_NEURAL       : 52
ELSE                 : 63
ELSE_NEURAL          : 65
EMPTY                : 2 7 10 14 18 20 22 23 24 26 27 29 34 37 39 46 53 54 56 57 58 61 62 64 66 68 69 70 75 76 78 80 86 88 92 94 95 98 101 102 103 105 108 109 110 114 115 125 127 129
EQUALS_NEURAL        : 67
EXPRESSION           : 99 100 116 117 117 118 118 119 119 120 120 121 121
EXPRESSION_R         : 97
EXP_LIST             : 74 79
EXP_LIST_2           : 77
EXP_NEURAL           : 77
EXP_RESULT_NEURAL    : 60
FACTOR               : 104
FLOW                 : 44
FNVAR_LS             : 32
FNVAR_LS2            : 35 36
FN_VARBLOCK          : 19 21
FOR_LOOP             : 51
FUNC_CALL            : 41
H_EXPRESSION         : 52 55 60 67 77 90 96 113 123 124
H_EXPRESSION_R       : 122
ID_LIST              : 84 87
ID_LIST_R            : 85
LOOP                 : 48
LS_VARDECL           : 31 33
LS_VARDECL_R         : 32
MAIN_NEURAL          : 126
NEURAL_CNT_FACT      : 112
NEURAL_DIVIDE        : 107
NEURAL_EXPRESSION    : 97
NEURAL_ID_FAC        : 111
NEURAL_MINUS         : 100
NEURAL_PLUS          : 99
NEURAL_TERM          : 104
NEURAL_TIMES         : 106
NEURAL_TYPE          : 11 12 13
PARAM_DECL           : 19 21 28
PARAM_DECL_R         : 25
POST_FUNC            : 19 21
POST_VERIFY          : 74
PRE_VERIFY           : 74
PRINCIPAL_BLOCK      : 3
PRINCIPAL_BODY       : 126 130
PRINCIPAL_BODY_R     : 128
PROC_BLOCK           : 3
PROC_BODY            : 19 21 38
PROC_BODY_R          : 30
PROC_DECL            : 15 19 21
PROC_DECL_RETURN     : 16
PROC_DECL_VOID       : 17
PROGRAM              : 0
READ                 : 42
READ_NEURAL          : 85
RETURN               : 21
STATEMENT            : 30 45 128
STATEMENT_R          : 45 52 55 59 60 65
S_EXPRESSION         : 122
TERM                 : 97 106 107
TERM_R               : 104
TYPE                 : 5 21 25 32
VAR                  : 67
VAR_BLOCK            : 3
VAR_DECL             : 4 6
VAR_DECL_R           : 5
VAR_LIST             : 5
VAR_LIST2            : 8 9
WHILE_END_NEURAL     : 55
WHILE_LOOP           : 49
WHILE_POST_NEURAL    : 55
WHILE_PREV_NEURAL    : 55
WRITE                : 43
WRITE_LIST           : 89 93
WRITE_LIST_R         : 90 91
WRITE_NEURAL         : 93 94
neural_param_decl    : 19 21
neural_proc_return_id : 21
neural_proc_void_id  : 19
neural_program_id    : 1
neuro                : 25

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROGRAM_K ID neural_program_id SEMICOLON BLOCK

    PROGRAM_K       shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROGRAM_K . ID neural_program_id SEMICOLON BLOCK

    ID              shift and go to state 3


state 3

    (1) PROGRAM -> PROGRAM_K ID . neural_program_id SEMICOLON BLOCK
    (2) neural_program_id -> . EMPTY
    (131) EMPTY -> .

    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    neural_program_id              shift and go to state 4
    EMPTY                          shift and go to state 5

state 4

    (1) PROGRAM -> PROGRAM_K ID neural_program_id . SEMICOLON BLOCK

    SEMICOLON       shift and go to state 6


state 5

    (2) neural_program_id -> EMPTY .

    SEMICOLON       reduce using rule 2 (neural_program_id -> EMPTY .)


state 6

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON . BLOCK
    (3) BLOCK -> . VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
    (4) VAR_BLOCK -> . VARS_K BLOCKSTART VAR_DECL BLOCKEND

    VARS_K          shift and go to state 9

    BLOCK                          shift and go to state 7
    VAR_BLOCK                      shift and go to state 8

state 7

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .

    $end            reduce using rule 1 (PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .)


state 8

    (3) BLOCK -> VAR_BLOCK . PROC_BLOCK PRINCIPAL_BLOCK
    (15) PROC_BLOCK -> . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (131) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 131 (EMPTY -> .)

    PROC_BLOCK                     shift and go to state 10
    PROC_DECL                      shift and go to state 11
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 9

    (4) VAR_BLOCK -> VARS_K . BLOCKSTART VAR_DECL BLOCKEND

    BLOCKSTART      shift and go to state 16


state 10

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK . PRINCIPAL_BLOCK
    (126) PRINCIPAL_BLOCK -> . MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    MAIN_K          shift and go to state 18

    PRINCIPAL_BLOCK                shift and go to state 17

state 11

    (15) PROC_BLOCK -> PROC_DECL .

    MAIN_K          reduce using rule 15 (PROC_BLOCK -> PROC_DECL .)


state 12

    (16) PROC_DECL -> PROC_DECL_RETURN .

    MAIN_K          reduce using rule 16 (PROC_DECL -> PROC_DECL_RETURN .)


state 13

    (17) PROC_DECL -> PROC_DECL_VOID .

    MAIN_K          reduce using rule 17 (PROC_DECL -> PROC_DECL_VOID .)


state 14

    (18) PROC_DECL -> EMPTY .

    MAIN_K          reduce using rule 18 (PROC_DECL -> EMPTY .)


state 15

    (21) PROC_DECL_RETURN -> FUNCTION_K . TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> FUNCTION_K . VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    VOID_K          shift and go to state 20
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 19

state 16

    (4) VAR_BLOCK -> VARS_K BLOCKSTART . VAR_DECL BLOCKEND
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    VAR_DECL                       shift and go to state 24
    TYPE                           shift and go to state 25

state 17

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .

    $end            reduce using rule 3 (BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .)


state 18

    (126) PRINCIPAL_BLOCK -> MAIN_K . MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
    (127) MAIN_NEURAL -> . EMPTY
    (131) EMPTY -> .

    LPAREN          reduce using rule 131 (EMPTY -> .)

    MAIN_NEURAL                    shift and go to state 26
    EMPTY                          shift and go to state 27

state 19

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE . ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    ID              shift and go to state 28


state 20

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K . ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    ID              shift and go to state 29


state 21

    (11) TYPE -> INT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (131) EMPTY -> .

    ID              reduce using rule 131 (EMPTY -> .)
    COLON           reduce using rule 131 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 30
    EMPTY                          shift and go to state 31

state 22

    (12) TYPE -> FLOAT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (131) EMPTY -> .

    ID              reduce using rule 131 (EMPTY -> .)
    COLON           reduce using rule 131 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 32
    EMPTY                          shift and go to state 31

state 23

    (13) TYPE -> STRING_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (131) EMPTY -> .

    ID              reduce using rule 131 (EMPTY -> .)
    COLON           reduce using rule 131 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 33
    EMPTY                          shift and go to state 31

state 24

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL . BLOCKEND

    BLOCKEND        shift and go to state 34


state 25

    (5) VAR_DECL -> TYPE . COLON VAR_LIST SEMICOLON VAR_DECL_R

    COLON           shift and go to state 35


state 26

    (126) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL . LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    LPAREN          shift and go to state 36


state 27

    (127) MAIN_NEURAL -> EMPTY .

    LPAREN          reduce using rule 127 (MAIN_NEURAL -> EMPTY .)


state 28

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID . neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (23) neural_proc_return_id -> . EMPTY
    (131) EMPTY -> .

    LPAREN          reduce using rule 131 (EMPTY -> .)

    neural_proc_return_id          shift and go to state 37
    EMPTY                          shift and go to state 38

state 29

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID . neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (20) neural_proc_void_id -> . EMPTY
    (131) EMPTY -> .

    LPAREN          reduce using rule 131 (EMPTY -> .)

    neural_proc_void_id            shift and go to state 39
    EMPTY                          shift and go to state 40

state 30

    (11) TYPE -> INT_K NEURAL_TYPE .

    ID              reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)
    COLON           reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)


state 31

    (14) NEURAL_TYPE -> EMPTY .

    ID              reduce using rule 14 (NEURAL_TYPE -> EMPTY .)
    COLON           reduce using rule 14 (NEURAL_TYPE -> EMPTY .)


state 32

    (12) TYPE -> FLOAT_K NEURAL_TYPE .

    ID              reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)
    COLON           reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)


state 33

    (13) TYPE -> STRING_K NEURAL_TYPE .

    ID              reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)
    COLON           reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)


state 34

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .

    FUNCTION_K      reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)
    MAIN_K          reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)


state 35

    (5) VAR_DECL -> TYPE COLON . VAR_LIST SEMICOLON VAR_DECL_R
    (8) VAR_LIST -> . ID VAR_LIST2

    ID              shift and go to state 42

    VAR_LIST                       shift and go to state 41

state 36

    (126) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN . RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    RPAREN          shift and go to state 43


state 37

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    LPAREN          shift and go to state 44


state 38

    (23) neural_proc_return_id -> EMPTY .

    LPAREN          reduce using rule 23 (neural_proc_return_id -> EMPTY .)


state 39

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    LPAREN          shift and go to state 45


state 40

    (20) neural_proc_void_id -> EMPTY .

    LPAREN          reduce using rule 20 (neural_proc_void_id -> EMPTY .)


state 41

    (5) VAR_DECL -> TYPE COLON VAR_LIST . SEMICOLON VAR_DECL_R

    SEMICOLON       shift and go to state 46


state 42

    (8) VAR_LIST -> ID . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA ID VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (131) EMPTY -> .

    COMMA           shift and go to state 48
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 47
    EMPTY                          shift and go to state 49

state 43

    (126) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN . BLOCKSTART PRINCIPAL_BODY BLOCKEND

    BLOCKSTART      shift and go to state 50


state 44

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (25) PARAM_DECL -> . TYPE ID neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (131) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 131 (EMPTY -> .)

    TYPE                           shift and go to state 51
    PARAM_DECL                     shift and go to state 52
    EMPTY                          shift and go to state 53

state 45

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (25) PARAM_DECL -> . TYPE ID neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (131) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 131 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 54
    TYPE                           shift and go to state 51
    EMPTY                          shift and go to state 53

state 46

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON . VAR_DECL_R
    (6) VAR_DECL_R -> . VAR_DECL
    (7) VAR_DECL_R -> . EMPTY
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (131) EMPTY -> .
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 25
    VAR_DECL_R                     shift and go to state 55
    VAR_DECL                       shift and go to state 56
    EMPTY                          shift and go to state 57

state 47

    (8) VAR_LIST -> ID VAR_LIST2 .

    SEMICOLON       reduce using rule 8 (VAR_LIST -> ID VAR_LIST2 .)


state 48

    (9) VAR_LIST2 -> COMMA . ID VAR_LIST2

    ID              shift and go to state 58


state 49

    (10) VAR_LIST2 -> EMPTY .

    SEMICOLON       reduce using rule 10 (VAR_LIST2 -> EMPTY .)


state 50

    (126) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART . PRINCIPAL_BODY BLOCKEND
    (128) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (129) PRINCIPAL_BODY -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (131) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    PRINCIPAL_BODY                 shift and go to state 59
    STATEMENT                      shift and go to state 60
    EMPTY                          shift and go to state 61
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 51

    (25) PARAM_DECL -> TYPE . ID neuro PARAM_DECL_R

    ID              shift and go to state 81


state 52

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    RPAREN          shift and go to state 82


state 53

    (26) PARAM_DECL -> EMPTY .

    RPAREN          reduce using rule 26 (PARAM_DECL -> EMPTY .)


state 54

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    RPAREN          shift and go to state 83


state 55

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .

    BLOCKEND        reduce using rule 5 (VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .)


state 56

    (6) VAR_DECL_R -> VAR_DECL .

    BLOCKEND        reduce using rule 6 (VAR_DECL_R -> VAR_DECL .)


state 57

    (7) VAR_DECL_R -> EMPTY .

    BLOCKEND        reduce using rule 7 (VAR_DECL_R -> EMPTY .)


state 58

    (9) VAR_LIST2 -> COMMA ID . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA ID VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (131) EMPTY -> .

    COMMA           shift and go to state 48
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 84
    EMPTY                          shift and go to state 49

state 59

    (126) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY . BLOCKEND

    BLOCKEND        shift and go to state 85


state 60

    (128) PRINCIPAL_BODY -> STATEMENT . PRINCIPAL_BODY_R
    (130) PRINCIPAL_BODY_R -> . PRINCIPAL_BODY
    (128) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (129) PRINCIPAL_BODY -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (131) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    STATEMENT                      shift and go to state 60
    PRINCIPAL_BODY_R               shift and go to state 86
    PRINCIPAL_BODY                 shift and go to state 87
    EMPTY                          shift and go to state 61
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 61

    (129) PRINCIPAL_BODY -> EMPTY .

    BLOCKEND        reduce using rule 129 (PRINCIPAL_BODY -> EMPTY .)


state 62

    (40) STATEMENT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 88


state 63

    (41) STATEMENT -> FUNC_CALL . SEMICOLON

    SEMICOLON       shift and go to state 89


state 64

    (42) STATEMENT -> READ . SEMICOLON

    SEMICOLON       shift and go to state 90


state 65

    (43) STATEMENT -> WRITE . SEMICOLON

    SEMICOLON       shift and go to state 91


state 66

    (44) STATEMENT -> FLOW .

    ID              reduce using rule 44 (STATEMENT -> FLOW .)
    READ_K          reduce using rule 44 (STATEMENT -> FLOW .)
    WRITE_K         reduce using rule 44 (STATEMENT -> FLOW .)
    IF_K            reduce using rule 44 (STATEMENT -> FLOW .)
    WHILE_K         reduce using rule 44 (STATEMENT -> FLOW .)
    DO_K            reduce using rule 44 (STATEMENT -> FLOW .)
    FOR_K           reduce using rule 44 (STATEMENT -> FLOW .)
    BLOCKEND        reduce using rule 44 (STATEMENT -> FLOW .)
    RETURN_K        reduce using rule 44 (STATEMENT -> FLOW .)


state 67

    (67) ASSIGN -> VAR . ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (70) ASSIGN_VAR_N -> . EMPTY
    (131) EMPTY -> .

    EQUALS          reduce using rule 131 (EMPTY -> .)

    ASSIGN_VAR_N                   shift and go to state 92
    EMPTY                          shift and go to state 93

state 68

    (74) FUNC_CALL -> ID . PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (71) VAR -> ID .
    (73) ARRAY -> ID . LBRACE INT RBRACE
    (76) PRE_VERIFY -> . EMPTY
    (131) EMPTY -> .

    EQUALS          reduce using rule 71 (VAR -> ID .)
    LBRACE          shift and go to state 95
    LPAREN          reduce using rule 131 (EMPTY -> .)

    PRE_VERIFY                     shift and go to state 94
    EMPTY                          shift and go to state 96

state 69

    (84) READ -> READ_K . LPAREN ID_LIST RPAREN

    LPAREN          shift and go to state 97


state 70

    (89) WRITE -> WRITE_K . LPAREN WRITE_LIST RPAREN

    LPAREN          shift and go to state 98


state 71

    (47) FLOW -> DECISION .

    ID              reduce using rule 47 (FLOW -> DECISION .)
    READ_K          reduce using rule 47 (FLOW -> DECISION .)
    WRITE_K         reduce using rule 47 (FLOW -> DECISION .)
    IF_K            reduce using rule 47 (FLOW -> DECISION .)
    WHILE_K         reduce using rule 47 (FLOW -> DECISION .)
    DO_K            reduce using rule 47 (FLOW -> DECISION .)
    FOR_K           reduce using rule 47 (FLOW -> DECISION .)
    BLOCKEND        reduce using rule 47 (FLOW -> DECISION .)
    RETURN_K        reduce using rule 47 (FLOW -> DECISION .)


state 72

    (48) FLOW -> LOOP .

    ID              reduce using rule 48 (FLOW -> LOOP .)
    READ_K          reduce using rule 48 (FLOW -> LOOP .)
    WRITE_K         reduce using rule 48 (FLOW -> LOOP .)
    IF_K            reduce using rule 48 (FLOW -> LOOP .)
    WHILE_K         reduce using rule 48 (FLOW -> LOOP .)
    DO_K            reduce using rule 48 (FLOW -> LOOP .)
    FOR_K           reduce using rule 48 (FLOW -> LOOP .)
    BLOCKEND        reduce using rule 48 (FLOW -> LOOP .)
    RETURN_K        reduce using rule 48 (FLOW -> LOOP .)


state 73

    (72) VAR -> ARRAY .

    EQUALS          reduce using rule 72 (VAR -> ARRAY .)


state 74

    (60) DECISION -> IF_K . LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    LPAREN          shift and go to state 99


state 75

    (49) LOOP -> WHILE_LOOP .

    ID              reduce using rule 49 (LOOP -> WHILE_LOOP .)
    READ_K          reduce using rule 49 (LOOP -> WHILE_LOOP .)
    WRITE_K         reduce using rule 49 (LOOP -> WHILE_LOOP .)
    IF_K            reduce using rule 49 (LOOP -> WHILE_LOOP .)
    WHILE_K         reduce using rule 49 (LOOP -> WHILE_LOOP .)
    DO_K            reduce using rule 49 (LOOP -> WHILE_LOOP .)
    FOR_K           reduce using rule 49 (LOOP -> WHILE_LOOP .)
    BLOCKEND        reduce using rule 49 (LOOP -> WHILE_LOOP .)
    RETURN_K        reduce using rule 49 (LOOP -> WHILE_LOOP .)


state 76

    (50) LOOP -> DO_WHILE_LOOP . SEMICOLON

    SEMICOLON       shift and go to state 100


state 77

    (51) LOOP -> FOR_LOOP .

    ID              reduce using rule 51 (LOOP -> FOR_LOOP .)
    READ_K          reduce using rule 51 (LOOP -> FOR_LOOP .)
    WRITE_K         reduce using rule 51 (LOOP -> FOR_LOOP .)
    IF_K            reduce using rule 51 (LOOP -> FOR_LOOP .)
    WHILE_K         reduce using rule 51 (LOOP -> FOR_LOOP .)
    DO_K            reduce using rule 51 (LOOP -> FOR_LOOP .)
    FOR_K           reduce using rule 51 (LOOP -> FOR_LOOP .)
    BLOCKEND        reduce using rule 51 (LOOP -> FOR_LOOP .)
    RETURN_K        reduce using rule 51 (LOOP -> FOR_LOOP .)


state 78

    (55) WHILE_LOOP -> WHILE_K . WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (56) WHILE_PREV_NEURAL -> . EMPTY
    (131) EMPTY -> .

    LPAREN          reduce using rule 131 (EMPTY -> .)

    WHILE_PREV_NEURAL              shift and go to state 101
    EMPTY                          shift and go to state 102

state 79

    (52) DO_WHILE_LOOP -> DO_K . DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (53) DW_PREV_NEURAL -> . EMPTY
    (131) EMPTY -> .

    BLOCKSTART      reduce using rule 131 (EMPTY -> .)

    DW_PREV_NEURAL                 shift and go to state 103
    EMPTY                          shift and go to state 104

state 80

    (59) FOR_LOOP -> FOR_K . ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 105


state 81

    (25) PARAM_DECL -> TYPE ID . neuro PARAM_DECL_R
    (27) neuro -> . EMPTY
    (131) EMPTY -> .

    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)

    neuro                          shift and go to state 106
    EMPTY                          shift and go to state 107

state 82

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (24) neural_param_decl -> . EMPTY
    (131) EMPTY -> .

    BLOCKSTART      reduce using rule 131 (EMPTY -> .)

    neural_param_decl              shift and go to state 108
    EMPTY                          shift and go to state 109

state 83

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (24) neural_param_decl -> . EMPTY
    (131) EMPTY -> .

    BLOCKSTART      reduce using rule 131 (EMPTY -> .)

    neural_param_decl              shift and go to state 110
    EMPTY                          shift and go to state 109

state 84

    (9) VAR_LIST2 -> COMMA ID VAR_LIST2 .

    SEMICOLON       reduce using rule 9 (VAR_LIST2 -> COMMA ID VAR_LIST2 .)


state 85

    (126) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .

    $end            reduce using rule 126 (PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .)


state 86

    (128) PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .

    BLOCKEND        reduce using rule 128 (PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .)


state 87

    (130) PRINCIPAL_BODY_R -> PRINCIPAL_BODY .

    BLOCKEND        reduce using rule 130 (PRINCIPAL_BODY_R -> PRINCIPAL_BODY .)


state 88

    (40) STATEMENT -> ASSIGN SEMICOLON .

    ID              reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    READ_K          reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    WRITE_K         reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    IF_K            reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    WHILE_K         reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    DO_K            reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    FOR_K           reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    BLOCKEND        reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    RETURN_K        reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)


state 89

    (41) STATEMENT -> FUNC_CALL SEMICOLON .

    ID              reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    READ_K          reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WRITE_K         reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    IF_K            reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WHILE_K         reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    DO_K            reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    FOR_K           reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    BLOCKEND        reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)
    RETURN_K        reduce using rule 41 (STATEMENT -> FUNC_CALL SEMICOLON .)


state 90

    (42) STATEMENT -> READ SEMICOLON .

    ID              reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    READ_K          reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    WRITE_K         reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    IF_K            reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    WHILE_K         reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    DO_K            reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    FOR_K           reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    BLOCKEND        reduce using rule 42 (STATEMENT -> READ SEMICOLON .)
    RETURN_K        reduce using rule 42 (STATEMENT -> READ SEMICOLON .)


state 91

    (43) STATEMENT -> WRITE SEMICOLON .

    ID              reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    READ_K          reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    WRITE_K         reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    IF_K            reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    WHILE_K         reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    DO_K            reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    FOR_K           reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    BLOCKEND        reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)
    RETURN_K        reduce using rule 43 (STATEMENT -> WRITE SEMICOLON .)


state 92

    (67) ASSIGN -> VAR ASSIGN_VAR_N . EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL

    EQUALS          shift and go to state 111


state 93

    (70) ASSIGN_VAR_N -> EMPTY .

    EQUALS          reduce using rule 70 (ASSIGN_VAR_N -> EMPTY .)


state 94

    (74) FUNC_CALL -> ID PRE_VERIFY . LPAREN EXP_LIST POST_VERIFY RPAREN

    LPAREN          shift and go to state 112


state 95

    (73) ARRAY -> ID LBRACE . INT RBRACE

    INT             shift and go to state 113


state 96

    (76) PRE_VERIFY -> EMPTY .

    LPAREN          reduce using rule 76 (PRE_VERIFY -> EMPTY .)


state 97

    (84) READ -> READ_K LPAREN . ID_LIST RPAREN
    (85) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 115

    ID_LIST                        shift and go to state 114

state 98

    (89) WRITE -> WRITE_K LPAREN . WRITE_LIST RPAREN
    (90) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (91) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123
    ID              shift and go to state 127
    LPAREN          shift and go to state 116

    WRITE_LIST                     shift and go to state 117
    H_EXPRESSION                   shift and go to state 118
    CONSTANT                       shift and go to state 119
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126

state 99

    (60) DECISION -> IF_K LPAREN . H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    H_EXPRESSION                   shift and go to state 128
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 100

    (50) LOOP -> DO_WHILE_LOOP SEMICOLON .

    ID              reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    READ_K          reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    WRITE_K         reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    IF_K            reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    WHILE_K         reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    DO_K            reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    FOR_K           reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    BLOCKEND        reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    RETURN_K        reduce using rule 50 (LOOP -> DO_WHILE_LOOP SEMICOLON .)


state 101

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL . LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    LPAREN          shift and go to state 130


state 102

    (56) WHILE_PREV_NEURAL -> EMPTY .

    LPAREN          reduce using rule 56 (WHILE_PREV_NEURAL -> EMPTY .)


state 103

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    BLOCKSTART      shift and go to state 131


state 104

    (53) DW_PREV_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 53 (DW_PREV_NEURAL -> EMPTY .)


state 105

    (59) FOR_LOOP -> FOR_K ID . EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    EQUALS          shift and go to state 132


state 106

    (25) PARAM_DECL -> TYPE ID neuro . PARAM_DECL_R
    (28) PARAM_DECL_R -> . COMMA PARAM_DECL
    (29) PARAM_DECL_R -> . EMPTY
    (131) EMPTY -> .

    COMMA           shift and go to state 134
    RPAREN          reduce using rule 131 (EMPTY -> .)

    PARAM_DECL_R                   shift and go to state 133
    EMPTY                          shift and go to state 135

state 107

    (27) neuro -> EMPTY .

    COMMA           reduce using rule 27 (neuro -> EMPTY .)
    RPAREN          reduce using rule 27 (neuro -> EMPTY .)


state 108

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    BLOCKSTART      shift and go to state 136


state 109

    (24) neural_param_decl -> EMPTY .

    BLOCKSTART      reduce using rule 24 (neural_param_decl -> EMPTY .)


state 110

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    BLOCKSTART      shift and go to state 137


state 111

    (67) ASSIGN -> VAR ASSIGN_VAR_N EQUALS . EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) EQUALS_NEURAL -> . EMPTY
    (131) EMPTY -> .

    ID              reduce using rule 131 (EMPTY -> .)
    LPAREN          reduce using rule 131 (EMPTY -> .)
    INT             reduce using rule 131 (EMPTY -> .)
    FLOAT           reduce using rule 131 (EMPTY -> .)
    STRING          reduce using rule 131 (EMPTY -> .)

    EQUALS_NEURAL                  shift and go to state 138
    EMPTY                          shift and go to state 139

state 112

    (74) FUNC_CALL -> ID PRE_VERIFY LPAREN . EXP_LIST POST_VERIFY RPAREN
    (77) EXP_LIST -> . H_EXPRESSION EXP_NEURAL EXP_LIST_2
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    EXP_LIST                       shift and go to state 140
    H_EXPRESSION                   shift and go to state 141
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 113

    (73) ARRAY -> ID LBRACE INT . RBRACE

    RBRACE          shift and go to state 142


state 114

    (84) READ -> READ_K LPAREN ID_LIST . RPAREN

    RPAREN          shift and go to state 143


state 115

    (85) ID_LIST -> ID . READ_NEURAL ID_LIST_R
    (86) READ_NEURAL -> . EMPTY
    (131) EMPTY -> .

    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)

    READ_NEURAL                    shift and go to state 144
    EMPTY                          shift and go to state 145

state 116

    (113) FACTOR -> LPAREN . H_EXPRESSION RPAREN
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    H_EXPRESSION                   shift and go to state 146
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 117

    (89) WRITE -> WRITE_K LPAREN WRITE_LIST . RPAREN

    RPAREN          shift and go to state 147


state 118

    (90) WRITE_LIST -> H_EXPRESSION . WRITE_LIST_R
    (93) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (94) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (95) WRITE_NEURAL -> . EMPTY
    (131) EMPTY -> .

    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 148
    WRITE_NEURAL                   shift and go to state 149
    EMPTY                          shift and go to state 150

state 119

    (91) WRITE_LIST -> CONSTANT . CONSTANT_WRITE_N WRITE_LIST_R
    (112) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (92) CONSTANT_WRITE_N -> . EMPTY
    (115) NEURAL_CNT_FACT -> . EMPTY
    (131) EMPTY -> .

    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)
    TIMES           reduce using rule 131 (EMPTY -> .)
    DIVIDE          reduce using rule 131 (EMPTY -> .)
    PLUS            reduce using rule 131 (EMPTY -> .)
    MINUS           reduce using rule 131 (EMPTY -> .)
    GT              reduce using rule 131 (EMPTY -> .)
    LT              reduce using rule 131 (EMPTY -> .)
    GTE             reduce using rule 131 (EMPTY -> .)
    LTE             reduce using rule 131 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 131 (EMPTY -> .)
    OR              reduce using rule 131 (EMPTY -> .)
    AND             reduce using rule 131 (EMPTY -> .)

    CONSTANT_WRITE_N               shift and go to state 151
    NEURAL_CNT_FACT                shift and go to state 152
    EMPTY                          shift and go to state 153

state 120

    (122) H_EXPRESSION -> S_EXPRESSION . H_EXPRESSION_R
    (123) H_EXPRESSION_R -> . OR H_EXPRESSION
    (124) H_EXPRESSION_R -> . AND H_EXPRESSION
    (125) H_EXPRESSION_R -> . EMPTY
    (131) EMPTY -> .

    OR              shift and go to state 155
    AND             shift and go to state 156
    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    H_EXPRESSION_R                 shift and go to state 154
    EMPTY                          shift and go to state 157

state 121

    (81) CONSTANT -> INT .

    COMMA           reduce using rule 81 (CONSTANT -> INT .)
    RPAREN          reduce using rule 81 (CONSTANT -> INT .)
    TIMES           reduce using rule 81 (CONSTANT -> INT .)
    DIVIDE          reduce using rule 81 (CONSTANT -> INT .)
    PLUS            reduce using rule 81 (CONSTANT -> INT .)
    MINUS           reduce using rule 81 (CONSTANT -> INT .)
    GT              reduce using rule 81 (CONSTANT -> INT .)
    LT              reduce using rule 81 (CONSTANT -> INT .)
    GTE             reduce using rule 81 (CONSTANT -> INT .)
    LTE             reduce using rule 81 (CONSTANT -> INT .)
    DOUBLEEQUAL     reduce using rule 81 (CONSTANT -> INT .)
    OR              reduce using rule 81 (CONSTANT -> INT .)
    AND             reduce using rule 81 (CONSTANT -> INT .)
    SEMICOLON       reduce using rule 81 (CONSTANT -> INT .)


state 122

    (82) CONSTANT -> FLOAT .

    COMMA           reduce using rule 82 (CONSTANT -> FLOAT .)
    RPAREN          reduce using rule 82 (CONSTANT -> FLOAT .)
    TIMES           reduce using rule 82 (CONSTANT -> FLOAT .)
    DIVIDE          reduce using rule 82 (CONSTANT -> FLOAT .)
    PLUS            reduce using rule 82 (CONSTANT -> FLOAT .)
    MINUS           reduce using rule 82 (CONSTANT -> FLOAT .)
    GT              reduce using rule 82 (CONSTANT -> FLOAT .)
    LT              reduce using rule 82 (CONSTANT -> FLOAT .)
    GTE             reduce using rule 82 (CONSTANT -> FLOAT .)
    LTE             reduce using rule 82 (CONSTANT -> FLOAT .)
    DOUBLEEQUAL     reduce using rule 82 (CONSTANT -> FLOAT .)
    OR              reduce using rule 82 (CONSTANT -> FLOAT .)
    AND             reduce using rule 82 (CONSTANT -> FLOAT .)
    SEMICOLON       reduce using rule 82 (CONSTANT -> FLOAT .)


state 123

    (83) CONSTANT -> STRING .

    COMMA           reduce using rule 83 (CONSTANT -> STRING .)
    RPAREN          reduce using rule 83 (CONSTANT -> STRING .)
    TIMES           reduce using rule 83 (CONSTANT -> STRING .)
    DIVIDE          reduce using rule 83 (CONSTANT -> STRING .)
    PLUS            reduce using rule 83 (CONSTANT -> STRING .)
    MINUS           reduce using rule 83 (CONSTANT -> STRING .)
    GT              reduce using rule 83 (CONSTANT -> STRING .)
    LT              reduce using rule 83 (CONSTANT -> STRING .)
    GTE             reduce using rule 83 (CONSTANT -> STRING .)
    LTE             reduce using rule 83 (CONSTANT -> STRING .)
    DOUBLEEQUAL     reduce using rule 83 (CONSTANT -> STRING .)
    OR              reduce using rule 83 (CONSTANT -> STRING .)
    AND             reduce using rule 83 (CONSTANT -> STRING .)
    SEMICOLON       reduce using rule 83 (CONSTANT -> STRING .)


state 124

    (116) S_EXPRESSION -> EXPRESSION .
    (117) S_EXPRESSION -> EXPRESSION . GT EXPRESSION
    (118) S_EXPRESSION -> EXPRESSION . LT EXPRESSION
    (119) S_EXPRESSION -> EXPRESSION . GTE EXPRESSION
    (120) S_EXPRESSION -> EXPRESSION . LTE EXPRESSION
    (121) S_EXPRESSION -> EXPRESSION . DOUBLEEQUAL EXPRESSION

    OR              reduce using rule 116 (S_EXPRESSION -> EXPRESSION .)
    AND             reduce using rule 116 (S_EXPRESSION -> EXPRESSION .)
    COMMA           reduce using rule 116 (S_EXPRESSION -> EXPRESSION .)
    RPAREN          reduce using rule 116 (S_EXPRESSION -> EXPRESSION .)
    SEMICOLON       reduce using rule 116 (S_EXPRESSION -> EXPRESSION .)
    GT              shift and go to state 158
    LT              shift and go to state 159
    GTE             shift and go to state 160
    LTE             shift and go to state 161
    DOUBLEEQUAL     shift and go to state 162


state 125

    (97) EXPRESSION -> TERM . NEURAL_EXPRESSION EXPRESSION_R
    (98) NEURAL_EXPRESSION -> . EMPTY
    (131) EMPTY -> .

    PLUS            reduce using rule 131 (EMPTY -> .)
    MINUS           reduce using rule 131 (EMPTY -> .)
    GT              reduce using rule 131 (EMPTY -> .)
    LT              reduce using rule 131 (EMPTY -> .)
    GTE             reduce using rule 131 (EMPTY -> .)
    LTE             reduce using rule 131 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 131 (EMPTY -> .)
    OR              reduce using rule 131 (EMPTY -> .)
    AND             reduce using rule 131 (EMPTY -> .)
    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    NEURAL_EXPRESSION              shift and go to state 163
    EMPTY                          shift and go to state 164

state 126

    (104) TERM -> FACTOR . NEURAL_TERM TERM_R
    (105) NEURAL_TERM -> . EMPTY
    (131) EMPTY -> .

    TIMES           reduce using rule 131 (EMPTY -> .)
    DIVIDE          reduce using rule 131 (EMPTY -> .)
    PLUS            reduce using rule 131 (EMPTY -> .)
    MINUS           reduce using rule 131 (EMPTY -> .)
    GT              reduce using rule 131 (EMPTY -> .)
    LT              reduce using rule 131 (EMPTY -> .)
    GTE             reduce using rule 131 (EMPTY -> .)
    LTE             reduce using rule 131 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 131 (EMPTY -> .)
    OR              reduce using rule 131 (EMPTY -> .)
    AND             reduce using rule 131 (EMPTY -> .)
    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    NEURAL_TERM                    shift and go to state 165
    EMPTY                          shift and go to state 166

state 127

    (111) FACTOR -> ID . NEURAL_ID_FAC
    (114) NEURAL_ID_FAC -> . EMPTY
    (131) EMPTY -> .

    TIMES           reduce using rule 131 (EMPTY -> .)
    DIVIDE          reduce using rule 131 (EMPTY -> .)
    PLUS            reduce using rule 131 (EMPTY -> .)
    MINUS           reduce using rule 131 (EMPTY -> .)
    GT              reduce using rule 131 (EMPTY -> .)
    LT              reduce using rule 131 (EMPTY -> .)
    GTE             reduce using rule 131 (EMPTY -> .)
    LTE             reduce using rule 131 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 131 (EMPTY -> .)
    OR              reduce using rule 131 (EMPTY -> .)
    AND             reduce using rule 131 (EMPTY -> .)
    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    NEURAL_ID_FAC                  shift and go to state 167
    EMPTY                          shift and go to state 168

state 128

    (60) DECISION -> IF_K LPAREN H_EXPRESSION . RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    RPAREN          shift and go to state 169


state 129

    (112) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (115) NEURAL_CNT_FACT -> . EMPTY
    (131) EMPTY -> .

    TIMES           reduce using rule 131 (EMPTY -> .)
    DIVIDE          reduce using rule 131 (EMPTY -> .)
    PLUS            reduce using rule 131 (EMPTY -> .)
    MINUS           reduce using rule 131 (EMPTY -> .)
    GT              reduce using rule 131 (EMPTY -> .)
    LT              reduce using rule 131 (EMPTY -> .)
    GTE             reduce using rule 131 (EMPTY -> .)
    LTE             reduce using rule 131 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 131 (EMPTY -> .)
    OR              reduce using rule 131 (EMPTY -> .)
    AND             reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)
    COMMA           reduce using rule 131 (EMPTY -> .)
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    NEURAL_CNT_FACT                shift and go to state 152
    EMPTY                          shift and go to state 170

state 130

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN . H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    H_EXPRESSION                   shift and go to state 171
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 131

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (131) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    STATEMENT_R                    shift and go to state 172
    STATEMENT                      shift and go to state 173
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 132

    (59) FOR_LOOP -> FOR_K ID EQUALS . INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 175


state 133

    (25) PARAM_DECL -> TYPE ID neuro PARAM_DECL_R .

    RPAREN          reduce using rule 25 (PARAM_DECL -> TYPE ID neuro PARAM_DECL_R .)


state 134

    (28) PARAM_DECL_R -> COMMA . PARAM_DECL
    (25) PARAM_DECL -> . TYPE ID neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (131) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 131 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 176
    TYPE                           shift and go to state 51
    EMPTY                          shift and go to state 53

state 135

    (29) PARAM_DECL_R -> EMPTY .

    RPAREN          reduce using rule 29 (PARAM_DECL_R -> EMPTY .)


state 136

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (31) FN_VARBLOCK -> . VARS_K BLOCKSTART LS_VARDECL BLOCKEND

    VARS_K          shift and go to state 178

    FN_VARBLOCK                    shift and go to state 177

state 137

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (31) FN_VARBLOCK -> . VARS_K BLOCKSTART LS_VARDECL BLOCKEND

    VARS_K          shift and go to state 178

    FN_VARBLOCK                    shift and go to state 179

state 138

    (67) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL . H_EXPRESSION ASSI_H_EXP_NEURAL
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    H_EXPRESSION                   shift and go to state 180
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 139

    (69) EQUALS_NEURAL -> EMPTY .

    ID              reduce using rule 69 (EQUALS_NEURAL -> EMPTY .)
    LPAREN          reduce using rule 69 (EQUALS_NEURAL -> EMPTY .)
    INT             reduce using rule 69 (EQUALS_NEURAL -> EMPTY .)
    FLOAT           reduce using rule 69 (EQUALS_NEURAL -> EMPTY .)
    STRING          reduce using rule 69 (EQUALS_NEURAL -> EMPTY .)


state 140

    (74) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST . POST_VERIFY RPAREN
    (75) POST_VERIFY -> . EMPTY
    (131) EMPTY -> .

    RPAREN          reduce using rule 131 (EMPTY -> .)

    POST_VERIFY                    shift and go to state 181
    EMPTY                          shift and go to state 182

state 141

    (77) EXP_LIST -> H_EXPRESSION . EXP_NEURAL EXP_LIST_2
    (78) EXP_NEURAL -> . EMPTY
    (131) EMPTY -> .

    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)

    EXP_NEURAL                     shift and go to state 183
    EMPTY                          shift and go to state 184

state 142

    (73) ARRAY -> ID LBRACE INT RBRACE .

    EQUALS          reduce using rule 73 (ARRAY -> ID LBRACE INT RBRACE .)


state 143

    (84) READ -> READ_K LPAREN ID_LIST RPAREN .

    SEMICOLON       reduce using rule 84 (READ -> READ_K LPAREN ID_LIST RPAREN .)


state 144

    (85) ID_LIST -> ID READ_NEURAL . ID_LIST_R
    (87) ID_LIST_R -> . COMMA ID_LIST
    (88) ID_LIST_R -> . EMPTY
    (131) EMPTY -> .

    COMMA           shift and go to state 186
    RPAREN          reduce using rule 131 (EMPTY -> .)

    ID_LIST_R                      shift and go to state 185
    EMPTY                          shift and go to state 187

state 145

    (86) READ_NEURAL -> EMPTY .

    COMMA           reduce using rule 86 (READ_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 86 (READ_NEURAL -> EMPTY .)


state 146

    (113) FACTOR -> LPAREN H_EXPRESSION . RPAREN

    RPAREN          shift and go to state 188


state 147

    (89) WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .

    SEMICOLON       reduce using rule 89 (WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .)


state 148

    (90) WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .

    RPAREN          reduce using rule 90 (WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .)


state 149

    (93) WRITE_LIST_R -> WRITE_NEURAL . COMMA WRITE_LIST
    (94) WRITE_LIST_R -> WRITE_NEURAL . EMPTY
    (131) EMPTY -> .

    COMMA           shift and go to state 189
    RPAREN          reduce using rule 131 (EMPTY -> .)

    EMPTY                          shift and go to state 190

state 150

    (95) WRITE_NEURAL -> EMPTY .

    COMMA           reduce using rule 95 (WRITE_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 95 (WRITE_NEURAL -> EMPTY .)


state 151

    (91) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N . WRITE_LIST_R
    (93) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (94) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (95) WRITE_NEURAL -> . EMPTY
    (131) EMPTY -> .

    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 191
    WRITE_NEURAL                   shift and go to state 149
    EMPTY                          shift and go to state 150

state 152

    (112) FACTOR -> CONSTANT NEURAL_CNT_FACT .

    TIMES           reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DIVIDE          reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    PLUS            reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    MINUS           reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GT              reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LT              reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GTE             reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LTE             reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DOUBLEEQUAL     reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    OR              reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    AND             reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    COMMA           reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    RPAREN          reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    SEMICOLON       reduce using rule 112 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)


state 153

    (92) CONSTANT_WRITE_N -> EMPTY .
    (115) NEURAL_CNT_FACT -> EMPTY .

  ! reduce/reduce conflict for COMMA resolved using rule 92 (CONSTANT_WRITE_N -> EMPTY .)
  ! reduce/reduce conflict for RPAREN resolved using rule 92 (CONSTANT_WRITE_N -> EMPTY .)
    COMMA           reduce using rule 92 (CONSTANT_WRITE_N -> EMPTY .)
    RPAREN          reduce using rule 92 (CONSTANT_WRITE_N -> EMPTY .)
    TIMES           reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)

  ! COMMA           [ reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .) ]
  ! RPAREN          [ reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .) ]


state 154

    (122) H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .

    COMMA           reduce using rule 122 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    RPAREN          reduce using rule 122 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    SEMICOLON       reduce using rule 122 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)


state 155

    (123) H_EXPRESSION_R -> OR . H_EXPRESSION
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    H_EXPRESSION                   shift and go to state 192
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 156

    (124) H_EXPRESSION_R -> AND . H_EXPRESSION
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    H_EXPRESSION                   shift and go to state 193
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 157

    (125) H_EXPRESSION_R -> EMPTY .

    COMMA           reduce using rule 125 (H_EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 125 (H_EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 125 (H_EXPRESSION_R -> EMPTY .)


state 158

    (117) S_EXPRESSION -> EXPRESSION GT . EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    EXPRESSION                     shift and go to state 194
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 159

    (118) S_EXPRESSION -> EXPRESSION LT . EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    EXPRESSION                     shift and go to state 195
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 160

    (119) S_EXPRESSION -> EXPRESSION GTE . EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    EXPRESSION                     shift and go to state 196
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 161

    (120) S_EXPRESSION -> EXPRESSION LTE . EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    EXPRESSION                     shift and go to state 197
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 162

    (121) S_EXPRESSION -> EXPRESSION DOUBLEEQUAL . EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    EXPRESSION                     shift and go to state 198
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 163

    (97) EXPRESSION -> TERM NEURAL_EXPRESSION . EXPRESSION_R
    (99) EXPRESSION_R -> . PLUS NEURAL_PLUS EXPRESSION
    (100) EXPRESSION_R -> . MINUS NEURAL_MINUS EXPRESSION
    (101) EXPRESSION_R -> . EMPTY
    (131) EMPTY -> .

    PLUS            shift and go to state 200
    MINUS           shift and go to state 201
    GT              reduce using rule 131 (EMPTY -> .)
    LT              reduce using rule 131 (EMPTY -> .)
    GTE             reduce using rule 131 (EMPTY -> .)
    LTE             reduce using rule 131 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 131 (EMPTY -> .)
    OR              reduce using rule 131 (EMPTY -> .)
    AND             reduce using rule 131 (EMPTY -> .)
    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    EXPRESSION_R                   shift and go to state 199
    EMPTY                          shift and go to state 202

state 164

    (98) NEURAL_EXPRESSION -> EMPTY .

    PLUS            reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    MINUS           reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    GT              reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    LT              reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    GTE             reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    LTE             reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    OR              reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    AND             reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    COMMA           reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    RPAREN          reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)
    SEMICOLON       reduce using rule 98 (NEURAL_EXPRESSION -> EMPTY .)


state 165

    (104) TERM -> FACTOR NEURAL_TERM . TERM_R
    (106) TERM_R -> . TIMES NEURAL_TIMES TERM
    (107) TERM_R -> . DIVIDE NEURAL_DIVIDE TERM
    (108) TERM_R -> . EMPTY
    (131) EMPTY -> .

    TIMES           shift and go to state 204
    DIVIDE          shift and go to state 205
    PLUS            reduce using rule 131 (EMPTY -> .)
    MINUS           reduce using rule 131 (EMPTY -> .)
    GT              reduce using rule 131 (EMPTY -> .)
    LT              reduce using rule 131 (EMPTY -> .)
    GTE             reduce using rule 131 (EMPTY -> .)
    LTE             reduce using rule 131 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 131 (EMPTY -> .)
    OR              reduce using rule 131 (EMPTY -> .)
    AND             reduce using rule 131 (EMPTY -> .)
    COMMA           reduce using rule 131 (EMPTY -> .)
    RPAREN          reduce using rule 131 (EMPTY -> .)
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    TERM_R                         shift and go to state 203
    EMPTY                          shift and go to state 206

state 166

    (105) NEURAL_TERM -> EMPTY .

    TIMES           reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    DIVIDE          reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    PLUS            reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    MINUS           reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    GT              reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    LT              reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    GTE             reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    LTE             reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    OR              reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    AND             reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    COMMA           reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    RPAREN          reduce using rule 105 (NEURAL_TERM -> EMPTY .)
    SEMICOLON       reduce using rule 105 (NEURAL_TERM -> EMPTY .)


state 167

    (111) FACTOR -> ID NEURAL_ID_FAC .

    TIMES           reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    DIVIDE          reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    PLUS            reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    MINUS           reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    GT              reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    LT              reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    GTE             reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    LTE             reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    DOUBLEEQUAL     reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    OR              reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    AND             reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    COMMA           reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    RPAREN          reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)
    SEMICOLON       reduce using rule 111 (FACTOR -> ID NEURAL_ID_FAC .)


state 168

    (114) NEURAL_ID_FAC -> EMPTY .

    TIMES           reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    DIVIDE          reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    PLUS            reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    MINUS           reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    GT              reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    LT              reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    GTE             reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    LTE             reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    OR              reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    AND             reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    COMMA           reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    RPAREN          reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)
    SEMICOLON       reduce using rule 114 (NEURAL_ID_FAC -> EMPTY .)


state 169

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN . EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (61) EXP_RESULT_NEURAL -> . EMPTY
    (131) EMPTY -> .

    BLOCKSTART      reduce using rule 131 (EMPTY -> .)

    EXP_RESULT_NEURAL              shift and go to state 207
    EMPTY                          shift and go to state 208

state 170

    (115) NEURAL_CNT_FACT -> EMPTY .

    TIMES           reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    RPAREN          reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    COMMA           reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)
    SEMICOLON       reduce using rule 115 (NEURAL_CNT_FACT -> EMPTY .)


state 171

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION . RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    RPAREN          shift and go to state 209


state 172

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    BLOCKEND        shift and go to state 210


state 173

    (45) STATEMENT_R -> STATEMENT . STATEMENT_R
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (131) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    STATEMENT                      shift and go to state 173
    STATEMENT_R                    shift and go to state 211
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 174

    (46) STATEMENT_R -> EMPTY .

    BLOCKEND        reduce using rule 46 (STATEMENT_R -> EMPTY .)


state 175

    (59) FOR_LOOP -> FOR_K ID EQUALS INT . TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    TO_K            shift and go to state 212


state 176

    (28) PARAM_DECL_R -> COMMA PARAM_DECL .

    RPAREN          reduce using rule 28 (PARAM_DECL_R -> COMMA PARAM_DECL .)


state 177

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK . PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    PROC_BODY                      shift and go to state 213
    STATEMENT                      shift and go to state 214
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 178

    (31) FN_VARBLOCK -> VARS_K . BLOCKSTART LS_VARDECL BLOCKEND

    BLOCKSTART      shift and go to state 215


state 179

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK . PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    PROC_BODY                      shift and go to state 216
    STATEMENT                      shift and go to state 214
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 180

    (67) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION . ASSI_H_EXP_NEURAL
    (68) ASSI_H_EXP_NEURAL -> . EMPTY
    (131) EMPTY -> .

    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    ASSI_H_EXP_NEURAL              shift and go to state 217
    EMPTY                          shift and go to state 218

state 181

    (74) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY . RPAREN

    RPAREN          shift and go to state 219


state 182

    (75) POST_VERIFY -> EMPTY .

    RPAREN          reduce using rule 75 (POST_VERIFY -> EMPTY .)


state 183

    (77) EXP_LIST -> H_EXPRESSION EXP_NEURAL . EXP_LIST_2
    (79) EXP_LIST_2 -> . COMMA EXP_LIST
    (80) EXP_LIST_2 -> . EMPTY
    (131) EMPTY -> .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 131 (EMPTY -> .)

    EXP_LIST_2                     shift and go to state 220
    EMPTY                          shift and go to state 222

state 184

    (78) EXP_NEURAL -> EMPTY .

    COMMA           reduce using rule 78 (EXP_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 78 (EXP_NEURAL -> EMPTY .)


state 185

    (85) ID_LIST -> ID READ_NEURAL ID_LIST_R .

    RPAREN          reduce using rule 85 (ID_LIST -> ID READ_NEURAL ID_LIST_R .)


state 186

    (87) ID_LIST_R -> COMMA . ID_LIST
    (85) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 115

    ID_LIST                        shift and go to state 223

state 187

    (88) ID_LIST_R -> EMPTY .

    RPAREN          reduce using rule 88 (ID_LIST_R -> EMPTY .)


state 188

    (113) FACTOR -> LPAREN H_EXPRESSION RPAREN .

    TIMES           reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DIVIDE          reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    PLUS            reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    MINUS           reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GT              reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LT              reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GTE             reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LTE             reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DOUBLEEQUAL     reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    OR              reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    AND             reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    COMMA           reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    RPAREN          reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    SEMICOLON       reduce using rule 113 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)


state 189

    (93) WRITE_LIST_R -> WRITE_NEURAL COMMA . WRITE_LIST
    (90) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (91) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123
    ID              shift and go to state 127
    LPAREN          shift and go to state 116

    WRITE_LIST                     shift and go to state 224
    H_EXPRESSION                   shift and go to state 118
    CONSTANT                       shift and go to state 119
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126

state 190

    (94) WRITE_LIST_R -> WRITE_NEURAL EMPTY .

    RPAREN          reduce using rule 94 (WRITE_LIST_R -> WRITE_NEURAL EMPTY .)


state 191

    (91) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .

    RPAREN          reduce using rule 91 (WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .)


state 192

    (123) H_EXPRESSION_R -> OR H_EXPRESSION .

    COMMA           reduce using rule 123 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    RPAREN          reduce using rule 123 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    SEMICOLON       reduce using rule 123 (H_EXPRESSION_R -> OR H_EXPRESSION .)


state 193

    (124) H_EXPRESSION_R -> AND H_EXPRESSION .

    COMMA           reduce using rule 124 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    RPAREN          reduce using rule 124 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    SEMICOLON       reduce using rule 124 (H_EXPRESSION_R -> AND H_EXPRESSION .)


state 194

    (117) S_EXPRESSION -> EXPRESSION GT EXPRESSION .

    OR              reduce using rule 117 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    AND             reduce using rule 117 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    COMMA           reduce using rule 117 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    RPAREN          reduce using rule 117 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    SEMICOLON       reduce using rule 117 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)


state 195

    (118) S_EXPRESSION -> EXPRESSION LT EXPRESSION .

    OR              reduce using rule 118 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    AND             reduce using rule 118 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    COMMA           reduce using rule 118 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    RPAREN          reduce using rule 118 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    SEMICOLON       reduce using rule 118 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)


state 196

    (119) S_EXPRESSION -> EXPRESSION GTE EXPRESSION .

    OR              reduce using rule 119 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    AND             reduce using rule 119 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    COMMA           reduce using rule 119 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    RPAREN          reduce using rule 119 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    SEMICOLON       reduce using rule 119 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)


state 197

    (120) S_EXPRESSION -> EXPRESSION LTE EXPRESSION .

    OR              reduce using rule 120 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    AND             reduce using rule 120 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    COMMA           reduce using rule 120 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    RPAREN          reduce using rule 120 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    SEMICOLON       reduce using rule 120 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)


state 198

    (121) S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .

    OR              reduce using rule 121 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    AND             reduce using rule 121 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    COMMA           reduce using rule 121 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    RPAREN          reduce using rule 121 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    SEMICOLON       reduce using rule 121 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)


state 199

    (97) EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .

    GT              reduce using rule 97 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LT              reduce using rule 97 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    GTE             reduce using rule 97 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LTE             reduce using rule 97 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    DOUBLEEQUAL     reduce using rule 97 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    OR              reduce using rule 97 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    AND             reduce using rule 97 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    COMMA           reduce using rule 97 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    RPAREN          reduce using rule 97 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    SEMICOLON       reduce using rule 97 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)


state 200

    (99) EXPRESSION_R -> PLUS . NEURAL_PLUS EXPRESSION
    (102) NEURAL_PLUS -> . EMPTY
    (131) EMPTY -> .

    ID              reduce using rule 131 (EMPTY -> .)
    LPAREN          reduce using rule 131 (EMPTY -> .)
    INT             reduce using rule 131 (EMPTY -> .)
    FLOAT           reduce using rule 131 (EMPTY -> .)
    STRING          reduce using rule 131 (EMPTY -> .)

    NEURAL_PLUS                    shift and go to state 225
    EMPTY                          shift and go to state 226

state 201

    (100) EXPRESSION_R -> MINUS . NEURAL_MINUS EXPRESSION
    (103) NEURAL_MINUS -> . EMPTY
    (131) EMPTY -> .

    ID              reduce using rule 131 (EMPTY -> .)
    LPAREN          reduce using rule 131 (EMPTY -> .)
    INT             reduce using rule 131 (EMPTY -> .)
    FLOAT           reduce using rule 131 (EMPTY -> .)
    STRING          reduce using rule 131 (EMPTY -> .)

    NEURAL_MINUS                   shift and go to state 227
    EMPTY                          shift and go to state 228

state 202

    (101) EXPRESSION_R -> EMPTY .

    GT              reduce using rule 101 (EXPRESSION_R -> EMPTY .)
    LT              reduce using rule 101 (EXPRESSION_R -> EMPTY .)
    GTE             reduce using rule 101 (EXPRESSION_R -> EMPTY .)
    LTE             reduce using rule 101 (EXPRESSION_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 101 (EXPRESSION_R -> EMPTY .)
    OR              reduce using rule 101 (EXPRESSION_R -> EMPTY .)
    AND             reduce using rule 101 (EXPRESSION_R -> EMPTY .)
    COMMA           reduce using rule 101 (EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 101 (EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 101 (EXPRESSION_R -> EMPTY .)


state 203

    (104) TERM -> FACTOR NEURAL_TERM TERM_R .

    PLUS            reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    MINUS           reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GT              reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LT              reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GTE             reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LTE             reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    DOUBLEEQUAL     reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    OR              reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    AND             reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    COMMA           reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    RPAREN          reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    SEMICOLON       reduce using rule 104 (TERM -> FACTOR NEURAL_TERM TERM_R .)


state 204

    (106) TERM_R -> TIMES . NEURAL_TIMES TERM
    (109) NEURAL_TIMES -> . EMPTY
    (131) EMPTY -> .

    ID              reduce using rule 131 (EMPTY -> .)
    LPAREN          reduce using rule 131 (EMPTY -> .)
    INT             reduce using rule 131 (EMPTY -> .)
    FLOAT           reduce using rule 131 (EMPTY -> .)
    STRING          reduce using rule 131 (EMPTY -> .)

    NEURAL_TIMES                   shift and go to state 229
    EMPTY                          shift and go to state 230

state 205

    (107) TERM_R -> DIVIDE . NEURAL_DIVIDE TERM
    (110) NEURAL_DIVIDE -> . EMPTY
    (131) EMPTY -> .

    ID              reduce using rule 131 (EMPTY -> .)
    LPAREN          reduce using rule 131 (EMPTY -> .)
    INT             reduce using rule 131 (EMPTY -> .)
    FLOAT           reduce using rule 131 (EMPTY -> .)
    STRING          reduce using rule 131 (EMPTY -> .)

    NEURAL_DIVIDE                  shift and go to state 231
    EMPTY                          shift and go to state 232

state 206

    (108) TERM_R -> EMPTY .

    PLUS            reduce using rule 108 (TERM_R -> EMPTY .)
    MINUS           reduce using rule 108 (TERM_R -> EMPTY .)
    GT              reduce using rule 108 (TERM_R -> EMPTY .)
    LT              reduce using rule 108 (TERM_R -> EMPTY .)
    GTE             reduce using rule 108 (TERM_R -> EMPTY .)
    LTE             reduce using rule 108 (TERM_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 108 (TERM_R -> EMPTY .)
    OR              reduce using rule 108 (TERM_R -> EMPTY .)
    AND             reduce using rule 108 (TERM_R -> EMPTY .)
    COMMA           reduce using rule 108 (TERM_R -> EMPTY .)
    RPAREN          reduce using rule 108 (TERM_R -> EMPTY .)
    SEMICOLON       reduce using rule 108 (TERM_R -> EMPTY .)


state 207

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKSTART      shift and go to state 233


state 208

    (61) EXP_RESULT_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 61 (EXP_RESULT_NEURAL -> EMPTY .)


state 209

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN . WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (57) WHILE_POST_NEURAL -> . EMPTY
    (131) EMPTY -> .

    BLOCKSTART      reduce using rule 131 (EMPTY -> .)

    WHILE_POST_NEURAL              shift and go to state 234
    EMPTY                          shift and go to state 235

state 210

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    WHILE_K         shift and go to state 236


state 211

    (45) STATEMENT_R -> STATEMENT STATEMENT_R .

    BLOCKEND        reduce using rule 45 (STATEMENT_R -> STATEMENT STATEMENT_R .)


state 212

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K . INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 237


state 213

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY . RETURN BLOCKEND POST_FUNC PROC_DECL
    (96) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON

    RETURN_K        shift and go to state 239

    RETURN                         shift and go to state 238

state 214

    (30) PROC_BODY -> STATEMENT . PROC_BODY_R
    (38) PROC_BODY_R -> . PROC_BODY
    (39) PROC_BODY_R -> . EMPTY
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (131) EMPTY -> .
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    RETURN_K        reduce using rule 131 (EMPTY -> .)
    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    STATEMENT                      shift and go to state 214
    PROC_BODY_R                    shift and go to state 240
    PROC_BODY                      shift and go to state 241
    EMPTY                          shift and go to state 242
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 215

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART . LS_VARDECL BLOCKEND
    (32) LS_VARDECL -> . TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    LS_VARDECL                     shift and go to state 243
    TYPE                           shift and go to state 244

state 216

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY . BLOCKEND POST_FUNC PROC_DECL

    BLOCKEND        shift and go to state 245


state 217

    (67) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .

    SEMICOLON       reduce using rule 67 (ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .)


state 218

    (68) ASSI_H_EXP_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 68 (ASSI_H_EXP_NEURAL -> EMPTY .)


state 219

    (74) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN .

    SEMICOLON       reduce using rule 74 (FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN .)


state 220

    (77) EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2 .

    RPAREN          reduce using rule 77 (EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2 .)


state 221

    (79) EXP_LIST_2 -> COMMA . EXP_LIST
    (77) EXP_LIST -> . H_EXPRESSION EXP_NEURAL EXP_LIST_2
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    EXP_LIST                       shift and go to state 246
    H_EXPRESSION                   shift and go to state 141
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 222

    (80) EXP_LIST_2 -> EMPTY .

    RPAREN          reduce using rule 80 (EXP_LIST_2 -> EMPTY .)


state 223

    (87) ID_LIST_R -> COMMA ID_LIST .

    RPAREN          reduce using rule 87 (ID_LIST_R -> COMMA ID_LIST .)


state 224

    (93) WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .

    RPAREN          reduce using rule 93 (WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .)


state 225

    (99) EXPRESSION_R -> PLUS NEURAL_PLUS . EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    EXPRESSION                     shift and go to state 247
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 226

    (102) NEURAL_PLUS -> EMPTY .

    ID              reduce using rule 102 (NEURAL_PLUS -> EMPTY .)
    LPAREN          reduce using rule 102 (NEURAL_PLUS -> EMPTY .)
    INT             reduce using rule 102 (NEURAL_PLUS -> EMPTY .)
    FLOAT           reduce using rule 102 (NEURAL_PLUS -> EMPTY .)
    STRING          reduce using rule 102 (NEURAL_PLUS -> EMPTY .)


state 227

    (100) EXPRESSION_R -> MINUS NEURAL_MINUS . EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    EXPRESSION                     shift and go to state 248
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 228

    (103) NEURAL_MINUS -> EMPTY .

    ID              reduce using rule 103 (NEURAL_MINUS -> EMPTY .)
    LPAREN          reduce using rule 103 (NEURAL_MINUS -> EMPTY .)
    INT             reduce using rule 103 (NEURAL_MINUS -> EMPTY .)
    FLOAT           reduce using rule 103 (NEURAL_MINUS -> EMPTY .)
    STRING          reduce using rule 103 (NEURAL_MINUS -> EMPTY .)


state 229

    (106) TERM_R -> TIMES NEURAL_TIMES . TERM
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    TERM                           shift and go to state 249
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 230

    (109) NEURAL_TIMES -> EMPTY .

    ID              reduce using rule 109 (NEURAL_TIMES -> EMPTY .)
    LPAREN          reduce using rule 109 (NEURAL_TIMES -> EMPTY .)
    INT             reduce using rule 109 (NEURAL_TIMES -> EMPTY .)
    FLOAT           reduce using rule 109 (NEURAL_TIMES -> EMPTY .)
    STRING          reduce using rule 109 (NEURAL_TIMES -> EMPTY .)


state 231

    (107) TERM_R -> DIVIDE NEURAL_DIVIDE . TERM
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    TERM                           shift and go to state 250
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 232

    (110) NEURAL_DIVIDE -> EMPTY .

    ID              reduce using rule 110 (NEURAL_DIVIDE -> EMPTY .)
    LPAREN          reduce using rule 110 (NEURAL_DIVIDE -> EMPTY .)
    INT             reduce using rule 110 (NEURAL_DIVIDE -> EMPTY .)
    FLOAT           reduce using rule 110 (NEURAL_DIVIDE -> EMPTY .)
    STRING          reduce using rule 110 (NEURAL_DIVIDE -> EMPTY .)


state 233

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (131) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    STATEMENT_R                    shift and go to state 251
    STATEMENT                      shift and go to state 173
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 234

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    BLOCKSTART      shift and go to state 252


state 235

    (57) WHILE_POST_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 57 (WHILE_POST_NEURAL -> EMPTY .)


state 236

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K . LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    LPAREN          shift and go to state 253


state 237

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT . DO_K BLOCKSTART STATEMENT_R BLOCKEND

    DO_K            shift and go to state 254


state 238

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN . BLOCKEND POST_FUNC PROC_DECL

    BLOCKEND        shift and go to state 255


state 239

    (96) RETURN -> RETURN_K . LPAREN H_EXPRESSION RPAREN SEMICOLON

    LPAREN          shift and go to state 256


state 240

    (30) PROC_BODY -> STATEMENT PROC_BODY_R .

    RETURN_K        reduce using rule 30 (PROC_BODY -> STATEMENT PROC_BODY_R .)
    BLOCKEND        reduce using rule 30 (PROC_BODY -> STATEMENT PROC_BODY_R .)


state 241

    (38) PROC_BODY_R -> PROC_BODY .

    RETURN_K        reduce using rule 38 (PROC_BODY_R -> PROC_BODY .)
    BLOCKEND        reduce using rule 38 (PROC_BODY_R -> PROC_BODY .)


state 242

    (39) PROC_BODY_R -> EMPTY .

    RETURN_K        reduce using rule 39 (PROC_BODY_R -> EMPTY .)
    BLOCKEND        reduce using rule 39 (PROC_BODY_R -> EMPTY .)


state 243

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL . BLOCKEND

    BLOCKEND        shift and go to state 257


state 244

    (32) LS_VARDECL -> TYPE . COLON FNVAR_LS SEMICOLON LS_VARDECL_R

    COLON           shift and go to state 258


state 245

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND . POST_FUNC PROC_DECL
    (22) POST_FUNC -> . EMPTY
    (131) EMPTY -> .

    FUNCTION_K      reduce using rule 131 (EMPTY -> .)
    MAIN_K          reduce using rule 131 (EMPTY -> .)

    POST_FUNC                      shift and go to state 259
    EMPTY                          shift and go to state 260

state 246

    (79) EXP_LIST_2 -> COMMA EXP_LIST .

    RPAREN          reduce using rule 79 (EXP_LIST_2 -> COMMA EXP_LIST .)


state 247

    (99) EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .

    GT              reduce using rule 99 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LT              reduce using rule 99 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    GTE             reduce using rule 99 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LTE             reduce using rule 99 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 99 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    OR              reduce using rule 99 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    AND             reduce using rule 99 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    COMMA           reduce using rule 99 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    RPAREN          reduce using rule 99 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    SEMICOLON       reduce using rule 99 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)


state 248

    (100) EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .

    GT              reduce using rule 100 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LT              reduce using rule 100 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    GTE             reduce using rule 100 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LTE             reduce using rule 100 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 100 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    OR              reduce using rule 100 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    AND             reduce using rule 100 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    COMMA           reduce using rule 100 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    RPAREN          reduce using rule 100 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    SEMICOLON       reduce using rule 100 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)


state 249

    (106) TERM_R -> TIMES NEURAL_TIMES TERM .

    PLUS            reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    MINUS           reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GT              reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LT              reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GTE             reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LTE             reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    DOUBLEEQUAL     reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    OR              reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    AND             reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    COMMA           reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    RPAREN          reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    SEMICOLON       reduce using rule 106 (TERM_R -> TIMES NEURAL_TIMES TERM .)


state 250

    (107) TERM_R -> DIVIDE NEURAL_DIVIDE TERM .

    PLUS            reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    MINUS           reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GT              reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LT              reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GTE             reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LTE             reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    DOUBLEEQUAL     reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    OR              reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    AND             reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    COMMA           reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    RPAREN          reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    SEMICOLON       reduce using rule 107 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)


state 251

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKEND        shift and go to state 261


state 252

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (131) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    STATEMENT_R                    shift and go to state 262
    STATEMENT                      shift and go to state 173
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 253

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN . H_EXPRESSION RPAREN DW_END_NEURAL
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    H_EXPRESSION                   shift and go to state 263
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 254

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 264


state 255

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND . POST_FUNC PROC_DECL
    (22) POST_FUNC -> . EMPTY
    (131) EMPTY -> .

    FUNCTION_K      reduce using rule 131 (EMPTY -> .)
    MAIN_K          reduce using rule 131 (EMPTY -> .)

    POST_FUNC                      shift and go to state 265
    EMPTY                          shift and go to state 260

state 256

    (96) RETURN -> RETURN_K LPAREN . H_EXPRESSION RPAREN SEMICOLON
    (122) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (116) S_EXPRESSION -> . EXPRESSION
    (117) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (118) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (119) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (120) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (121) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (97) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (104) TERM -> . FACTOR NEURAL_TERM TERM_R
    (111) FACTOR -> . ID NEURAL_ID_FAC
    (112) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (113) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (81) CONSTANT -> . INT
    (82) CONSTANT -> . FLOAT
    (83) CONSTANT -> . STRING

    ID              shift and go to state 127
    LPAREN          shift and go to state 116
    INT             shift and go to state 121
    FLOAT           shift and go to state 122
    STRING          shift and go to state 123

    H_EXPRESSION                   shift and go to state 266
    S_EXPRESSION                   shift and go to state 120
    EXPRESSION                     shift and go to state 124
    TERM                           shift and go to state 125
    FACTOR                         shift and go to state 126
    CONSTANT                       shift and go to state 129

state 257

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .

    ID              reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    READ_K          reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    WRITE_K         reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    IF_K            reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    WHILE_K         reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    DO_K            reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    FOR_K           reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)


state 258

    (32) LS_VARDECL -> TYPE COLON . FNVAR_LS SEMICOLON LS_VARDECL_R
    (35) FNVAR_LS -> . ID FNVAR_LS2

    ID              shift and go to state 268

    FNVAR_LS                       shift and go to state 267

state 259

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (131) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 131 (EMPTY -> .)

    PROC_DECL                      shift and go to state 269
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 260

    (22) POST_FUNC -> EMPTY .

    FUNCTION_K      reduce using rule 22 (POST_FUNC -> EMPTY .)
    MAIN_K          reduce using rule 22 (POST_FUNC -> EMPTY .)


state 261

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . DECISION_ALT DECISION_END_NEURAL
    (63) DECISION_ALT -> . ELSE
    (64) DECISION_ALT -> . EMPTY
    (65) ELSE -> . ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
    (131) EMPTY -> .
    (66) ELSE_NEURAL -> . EMPTY

    ID              reduce using rule 131 (EMPTY -> .)
    READ_K          reduce using rule 131 (EMPTY -> .)
    WRITE_K         reduce using rule 131 (EMPTY -> .)
    IF_K            reduce using rule 131 (EMPTY -> .)
    WHILE_K         reduce using rule 131 (EMPTY -> .)
    DO_K            reduce using rule 131 (EMPTY -> .)
    FOR_K           reduce using rule 131 (EMPTY -> .)
    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    RETURN_K        reduce using rule 131 (EMPTY -> .)
    ELSE_K          reduce using rule 131 (EMPTY -> .)

    DECISION_ALT                   shift and go to state 270
    ELSE                           shift and go to state 271
    EMPTY                          shift and go to state 272
    ELSE_NEURAL                    shift and go to state 273

state 262

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND WHILE_END_NEURAL

    BLOCKEND        shift and go to state 274


state 263

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION . RPAREN DW_END_NEURAL

    RPAREN          shift and go to state 275


state 264

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART . STATEMENT_R BLOCKEND
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (131) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    STATEMENT_R                    shift and go to state 276
    STATEMENT                      shift and go to state 173
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 265

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (131) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 131 (EMPTY -> .)

    PROC_DECL                      shift and go to state 277
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 266

    (96) RETURN -> RETURN_K LPAREN H_EXPRESSION . RPAREN SEMICOLON

    RPAREN          shift and go to state 278


state 267

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS . SEMICOLON LS_VARDECL_R

    SEMICOLON       shift and go to state 279


state 268

    (35) FNVAR_LS -> ID . FNVAR_LS2
    (36) FNVAR_LS2 -> . COMMA ID FNVAR_LS2
    (37) FNVAR_LS2 -> . EMPTY
    (131) EMPTY -> .

    COMMA           shift and go to state 281
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    FNVAR_LS2                      shift and go to state 280
    EMPTY                          shift and go to state 282

state 269

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL .

    MAIN_K          reduce using rule 19 (PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL .)


state 270

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT . DECISION_END_NEURAL
    (62) DECISION_END_NEURAL -> . EMPTY
    (131) EMPTY -> .

    ID              reduce using rule 131 (EMPTY -> .)
    READ_K          reduce using rule 131 (EMPTY -> .)
    WRITE_K         reduce using rule 131 (EMPTY -> .)
    IF_K            reduce using rule 131 (EMPTY -> .)
    WHILE_K         reduce using rule 131 (EMPTY -> .)
    DO_K            reduce using rule 131 (EMPTY -> .)
    FOR_K           reduce using rule 131 (EMPTY -> .)
    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    RETURN_K        reduce using rule 131 (EMPTY -> .)

    DECISION_END_NEURAL            shift and go to state 283
    EMPTY                          shift and go to state 284

state 271

    (63) DECISION_ALT -> ELSE .

    ID              reduce using rule 63 (DECISION_ALT -> ELSE .)
    READ_K          reduce using rule 63 (DECISION_ALT -> ELSE .)
    WRITE_K         reduce using rule 63 (DECISION_ALT -> ELSE .)
    IF_K            reduce using rule 63 (DECISION_ALT -> ELSE .)
    WHILE_K         reduce using rule 63 (DECISION_ALT -> ELSE .)
    DO_K            reduce using rule 63 (DECISION_ALT -> ELSE .)
    FOR_K           reduce using rule 63 (DECISION_ALT -> ELSE .)
    BLOCKEND        reduce using rule 63 (DECISION_ALT -> ELSE .)
    RETURN_K        reduce using rule 63 (DECISION_ALT -> ELSE .)


state 272

    (64) DECISION_ALT -> EMPTY .
    (66) ELSE_NEURAL -> EMPTY .

    ID              reduce using rule 64 (DECISION_ALT -> EMPTY .)
    READ_K          reduce using rule 64 (DECISION_ALT -> EMPTY .)
    WRITE_K         reduce using rule 64 (DECISION_ALT -> EMPTY .)
    IF_K            reduce using rule 64 (DECISION_ALT -> EMPTY .)
    WHILE_K         reduce using rule 64 (DECISION_ALT -> EMPTY .)
    DO_K            reduce using rule 64 (DECISION_ALT -> EMPTY .)
    FOR_K           reduce using rule 64 (DECISION_ALT -> EMPTY .)
    BLOCKEND        reduce using rule 64 (DECISION_ALT -> EMPTY .)
    RETURN_K        reduce using rule 64 (DECISION_ALT -> EMPTY .)
    ELSE_K          reduce using rule 66 (ELSE_NEURAL -> EMPTY .)


state 273

    (65) ELSE -> ELSE_NEURAL . ELSE_K BLOCKSTART STATEMENT_R BLOCKEND

    ELSE_K          shift and go to state 285


state 274

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . WHILE_END_NEURAL
    (58) WHILE_END_NEURAL -> . EMPTY
    (131) EMPTY -> .

    ID              reduce using rule 131 (EMPTY -> .)
    READ_K          reduce using rule 131 (EMPTY -> .)
    WRITE_K         reduce using rule 131 (EMPTY -> .)
    IF_K            reduce using rule 131 (EMPTY -> .)
    WHILE_K         reduce using rule 131 (EMPTY -> .)
    DO_K            reduce using rule 131 (EMPTY -> .)
    FOR_K           reduce using rule 131 (EMPTY -> .)
    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    RETURN_K        reduce using rule 131 (EMPTY -> .)

    WHILE_END_NEURAL               shift and go to state 286
    EMPTY                          shift and go to state 287

state 275

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN . DW_END_NEURAL
    (54) DW_END_NEURAL -> . EMPTY
    (131) EMPTY -> .

    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    DW_END_NEURAL                  shift and go to state 288
    EMPTY                          shift and go to state 289

state 276

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 290


state 277

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL .

    MAIN_K          reduce using rule 21 (PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL .)


state 278

    (96) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 291


state 279

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON . LS_VARDECL_R
    (33) LS_VARDECL_R -> . LS_VARDECL
    (34) LS_VARDECL_R -> . EMPTY
    (32) LS_VARDECL -> . TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
    (131) EMPTY -> .
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 244
    LS_VARDECL_R                   shift and go to state 292
    LS_VARDECL                     shift and go to state 293
    EMPTY                          shift and go to state 294

state 280

    (35) FNVAR_LS -> ID FNVAR_LS2 .

    SEMICOLON       reduce using rule 35 (FNVAR_LS -> ID FNVAR_LS2 .)


state 281

    (36) FNVAR_LS2 -> COMMA . ID FNVAR_LS2

    ID              shift and go to state 295


state 282

    (37) FNVAR_LS2 -> EMPTY .

    SEMICOLON       reduce using rule 37 (FNVAR_LS2 -> EMPTY .)


state 283

    (60) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .

    ID              reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    READ_K          reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WRITE_K         reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    IF_K            reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WHILE_K         reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    DO_K            reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    FOR_K           reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    BLOCKEND        reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    RETURN_K        reduce using rule 60 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)


state 284

    (62) DECISION_END_NEURAL -> EMPTY .

    ID              reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    DO_K            reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 62 (DECISION_END_NEURAL -> EMPTY .)


state 285

    (65) ELSE -> ELSE_NEURAL ELSE_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 296


state 286

    (55) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .

    ID              reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    READ_K          reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    WRITE_K         reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    IF_K            reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    WHILE_K         reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    DO_K            reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    FOR_K           reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    BLOCKEND        reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    RETURN_K        reduce using rule 55 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)


state 287

    (58) WHILE_END_NEURAL -> EMPTY .

    ID              reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    DO_K            reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 58 (WHILE_END_NEURAL -> EMPTY .)


state 288

    (52) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL .

    SEMICOLON       reduce using rule 52 (DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL .)


state 289

    (54) DW_END_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 54 (DW_END_NEURAL -> EMPTY .)


state 290

    (59) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    DO_K            reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 59 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)


state 291

    (96) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .

    BLOCKEND        reduce using rule 96 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)


state 292

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R .

    BLOCKEND        reduce using rule 32 (LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R .)


state 293

    (33) LS_VARDECL_R -> LS_VARDECL .

    BLOCKEND        reduce using rule 33 (LS_VARDECL_R -> LS_VARDECL .)


state 294

    (34) LS_VARDECL_R -> EMPTY .

    BLOCKEND        reduce using rule 34 (LS_VARDECL_R -> EMPTY .)


state 295

    (36) FNVAR_LS2 -> COMMA ID . FNVAR_LS2
    (36) FNVAR_LS2 -> . COMMA ID FNVAR_LS2
    (37) FNVAR_LS2 -> . EMPTY
    (131) EMPTY -> .

    COMMA           shift and go to state 281
    SEMICOLON       reduce using rule 131 (EMPTY -> .)

    FNVAR_LS2                      shift and go to state 297
    EMPTY                          shift and go to state 282

state 296

    (65) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART . STATEMENT_R BLOCKEND
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . FUNC_CALL SEMICOLON
    (42) STATEMENT -> . READ SEMICOLON
    (43) STATEMENT -> . WRITE SEMICOLON
    (44) STATEMENT -> . FLOW
    (131) EMPTY -> .
    (67) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (74) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (84) READ -> . READ_K LPAREN ID_LIST RPAREN
    (89) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (47) FLOW -> . DECISION
    (48) FLOW -> . LOOP
    (71) VAR -> . ID
    (72) VAR -> . ARRAY
    (60) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (49) LOOP -> . WHILE_LOOP
    (50) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (51) LOOP -> . FOR_LOOP
    (73) ARRAY -> . ID LBRACE INT RBRACE
    (55) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (52) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (59) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 131 (EMPTY -> .)
    ID              shift and go to state 68
    READ_K          shift and go to state 69
    WRITE_K         shift and go to state 70
    IF_K            shift and go to state 74
    WHILE_K         shift and go to state 78
    DO_K            shift and go to state 79
    FOR_K           shift and go to state 80

    STATEMENT_R                    shift and go to state 298
    STATEMENT                      shift and go to state 173
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 62
    FUNC_CALL                      shift and go to state 63
    READ                           shift and go to state 64
    WRITE                          shift and go to state 65
    FLOW                           shift and go to state 66
    VAR                            shift and go to state 67
    DECISION                       shift and go to state 71
    LOOP                           shift and go to state 72
    ARRAY                          shift and go to state 73
    WHILE_LOOP                     shift and go to state 75
    DO_WHILE_LOOP                  shift and go to state 76
    FOR_LOOP                       shift and go to state 77

state 297

    (36) FNVAR_LS2 -> COMMA ID FNVAR_LS2 .

    SEMICOLON       reduce using rule 36 (FNVAR_LS2 -> COMMA ID FNVAR_LS2 .)


state 298

    (65) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 299


state 299

    (65) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    DO_K            reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 65 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 153 resolved using rule (CONSTANT_WRITE_N -> EMPTY)
WARNING: rejected rule (NEURAL_CNT_FACT -> EMPTY) in state 153
