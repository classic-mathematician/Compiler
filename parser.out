Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOUBLEEQUAL
    GTE
    LTE
    THEN_K

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK
Rule 2     neural_program_id -> EMPTY
Rule 3     BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
Rule 4     VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND
Rule 5     VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
Rule 6     VAR_DECL_R -> VAR_DECL
Rule 7     VAR_DECL_R -> EMPTY
Rule 8     VAR_LIST -> ID VAR_LIST2
Rule 9     VAR_LIST2 -> COMMA ID VAR_LIST2
Rule 10    VAR_LIST2 -> EMPTY
Rule 11    TYPE -> INT_K
Rule 12    TYPE -> FLOAT_K
Rule 13    TYPE -> STRING_K
Rule 14    PROC_BLOCK -> PROC_DECL
Rule 15    PROC_DECL -> PROC_DECL_RETURN
Rule 16    PROC_DECL -> PROC_DECL_VOID
Rule 17    PROC_DECL -> EMPTY
Rule 18    PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
Rule 19    neural_proc_void_id -> EMPTY
Rule 20    PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
Rule 21    neural_proc_return_id -> EMPTY
Rule 22    neural_param_decl -> EMPTY
Rule 23    PARAM_DECL -> TYPE ID PARAM_DECL_R
Rule 24    PARAM_DECL -> EMPTY
Rule 25    PARAM_DECL_R -> COMMA PARAM_DECL
Rule 26    PARAM_DECL_R -> EMPTY
Rule 27    PROC_BODY -> STATEMENT PROC_BODY_R
Rule 28    PROC_BODY_R -> PROC_BODY
Rule 29    PROC_BODY_R -> EMPTY
Rule 30    STATEMENT -> ASSIGN SEMICOLON
Rule 31    STATEMENT -> FUNC_CALL SEMICOLON
Rule 32    STATEMENT -> READ SEMICOLON
Rule 33    STATEMENT -> WRITE SEMICOLON
Rule 34    STATEMENT -> FLOW
Rule 35    FLOW -> DECISION
Rule 36    FLOW -> LOOP
Rule 37    LOOP -> WHILE_LOOP
Rule 38    LOOP -> FOR_LOOP
Rule 39    WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
Rule 40    FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 41    DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
Rule 42    DECISION_ALT -> ELSE_K DECISION
Rule 43    DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND
Rule 44    DECISION_ALT -> EMPTY
Rule 45    STATEMENT_R -> STATEMENT STATEMENT_R
Rule 46    STATEMENT_R -> EMPTY
Rule 47    ASSIGN -> VAR EQUALS H_EXPRESSION
Rule 48    VAR -> ID
Rule 49    VAR -> ARRAY
Rule 50    ARRAY -> ID LBRACE INT RBRACE
Rule 51    FUNC_CALL -> ID LPAREN ARG_LIST RPAREN
Rule 52    ARG_LIST -> VAR ARG_LIST_R
Rule 53    ARG_LIST -> CONSTANT ARG_LIST_R
Rule 54    ARG_LIST -> ARG_LIST_R
Rule 55    ARG_LIST_R -> COMMA ARG_LIST
Rule 56    ARG_LIST_R -> EMPTY
Rule 57    CONSTANT -> INT
Rule 58    CONSTANT -> FLOAT
Rule 59    CONSTANT -> STRING
Rule 60    READ -> READ_K ID_LIST
Rule 61    ID_LIST -> ID ID_LIST_R
Rule 62    ID_LIST_R -> COMMA ID_LIST
Rule 63    ID_LIST_R -> EMPTY
Rule 64    WRITE -> WRITE_K WRITE_LIST
Rule 65    WRITE_LIST -> H_EXPRESSION WRITE_LIST_R
Rule 66    WRITE_LIST_R -> COMMA H_EXPRESSION
Rule 67    WRITE_LIST_R -> EMPTY
Rule 68    RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
Rule 69    EXPRESSION -> TERM EXPRESSION_R
Rule 70    EXPRESSION_R -> PLUS EXPRESSION
Rule 71    EXPRESSION_R -> MINUS EXPRESSION
Rule 72    EXPRESSION_R -> EMPTY
Rule 73    TERM -> FACTOR TERM_R
Rule 74    TERM_R -> TIMES TERM
Rule 75    TERM_R -> DIVIDE TERM
Rule 76    TERM_R -> EMPTY
Rule 77    FACTOR -> ID
Rule 78    FACTOR -> CONSTANT
Rule 79    FACTOR -> LPAREN EXPRESSION RPAREN
Rule 80    S_EXPRESSION -> EXPRESSION
Rule 81    S_EXPRESSION -> EXPRESSION GT EXPRESSION
Rule 82    S_EXPRESSION -> EXPRESSION LT EXPRESSION
Rule 83    H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R
Rule 84    H_EXPRESSION_R -> OR H_EXPRESSION
Rule 85    H_EXPRESSION_R -> AND H_EXPRESSION
Rule 86    H_EXPRESSION_R -> EMPTY
Rule 87    PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
Rule 88    PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R
Rule 89    PRINCIPAL_BODY_R -> PRINCIPAL_BODY
Rule 90    PRINCIPAL_BODY_R -> EMPTY
Rule 91    EMPTY -> <empty>

Terminals, with rules where they appear

AND                  : 85
BLOCKEND             : 4 18 20 39 40 41 43 87
BLOCKSTART           : 4 18 20 39 40 41 43 87
COLON                : 5
COMMA                : 9 25 55 62 66
COMMENT              : 
DIVIDE               : 75
DOUBLEEQUAL          : 
DO_K                 : 40
ELSE_K               : 42
EQUALS               : 40 47
FLOAT                : 58
FLOAT_K              : 12
FOR_K                : 40
FUNCTION_K           : 18 20
GT                   : 81
GTE                  : 
ID                   : 1 8 9 18 20 23 40 48 50 51 61 77
IF_K                 : 41
INT                  : 40 40 50 57
INT_K                : 11
LBRACE               : 50
LPAREN               : 18 20 39 41 51 68 79 87
LT                   : 82
LTE                  : 
MAIN_K               : 87
MINUS                : 71
OR                   : 84
PLUS                 : 70
PROGRAM_K            : 1
RBRACE               : 50
READ_K               : 60
RETURN_K             : 68
RPAREN               : 18 20 39 41 51 68 79 87
SEMICOLON            : 1 5 30 31 32 33 68
STRING               : 59
STRING_K             : 13
THEN_K               : 
TIMES                : 74
TO_K                 : 40
VARS_K               : 4
VOID_K               : 18
WHILE_K              : 39
WRITE_K              : 64
error                : 

Nonterminals, with rules where they appear

ARG_LIST             : 51 55
ARG_LIST_R           : 52 53 54
ARRAY                : 49
ASSIGN               : 30
BLOCK                : 1
CONSTANT             : 53 78
DECISION             : 35 42
DECISION_ALT         : 41
EMPTY                : 2 7 10 17 19 21 22 24 26 29 44 46 56 63 67 72 76 86 90
EXPRESSION           : 70 71 79 80 81 81 82 82
EXPRESSION_R         : 69
FACTOR               : 73
FLOW                 : 34
FOR_LOOP             : 38
FUNC_CALL            : 31
H_EXPRESSION         : 39 41 47 65 66 68 84 85
H_EXPRESSION_R       : 83
ID_LIST              : 60 62
ID_LIST_R            : 61
LOOP                 : 36
PARAM_DECL           : 18 20 25
PARAM_DECL_R         : 23
PRINCIPAL_BLOCK      : 3
PRINCIPAL_BODY       : 87 89
PRINCIPAL_BODY_R     : 88
PROC_BLOCK           : 3
PROC_BODY            : 18 20 28
PROC_BODY_R          : 27
PROC_DECL            : 14 18 20
PROC_DECL_RETURN     : 15
PROC_DECL_VOID       : 16
PROGRAM              : 0
READ                 : 32
RETURN               : 20
STATEMENT            : 27 45 88
STATEMENT_R          : 39 40 41 43 45
S_EXPRESSION         : 83
TERM                 : 69 74 75
TERM_R               : 73
TYPE                 : 5 20 23
VAR                  : 47 52
VAR_BLOCK            : 3
VAR_DECL             : 4 6
VAR_DECL_R           : 5
VAR_LIST             : 5
VAR_LIST2            : 8 9
WHILE_LOOP           : 37
WRITE                : 33
WRITE_LIST           : 64
WRITE_LIST_R         : 65
neural_param_decl    : 18 20
neural_proc_return_id : 20
neural_proc_void_id  : 18
neural_program_id    : 1

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROGRAM_K ID neural_program_id SEMICOLON BLOCK

    PROGRAM_K       shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROGRAM_K . ID neural_program_id SEMICOLON BLOCK

    ID              shift and go to state 3


state 3

    (1) PROGRAM -> PROGRAM_K ID . neural_program_id SEMICOLON BLOCK
    (2) neural_program_id -> . EMPTY
    (91) EMPTY -> .

    SEMICOLON       reduce using rule 91 (EMPTY -> .)

    neural_program_id              shift and go to state 4
    EMPTY                          shift and go to state 5

state 4

    (1) PROGRAM -> PROGRAM_K ID neural_program_id . SEMICOLON BLOCK

    SEMICOLON       shift and go to state 6


state 5

    (2) neural_program_id -> EMPTY .

    SEMICOLON       reduce using rule 2 (neural_program_id -> EMPTY .)


state 6

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON . BLOCK
    (3) BLOCK -> . VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
    (4) VAR_BLOCK -> . VARS_K BLOCKSTART VAR_DECL BLOCKEND

    VARS_K          shift and go to state 9

    BLOCK                          shift and go to state 7
    VAR_BLOCK                      shift and go to state 8

state 7

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .

    $end            reduce using rule 1 (PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .)


state 8

    (3) BLOCK -> VAR_BLOCK . PROC_BLOCK PRINCIPAL_BLOCK
    (14) PROC_BLOCK -> . PROC_DECL
    (15) PROC_DECL -> . PROC_DECL_RETURN
    (16) PROC_DECL -> . PROC_DECL_VOID
    (17) PROC_DECL -> . EMPTY
    (20) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (18) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (91) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 91 (EMPTY -> .)

    PROC_BLOCK                     shift and go to state 10
    PROC_DECL                      shift and go to state 11
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 9

    (4) VAR_BLOCK -> VARS_K . BLOCKSTART VAR_DECL BLOCKEND

    BLOCKSTART      shift and go to state 16


state 10

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK . PRINCIPAL_BLOCK
    (87) PRINCIPAL_BLOCK -> . MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    MAIN_K          shift and go to state 18

    PRINCIPAL_BLOCK                shift and go to state 17

state 11

    (14) PROC_BLOCK -> PROC_DECL .

    MAIN_K          reduce using rule 14 (PROC_BLOCK -> PROC_DECL .)


state 12

    (15) PROC_DECL -> PROC_DECL_RETURN .

    MAIN_K          reduce using rule 15 (PROC_DECL -> PROC_DECL_RETURN .)


state 13

    (16) PROC_DECL -> PROC_DECL_VOID .

    MAIN_K          reduce using rule 16 (PROC_DECL -> PROC_DECL_VOID .)


state 14

    (17) PROC_DECL -> EMPTY .

    MAIN_K          reduce using rule 17 (PROC_DECL -> EMPTY .)


state 15

    (20) PROC_DECL_RETURN -> FUNCTION_K . TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (18) PROC_DECL_VOID -> FUNCTION_K . VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (11) TYPE -> . INT_K
    (12) TYPE -> . FLOAT_K
    (13) TYPE -> . STRING_K

    VOID_K          shift and go to state 20
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 19

state 16

    (4) VAR_BLOCK -> VARS_K BLOCKSTART . VAR_DECL BLOCKEND
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (11) TYPE -> . INT_K
    (12) TYPE -> . FLOAT_K
    (13) TYPE -> . STRING_K

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    VAR_DECL                       shift and go to state 24
    TYPE                           shift and go to state 25

state 17

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .

    $end            reduce using rule 3 (BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .)


state 18

    (87) PRINCIPAL_BLOCK -> MAIN_K . LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    LPAREN          shift and go to state 26


state 19

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE . ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    ID              shift and go to state 27


state 20

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K . ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    ID              shift and go to state 28


state 21

    (11) TYPE -> INT_K .

    ID              reduce using rule 11 (TYPE -> INT_K .)
    COLON           reduce using rule 11 (TYPE -> INT_K .)


state 22

    (12) TYPE -> FLOAT_K .

    ID              reduce using rule 12 (TYPE -> FLOAT_K .)
    COLON           reduce using rule 12 (TYPE -> FLOAT_K .)


state 23

    (13) TYPE -> STRING_K .

    ID              reduce using rule 13 (TYPE -> STRING_K .)
    COLON           reduce using rule 13 (TYPE -> STRING_K .)


state 24

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL . BLOCKEND

    BLOCKEND        shift and go to state 29


state 25

    (5) VAR_DECL -> TYPE . COLON VAR_LIST SEMICOLON VAR_DECL_R

    COLON           shift and go to state 30


state 26

    (87) PRINCIPAL_BLOCK -> MAIN_K LPAREN . RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    RPAREN          shift and go to state 31


state 27

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID . neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (21) neural_proc_return_id -> . EMPTY
    (91) EMPTY -> .

    LPAREN          reduce using rule 91 (EMPTY -> .)

    neural_proc_return_id          shift and go to state 32
    EMPTY                          shift and go to state 33

state 28

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K ID . neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (19) neural_proc_void_id -> . EMPTY
    (91) EMPTY -> .

    LPAREN          reduce using rule 91 (EMPTY -> .)

    neural_proc_void_id            shift and go to state 34
    EMPTY                          shift and go to state 35

state 29

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .

    FUNCTION_K      reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)
    MAIN_K          reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)


state 30

    (5) VAR_DECL -> TYPE COLON . VAR_LIST SEMICOLON VAR_DECL_R
    (8) VAR_LIST -> . ID VAR_LIST2

    ID              shift and go to state 37

    VAR_LIST                       shift and go to state 36

state 31

    (87) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN . BLOCKSTART PRINCIPAL_BODY BLOCKEND

    BLOCKSTART      shift and go to state 38


state 32

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    LPAREN          shift and go to state 39


state 33

    (21) neural_proc_return_id -> EMPTY .

    LPAREN          reduce using rule 21 (neural_proc_return_id -> EMPTY .)


state 34

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    LPAREN          shift and go to state 40


state 35

    (19) neural_proc_void_id -> EMPTY .

    LPAREN          reduce using rule 19 (neural_proc_void_id -> EMPTY .)


state 36

    (5) VAR_DECL -> TYPE COLON VAR_LIST . SEMICOLON VAR_DECL_R

    SEMICOLON       shift and go to state 41


state 37

    (8) VAR_LIST -> ID . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA ID VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (91) EMPTY -> .

    COMMA           shift and go to state 43
    SEMICOLON       reduce using rule 91 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 42
    EMPTY                          shift and go to state 44

state 38

    (87) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART . PRINCIPAL_BODY BLOCKEND
    (88) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (30) STATEMENT -> . ASSIGN SEMICOLON
    (31) STATEMENT -> . FUNC_CALL SEMICOLON
    (32) STATEMENT -> . READ SEMICOLON
    (33) STATEMENT -> . WRITE SEMICOLON
    (34) STATEMENT -> . FLOW
    (47) ASSIGN -> . VAR EQUALS H_EXPRESSION
    (51) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (60) READ -> . READ_K ID_LIST
    (64) WRITE -> . WRITE_K WRITE_LIST
    (35) FLOW -> . DECISION
    (36) FLOW -> . LOOP
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (37) LOOP -> . WHILE_LOOP
    (38) LOOP -> . FOR_LOOP
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (39) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (40) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 53
    READ_K          shift and go to state 54
    WRITE_K         shift and go to state 55
    IF_K            shift and go to state 59
    WHILE_K         shift and go to state 62
    FOR_K           shift and go to state 63

    PRINCIPAL_BODY                 shift and go to state 45
    STATEMENT                      shift and go to state 46
    ASSIGN                         shift and go to state 47
    FUNC_CALL                      shift and go to state 48
    READ                           shift and go to state 49
    WRITE                          shift and go to state 50
    FLOW                           shift and go to state 51
    VAR                            shift and go to state 52
    DECISION                       shift and go to state 56
    LOOP                           shift and go to state 57
    ARRAY                          shift and go to state 58
    WHILE_LOOP                     shift and go to state 60
    FOR_LOOP                       shift and go to state 61

state 39

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (23) PARAM_DECL -> . TYPE ID PARAM_DECL_R
    (24) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K
    (12) TYPE -> . FLOAT_K
    (13) TYPE -> . STRING_K
    (91) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 91 (EMPTY -> .)

    TYPE                           shift and go to state 64
    PARAM_DECL                     shift and go to state 65
    EMPTY                          shift and go to state 66

state 40

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (23) PARAM_DECL -> . TYPE ID PARAM_DECL_R
    (24) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K
    (12) TYPE -> . FLOAT_K
    (13) TYPE -> . STRING_K
    (91) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 91 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 67
    TYPE                           shift and go to state 64
    EMPTY                          shift and go to state 66

state 41

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON . VAR_DECL_R
    (6) VAR_DECL_R -> . VAR_DECL
    (7) VAR_DECL_R -> . EMPTY
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (91) EMPTY -> .
    (11) TYPE -> . INT_K
    (12) TYPE -> . FLOAT_K
    (13) TYPE -> . STRING_K

    BLOCKEND        reduce using rule 91 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 25
    VAR_DECL_R                     shift and go to state 68
    VAR_DECL                       shift and go to state 69
    EMPTY                          shift and go to state 70

state 42

    (8) VAR_LIST -> ID VAR_LIST2 .

    SEMICOLON       reduce using rule 8 (VAR_LIST -> ID VAR_LIST2 .)


state 43

    (9) VAR_LIST2 -> COMMA . ID VAR_LIST2

    ID              shift and go to state 71


state 44

    (10) VAR_LIST2 -> EMPTY .

    SEMICOLON       reduce using rule 10 (VAR_LIST2 -> EMPTY .)


state 45

    (87) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY . BLOCKEND

    BLOCKEND        shift and go to state 72


state 46

    (88) PRINCIPAL_BODY -> STATEMENT . PRINCIPAL_BODY_R
    (89) PRINCIPAL_BODY_R -> . PRINCIPAL_BODY
    (90) PRINCIPAL_BODY_R -> . EMPTY
    (88) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (91) EMPTY -> .
    (30) STATEMENT -> . ASSIGN SEMICOLON
    (31) STATEMENT -> . FUNC_CALL SEMICOLON
    (32) STATEMENT -> . READ SEMICOLON
    (33) STATEMENT -> . WRITE SEMICOLON
    (34) STATEMENT -> . FLOW
    (47) ASSIGN -> . VAR EQUALS H_EXPRESSION
    (51) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (60) READ -> . READ_K ID_LIST
    (64) WRITE -> . WRITE_K WRITE_LIST
    (35) FLOW -> . DECISION
    (36) FLOW -> . LOOP
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (37) LOOP -> . WHILE_LOOP
    (38) LOOP -> . FOR_LOOP
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (39) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (40) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 91 (EMPTY -> .)
    ID              shift and go to state 53
    READ_K          shift and go to state 54
    WRITE_K         shift and go to state 55
    IF_K            shift and go to state 59
    WHILE_K         shift and go to state 62
    FOR_K           shift and go to state 63

    STATEMENT                      shift and go to state 46
    PRINCIPAL_BODY_R               shift and go to state 73
    PRINCIPAL_BODY                 shift and go to state 74
    EMPTY                          shift and go to state 75
    ASSIGN                         shift and go to state 47
    FUNC_CALL                      shift and go to state 48
    READ                           shift and go to state 49
    WRITE                          shift and go to state 50
    FLOW                           shift and go to state 51
    VAR                            shift and go to state 52
    DECISION                       shift and go to state 56
    LOOP                           shift and go to state 57
    ARRAY                          shift and go to state 58
    WHILE_LOOP                     shift and go to state 60
    FOR_LOOP                       shift and go to state 61

state 47

    (30) STATEMENT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 76


state 48

    (31) STATEMENT -> FUNC_CALL . SEMICOLON

    SEMICOLON       shift and go to state 77


state 49

    (32) STATEMENT -> READ . SEMICOLON

    SEMICOLON       shift and go to state 78


state 50

    (33) STATEMENT -> WRITE . SEMICOLON

    SEMICOLON       shift and go to state 79


state 51

    (34) STATEMENT -> FLOW .

    ID              reduce using rule 34 (STATEMENT -> FLOW .)
    READ_K          reduce using rule 34 (STATEMENT -> FLOW .)
    WRITE_K         reduce using rule 34 (STATEMENT -> FLOW .)
    IF_K            reduce using rule 34 (STATEMENT -> FLOW .)
    WHILE_K         reduce using rule 34 (STATEMENT -> FLOW .)
    FOR_K           reduce using rule 34 (STATEMENT -> FLOW .)
    BLOCKEND        reduce using rule 34 (STATEMENT -> FLOW .)
    RETURN_K        reduce using rule 34 (STATEMENT -> FLOW .)


state 52

    (47) ASSIGN -> VAR . EQUALS H_EXPRESSION

    EQUALS          shift and go to state 80


state 53

    (51) FUNC_CALL -> ID . LPAREN ARG_LIST RPAREN
    (48) VAR -> ID .
    (50) ARRAY -> ID . LBRACE INT RBRACE

    LPAREN          shift and go to state 81
    EQUALS          reduce using rule 48 (VAR -> ID .)
    LBRACE          shift and go to state 82


state 54

    (60) READ -> READ_K . ID_LIST
    (61) ID_LIST -> . ID ID_LIST_R

    ID              shift and go to state 84

    ID_LIST                        shift and go to state 83

state 55

    (64) WRITE -> WRITE_K . WRITE_LIST
    (65) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (83) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (80) S_EXPRESSION -> . EXPRESSION
    (81) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (82) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    WRITE_LIST                     shift and go to state 85
    H_EXPRESSION                   shift and go to state 86
    S_EXPRESSION                   shift and go to state 87
    EXPRESSION                     shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 56

    (35) FLOW -> DECISION .

    ID              reduce using rule 35 (FLOW -> DECISION .)
    READ_K          reduce using rule 35 (FLOW -> DECISION .)
    WRITE_K         reduce using rule 35 (FLOW -> DECISION .)
    IF_K            reduce using rule 35 (FLOW -> DECISION .)
    WHILE_K         reduce using rule 35 (FLOW -> DECISION .)
    FOR_K           reduce using rule 35 (FLOW -> DECISION .)
    BLOCKEND        reduce using rule 35 (FLOW -> DECISION .)
    RETURN_K        reduce using rule 35 (FLOW -> DECISION .)


state 57

    (36) FLOW -> LOOP .

    ID              reduce using rule 36 (FLOW -> LOOP .)
    READ_K          reduce using rule 36 (FLOW -> LOOP .)
    WRITE_K         reduce using rule 36 (FLOW -> LOOP .)
    IF_K            reduce using rule 36 (FLOW -> LOOP .)
    WHILE_K         reduce using rule 36 (FLOW -> LOOP .)
    FOR_K           reduce using rule 36 (FLOW -> LOOP .)
    BLOCKEND        reduce using rule 36 (FLOW -> LOOP .)
    RETURN_K        reduce using rule 36 (FLOW -> LOOP .)


state 58

    (49) VAR -> ARRAY .

    EQUALS          reduce using rule 49 (VAR -> ARRAY .)
    COMMA           reduce using rule 49 (VAR -> ARRAY .)
    RPAREN          reduce using rule 49 (VAR -> ARRAY .)


state 59

    (41) DECISION -> IF_K . LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT

    LPAREN          shift and go to state 97


state 60

    (37) LOOP -> WHILE_LOOP .

    ID              reduce using rule 37 (LOOP -> WHILE_LOOP .)
    READ_K          reduce using rule 37 (LOOP -> WHILE_LOOP .)
    WRITE_K         reduce using rule 37 (LOOP -> WHILE_LOOP .)
    IF_K            reduce using rule 37 (LOOP -> WHILE_LOOP .)
    WHILE_K         reduce using rule 37 (LOOP -> WHILE_LOOP .)
    FOR_K           reduce using rule 37 (LOOP -> WHILE_LOOP .)
    BLOCKEND        reduce using rule 37 (LOOP -> WHILE_LOOP .)
    RETURN_K        reduce using rule 37 (LOOP -> WHILE_LOOP .)


state 61

    (38) LOOP -> FOR_LOOP .

    ID              reduce using rule 38 (LOOP -> FOR_LOOP .)
    READ_K          reduce using rule 38 (LOOP -> FOR_LOOP .)
    WRITE_K         reduce using rule 38 (LOOP -> FOR_LOOP .)
    IF_K            reduce using rule 38 (LOOP -> FOR_LOOP .)
    WHILE_K         reduce using rule 38 (LOOP -> FOR_LOOP .)
    FOR_K           reduce using rule 38 (LOOP -> FOR_LOOP .)
    BLOCKEND        reduce using rule 38 (LOOP -> FOR_LOOP .)
    RETURN_K        reduce using rule 38 (LOOP -> FOR_LOOP .)


state 62

    (39) WHILE_LOOP -> WHILE_K . LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND

    LPAREN          shift and go to state 98


state 63

    (40) FOR_LOOP -> FOR_K . ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 99


state 64

    (23) PARAM_DECL -> TYPE . ID PARAM_DECL_R

    ID              shift and go to state 100


state 65

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    RPAREN          shift and go to state 101


state 66

    (24) PARAM_DECL -> EMPTY .

    RPAREN          reduce using rule 24 (PARAM_DECL -> EMPTY .)


state 67

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    RPAREN          shift and go to state 102


state 68

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .

    BLOCKEND        reduce using rule 5 (VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .)


state 69

    (6) VAR_DECL_R -> VAR_DECL .

    BLOCKEND        reduce using rule 6 (VAR_DECL_R -> VAR_DECL .)


state 70

    (7) VAR_DECL_R -> EMPTY .

    BLOCKEND        reduce using rule 7 (VAR_DECL_R -> EMPTY .)


state 71

    (9) VAR_LIST2 -> COMMA ID . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA ID VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (91) EMPTY -> .

    COMMA           shift and go to state 43
    SEMICOLON       reduce using rule 91 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 103
    EMPTY                          shift and go to state 44

state 72

    (87) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .

    $end            reduce using rule 87 (PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .)


state 73

    (88) PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .

    BLOCKEND        reduce using rule 88 (PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .)


state 74

    (89) PRINCIPAL_BODY_R -> PRINCIPAL_BODY .

    BLOCKEND        reduce using rule 89 (PRINCIPAL_BODY_R -> PRINCIPAL_BODY .)


state 75

    (90) PRINCIPAL_BODY_R -> EMPTY .

    BLOCKEND        reduce using rule 90 (PRINCIPAL_BODY_R -> EMPTY .)


state 76

    (30) STATEMENT -> ASSIGN SEMICOLON .

    ID              reduce using rule 30 (STATEMENT -> ASSIGN SEMICOLON .)
    READ_K          reduce using rule 30 (STATEMENT -> ASSIGN SEMICOLON .)
    WRITE_K         reduce using rule 30 (STATEMENT -> ASSIGN SEMICOLON .)
    IF_K            reduce using rule 30 (STATEMENT -> ASSIGN SEMICOLON .)
    WHILE_K         reduce using rule 30 (STATEMENT -> ASSIGN SEMICOLON .)
    FOR_K           reduce using rule 30 (STATEMENT -> ASSIGN SEMICOLON .)
    BLOCKEND        reduce using rule 30 (STATEMENT -> ASSIGN SEMICOLON .)
    RETURN_K        reduce using rule 30 (STATEMENT -> ASSIGN SEMICOLON .)


state 77

    (31) STATEMENT -> FUNC_CALL SEMICOLON .

    ID              reduce using rule 31 (STATEMENT -> FUNC_CALL SEMICOLON .)
    READ_K          reduce using rule 31 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WRITE_K         reduce using rule 31 (STATEMENT -> FUNC_CALL SEMICOLON .)
    IF_K            reduce using rule 31 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WHILE_K         reduce using rule 31 (STATEMENT -> FUNC_CALL SEMICOLON .)
    FOR_K           reduce using rule 31 (STATEMENT -> FUNC_CALL SEMICOLON .)
    BLOCKEND        reduce using rule 31 (STATEMENT -> FUNC_CALL SEMICOLON .)
    RETURN_K        reduce using rule 31 (STATEMENT -> FUNC_CALL SEMICOLON .)


state 78

    (32) STATEMENT -> READ SEMICOLON .

    ID              reduce using rule 32 (STATEMENT -> READ SEMICOLON .)
    READ_K          reduce using rule 32 (STATEMENT -> READ SEMICOLON .)
    WRITE_K         reduce using rule 32 (STATEMENT -> READ SEMICOLON .)
    IF_K            reduce using rule 32 (STATEMENT -> READ SEMICOLON .)
    WHILE_K         reduce using rule 32 (STATEMENT -> READ SEMICOLON .)
    FOR_K           reduce using rule 32 (STATEMENT -> READ SEMICOLON .)
    BLOCKEND        reduce using rule 32 (STATEMENT -> READ SEMICOLON .)
    RETURN_K        reduce using rule 32 (STATEMENT -> READ SEMICOLON .)


state 79

    (33) STATEMENT -> WRITE SEMICOLON .

    ID              reduce using rule 33 (STATEMENT -> WRITE SEMICOLON .)
    READ_K          reduce using rule 33 (STATEMENT -> WRITE SEMICOLON .)
    WRITE_K         reduce using rule 33 (STATEMENT -> WRITE SEMICOLON .)
    IF_K            reduce using rule 33 (STATEMENT -> WRITE SEMICOLON .)
    WHILE_K         reduce using rule 33 (STATEMENT -> WRITE SEMICOLON .)
    FOR_K           reduce using rule 33 (STATEMENT -> WRITE SEMICOLON .)
    BLOCKEND        reduce using rule 33 (STATEMENT -> WRITE SEMICOLON .)
    RETURN_K        reduce using rule 33 (STATEMENT -> WRITE SEMICOLON .)


state 80

    (47) ASSIGN -> VAR EQUALS . H_EXPRESSION
    (83) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (80) S_EXPRESSION -> . EXPRESSION
    (81) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (82) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    H_EXPRESSION                   shift and go to state 104
    S_EXPRESSION                   shift and go to state 87
    EXPRESSION                     shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 81

    (51) FUNC_CALL -> ID LPAREN . ARG_LIST RPAREN
    (52) ARG_LIST -> . VAR ARG_LIST_R
    (53) ARG_LIST -> . CONSTANT ARG_LIST_R
    (54) ARG_LIST -> . ARG_LIST_R
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING
    (55) ARG_LIST_R -> . COMMA ARG_LIST
    (56) ARG_LIST_R -> . EMPTY
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (91) EMPTY -> .

    ID              shift and go to state 105
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96
    COMMA           shift and go to state 110
    RPAREN          reduce using rule 91 (EMPTY -> .)

    ARG_LIST                       shift and go to state 106
    VAR                            shift and go to state 107
    ARG_LIST_R                     shift and go to state 108
    CONSTANT                       shift and go to state 109
    ARRAY                          shift and go to state 58
    EMPTY                          shift and go to state 111

state 82

    (50) ARRAY -> ID LBRACE . INT RBRACE

    INT             shift and go to state 112


state 83

    (60) READ -> READ_K ID_LIST .

    SEMICOLON       reduce using rule 60 (READ -> READ_K ID_LIST .)


state 84

    (61) ID_LIST -> ID . ID_LIST_R
    (62) ID_LIST_R -> . COMMA ID_LIST
    (63) ID_LIST_R -> . EMPTY
    (91) EMPTY -> .

    COMMA           shift and go to state 114
    SEMICOLON       reduce using rule 91 (EMPTY -> .)

    ID_LIST_R                      shift and go to state 113
    EMPTY                          shift and go to state 115

state 85

    (64) WRITE -> WRITE_K WRITE_LIST .

    SEMICOLON       reduce using rule 64 (WRITE -> WRITE_K WRITE_LIST .)


state 86

    (65) WRITE_LIST -> H_EXPRESSION . WRITE_LIST_R
    (66) WRITE_LIST_R -> . COMMA H_EXPRESSION
    (67) WRITE_LIST_R -> . EMPTY
    (91) EMPTY -> .

    COMMA           shift and go to state 117
    SEMICOLON       reduce using rule 91 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 116
    EMPTY                          shift and go to state 118

state 87

    (83) H_EXPRESSION -> S_EXPRESSION . H_EXPRESSION_R
    (84) H_EXPRESSION_R -> . OR H_EXPRESSION
    (85) H_EXPRESSION_R -> . AND H_EXPRESSION
    (86) H_EXPRESSION_R -> . EMPTY
    (91) EMPTY -> .

    OR              shift and go to state 120
    AND             shift and go to state 121
    COMMA           reduce using rule 91 (EMPTY -> .)
    SEMICOLON       reduce using rule 91 (EMPTY -> .)
    RPAREN          reduce using rule 91 (EMPTY -> .)

    H_EXPRESSION_R                 shift and go to state 119
    EMPTY                          shift and go to state 122

state 88

    (80) S_EXPRESSION -> EXPRESSION .
    (81) S_EXPRESSION -> EXPRESSION . GT EXPRESSION
    (82) S_EXPRESSION -> EXPRESSION . LT EXPRESSION

    OR              reduce using rule 80 (S_EXPRESSION -> EXPRESSION .)
    AND             reduce using rule 80 (S_EXPRESSION -> EXPRESSION .)
    COMMA           reduce using rule 80 (S_EXPRESSION -> EXPRESSION .)
    SEMICOLON       reduce using rule 80 (S_EXPRESSION -> EXPRESSION .)
    RPAREN          reduce using rule 80 (S_EXPRESSION -> EXPRESSION .)
    GT              shift and go to state 123
    LT              shift and go to state 124


state 89

    (69) EXPRESSION -> TERM . EXPRESSION_R
    (70) EXPRESSION_R -> . PLUS EXPRESSION
    (71) EXPRESSION_R -> . MINUS EXPRESSION
    (72) EXPRESSION_R -> . EMPTY
    (91) EMPTY -> .

    PLUS            shift and go to state 126
    MINUS           shift and go to state 127
    GT              reduce using rule 91 (EMPTY -> .)
    LT              reduce using rule 91 (EMPTY -> .)
    OR              reduce using rule 91 (EMPTY -> .)
    AND             reduce using rule 91 (EMPTY -> .)
    COMMA           reduce using rule 91 (EMPTY -> .)
    SEMICOLON       reduce using rule 91 (EMPTY -> .)
    RPAREN          reduce using rule 91 (EMPTY -> .)

    EXPRESSION_R                   shift and go to state 125
    EMPTY                          shift and go to state 128

state 90

    (73) TERM -> FACTOR . TERM_R
    (74) TERM_R -> . TIMES TERM
    (75) TERM_R -> . DIVIDE TERM
    (76) TERM_R -> . EMPTY
    (91) EMPTY -> .

    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131
    PLUS            reduce using rule 91 (EMPTY -> .)
    MINUS           reduce using rule 91 (EMPTY -> .)
    GT              reduce using rule 91 (EMPTY -> .)
    LT              reduce using rule 91 (EMPTY -> .)
    OR              reduce using rule 91 (EMPTY -> .)
    AND             reduce using rule 91 (EMPTY -> .)
    COMMA           reduce using rule 91 (EMPTY -> .)
    SEMICOLON       reduce using rule 91 (EMPTY -> .)
    RPAREN          reduce using rule 91 (EMPTY -> .)

    TERM_R                         shift and go to state 129
    EMPTY                          shift and go to state 132

state 91

    (77) FACTOR -> ID .

    TIMES           reduce using rule 77 (FACTOR -> ID .)
    DIVIDE          reduce using rule 77 (FACTOR -> ID .)
    PLUS            reduce using rule 77 (FACTOR -> ID .)
    MINUS           reduce using rule 77 (FACTOR -> ID .)
    GT              reduce using rule 77 (FACTOR -> ID .)
    LT              reduce using rule 77 (FACTOR -> ID .)
    OR              reduce using rule 77 (FACTOR -> ID .)
    AND             reduce using rule 77 (FACTOR -> ID .)
    COMMA           reduce using rule 77 (FACTOR -> ID .)
    SEMICOLON       reduce using rule 77 (FACTOR -> ID .)
    RPAREN          reduce using rule 77 (FACTOR -> ID .)


state 92

    (78) FACTOR -> CONSTANT .

    TIMES           reduce using rule 78 (FACTOR -> CONSTANT .)
    DIVIDE          reduce using rule 78 (FACTOR -> CONSTANT .)
    PLUS            reduce using rule 78 (FACTOR -> CONSTANT .)
    MINUS           reduce using rule 78 (FACTOR -> CONSTANT .)
    GT              reduce using rule 78 (FACTOR -> CONSTANT .)
    LT              reduce using rule 78 (FACTOR -> CONSTANT .)
    OR              reduce using rule 78 (FACTOR -> CONSTANT .)
    AND             reduce using rule 78 (FACTOR -> CONSTANT .)
    COMMA           reduce using rule 78 (FACTOR -> CONSTANT .)
    SEMICOLON       reduce using rule 78 (FACTOR -> CONSTANT .)
    RPAREN          reduce using rule 78 (FACTOR -> CONSTANT .)


state 93

    (79) FACTOR -> LPAREN . EXPRESSION RPAREN
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    EXPRESSION                     shift and go to state 133
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 94

    (57) CONSTANT -> INT .

    TIMES           reduce using rule 57 (CONSTANT -> INT .)
    DIVIDE          reduce using rule 57 (CONSTANT -> INT .)
    PLUS            reduce using rule 57 (CONSTANT -> INT .)
    MINUS           reduce using rule 57 (CONSTANT -> INT .)
    GT              reduce using rule 57 (CONSTANT -> INT .)
    LT              reduce using rule 57 (CONSTANT -> INT .)
    OR              reduce using rule 57 (CONSTANT -> INT .)
    AND             reduce using rule 57 (CONSTANT -> INT .)
    COMMA           reduce using rule 57 (CONSTANT -> INT .)
    SEMICOLON       reduce using rule 57 (CONSTANT -> INT .)
    RPAREN          reduce using rule 57 (CONSTANT -> INT .)


state 95

    (58) CONSTANT -> FLOAT .

    TIMES           reduce using rule 58 (CONSTANT -> FLOAT .)
    DIVIDE          reduce using rule 58 (CONSTANT -> FLOAT .)
    PLUS            reduce using rule 58 (CONSTANT -> FLOAT .)
    MINUS           reduce using rule 58 (CONSTANT -> FLOAT .)
    GT              reduce using rule 58 (CONSTANT -> FLOAT .)
    LT              reduce using rule 58 (CONSTANT -> FLOAT .)
    OR              reduce using rule 58 (CONSTANT -> FLOAT .)
    AND             reduce using rule 58 (CONSTANT -> FLOAT .)
    COMMA           reduce using rule 58 (CONSTANT -> FLOAT .)
    SEMICOLON       reduce using rule 58 (CONSTANT -> FLOAT .)
    RPAREN          reduce using rule 58 (CONSTANT -> FLOAT .)


state 96

    (59) CONSTANT -> STRING .

    TIMES           reduce using rule 59 (CONSTANT -> STRING .)
    DIVIDE          reduce using rule 59 (CONSTANT -> STRING .)
    PLUS            reduce using rule 59 (CONSTANT -> STRING .)
    MINUS           reduce using rule 59 (CONSTANT -> STRING .)
    GT              reduce using rule 59 (CONSTANT -> STRING .)
    LT              reduce using rule 59 (CONSTANT -> STRING .)
    OR              reduce using rule 59 (CONSTANT -> STRING .)
    AND             reduce using rule 59 (CONSTANT -> STRING .)
    COMMA           reduce using rule 59 (CONSTANT -> STRING .)
    SEMICOLON       reduce using rule 59 (CONSTANT -> STRING .)
    RPAREN          reduce using rule 59 (CONSTANT -> STRING .)


state 97

    (41) DECISION -> IF_K LPAREN . H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (83) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (80) S_EXPRESSION -> . EXPRESSION
    (81) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (82) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    H_EXPRESSION                   shift and go to state 134
    S_EXPRESSION                   shift and go to state 87
    EXPRESSION                     shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 98

    (39) WHILE_LOOP -> WHILE_K LPAREN . H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (83) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (80) S_EXPRESSION -> . EXPRESSION
    (81) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (82) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    H_EXPRESSION                   shift and go to state 135
    S_EXPRESSION                   shift and go to state 87
    EXPRESSION                     shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 99

    (40) FOR_LOOP -> FOR_K ID . EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    EQUALS          shift and go to state 136


state 100

    (23) PARAM_DECL -> TYPE ID . PARAM_DECL_R
    (25) PARAM_DECL_R -> . COMMA PARAM_DECL
    (26) PARAM_DECL_R -> . EMPTY
    (91) EMPTY -> .

    COMMA           shift and go to state 138
    RPAREN          reduce using rule 91 (EMPTY -> .)

    PARAM_DECL_R                   shift and go to state 137
    EMPTY                          shift and go to state 139

state 101

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (22) neural_param_decl -> . EMPTY
    (91) EMPTY -> .

    BLOCKSTART      reduce using rule 91 (EMPTY -> .)

    neural_param_decl              shift and go to state 140
    EMPTY                          shift and go to state 141

state 102

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (22) neural_param_decl -> . EMPTY
    (91) EMPTY -> .

    BLOCKSTART      reduce using rule 91 (EMPTY -> .)

    neural_param_decl              shift and go to state 142
    EMPTY                          shift and go to state 141

state 103

    (9) VAR_LIST2 -> COMMA ID VAR_LIST2 .

    SEMICOLON       reduce using rule 9 (VAR_LIST2 -> COMMA ID VAR_LIST2 .)


state 104

    (47) ASSIGN -> VAR EQUALS H_EXPRESSION .

    SEMICOLON       reduce using rule 47 (ASSIGN -> VAR EQUALS H_EXPRESSION .)


state 105

    (48) VAR -> ID .
    (50) ARRAY -> ID . LBRACE INT RBRACE

    COMMA           reduce using rule 48 (VAR -> ID .)
    RPAREN          reduce using rule 48 (VAR -> ID .)
    LBRACE          shift and go to state 82


state 106

    (51) FUNC_CALL -> ID LPAREN ARG_LIST . RPAREN

    RPAREN          shift and go to state 143


state 107

    (52) ARG_LIST -> VAR . ARG_LIST_R
    (55) ARG_LIST_R -> . COMMA ARG_LIST
    (56) ARG_LIST_R -> . EMPTY
    (91) EMPTY -> .

    COMMA           shift and go to state 110
    RPAREN          reduce using rule 91 (EMPTY -> .)

    ARG_LIST_R                     shift and go to state 144
    EMPTY                          shift and go to state 111

state 108

    (54) ARG_LIST -> ARG_LIST_R .

    RPAREN          reduce using rule 54 (ARG_LIST -> ARG_LIST_R .)


state 109

    (53) ARG_LIST -> CONSTANT . ARG_LIST_R
    (55) ARG_LIST_R -> . COMMA ARG_LIST
    (56) ARG_LIST_R -> . EMPTY
    (91) EMPTY -> .

    COMMA           shift and go to state 110
    RPAREN          reduce using rule 91 (EMPTY -> .)

    ARG_LIST_R                     shift and go to state 145
    EMPTY                          shift and go to state 111

state 110

    (55) ARG_LIST_R -> COMMA . ARG_LIST
    (52) ARG_LIST -> . VAR ARG_LIST_R
    (53) ARG_LIST -> . CONSTANT ARG_LIST_R
    (54) ARG_LIST -> . ARG_LIST_R
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING
    (55) ARG_LIST_R -> . COMMA ARG_LIST
    (56) ARG_LIST_R -> . EMPTY
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (91) EMPTY -> .

    ID              shift and go to state 105
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96
    COMMA           shift and go to state 110
    RPAREN          reduce using rule 91 (EMPTY -> .)

    ARG_LIST                       shift and go to state 146
    VAR                            shift and go to state 107
    ARG_LIST_R                     shift and go to state 108
    CONSTANT                       shift and go to state 109
    ARRAY                          shift and go to state 58
    EMPTY                          shift and go to state 111

state 111

    (56) ARG_LIST_R -> EMPTY .

    RPAREN          reduce using rule 56 (ARG_LIST_R -> EMPTY .)


state 112

    (50) ARRAY -> ID LBRACE INT . RBRACE

    RBRACE          shift and go to state 147


state 113

    (61) ID_LIST -> ID ID_LIST_R .

    SEMICOLON       reduce using rule 61 (ID_LIST -> ID ID_LIST_R .)


state 114

    (62) ID_LIST_R -> COMMA . ID_LIST
    (61) ID_LIST -> . ID ID_LIST_R

    ID              shift and go to state 84

    ID_LIST                        shift and go to state 148

state 115

    (63) ID_LIST_R -> EMPTY .

    SEMICOLON       reduce using rule 63 (ID_LIST_R -> EMPTY .)


state 116

    (65) WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .

    SEMICOLON       reduce using rule 65 (WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .)


state 117

    (66) WRITE_LIST_R -> COMMA . H_EXPRESSION
    (83) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (80) S_EXPRESSION -> . EXPRESSION
    (81) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (82) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    H_EXPRESSION                   shift and go to state 149
    S_EXPRESSION                   shift and go to state 87
    EXPRESSION                     shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 118

    (67) WRITE_LIST_R -> EMPTY .

    SEMICOLON       reduce using rule 67 (WRITE_LIST_R -> EMPTY .)


state 119

    (83) H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .

    COMMA           reduce using rule 83 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    SEMICOLON       reduce using rule 83 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    RPAREN          reduce using rule 83 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)


state 120

    (84) H_EXPRESSION_R -> OR . H_EXPRESSION
    (83) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (80) S_EXPRESSION -> . EXPRESSION
    (81) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (82) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    H_EXPRESSION                   shift and go to state 150
    S_EXPRESSION                   shift and go to state 87
    EXPRESSION                     shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 121

    (85) H_EXPRESSION_R -> AND . H_EXPRESSION
    (83) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (80) S_EXPRESSION -> . EXPRESSION
    (81) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (82) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    H_EXPRESSION                   shift and go to state 151
    S_EXPRESSION                   shift and go to state 87
    EXPRESSION                     shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 122

    (86) H_EXPRESSION_R -> EMPTY .

    COMMA           reduce using rule 86 (H_EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 86 (H_EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 86 (H_EXPRESSION_R -> EMPTY .)


state 123

    (81) S_EXPRESSION -> EXPRESSION GT . EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    EXPRESSION                     shift and go to state 152
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 124

    (82) S_EXPRESSION -> EXPRESSION LT . EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    EXPRESSION                     shift and go to state 153
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 125

    (69) EXPRESSION -> TERM EXPRESSION_R .

    GT              reduce using rule 69 (EXPRESSION -> TERM EXPRESSION_R .)
    LT              reduce using rule 69 (EXPRESSION -> TERM EXPRESSION_R .)
    OR              reduce using rule 69 (EXPRESSION -> TERM EXPRESSION_R .)
    AND             reduce using rule 69 (EXPRESSION -> TERM EXPRESSION_R .)
    COMMA           reduce using rule 69 (EXPRESSION -> TERM EXPRESSION_R .)
    SEMICOLON       reduce using rule 69 (EXPRESSION -> TERM EXPRESSION_R .)
    RPAREN          reduce using rule 69 (EXPRESSION -> TERM EXPRESSION_R .)


state 126

    (70) EXPRESSION_R -> PLUS . EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    EXPRESSION                     shift and go to state 154
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 127

    (71) EXPRESSION_R -> MINUS . EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    EXPRESSION                     shift and go to state 155
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 128

    (72) EXPRESSION_R -> EMPTY .

    GT              reduce using rule 72 (EXPRESSION_R -> EMPTY .)
    LT              reduce using rule 72 (EXPRESSION_R -> EMPTY .)
    OR              reduce using rule 72 (EXPRESSION_R -> EMPTY .)
    AND             reduce using rule 72 (EXPRESSION_R -> EMPTY .)
    COMMA           reduce using rule 72 (EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 72 (EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 72 (EXPRESSION_R -> EMPTY .)


state 129

    (73) TERM -> FACTOR TERM_R .

    PLUS            reduce using rule 73 (TERM -> FACTOR TERM_R .)
    MINUS           reduce using rule 73 (TERM -> FACTOR TERM_R .)
    GT              reduce using rule 73 (TERM -> FACTOR TERM_R .)
    LT              reduce using rule 73 (TERM -> FACTOR TERM_R .)
    OR              reduce using rule 73 (TERM -> FACTOR TERM_R .)
    AND             reduce using rule 73 (TERM -> FACTOR TERM_R .)
    COMMA           reduce using rule 73 (TERM -> FACTOR TERM_R .)
    SEMICOLON       reduce using rule 73 (TERM -> FACTOR TERM_R .)
    RPAREN          reduce using rule 73 (TERM -> FACTOR TERM_R .)


state 130

    (74) TERM_R -> TIMES . TERM
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    TERM                           shift and go to state 156
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 131

    (75) TERM_R -> DIVIDE . TERM
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    TERM                           shift and go to state 157
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 132

    (76) TERM_R -> EMPTY .

    PLUS            reduce using rule 76 (TERM_R -> EMPTY .)
    MINUS           reduce using rule 76 (TERM_R -> EMPTY .)
    GT              reduce using rule 76 (TERM_R -> EMPTY .)
    LT              reduce using rule 76 (TERM_R -> EMPTY .)
    OR              reduce using rule 76 (TERM_R -> EMPTY .)
    AND             reduce using rule 76 (TERM_R -> EMPTY .)
    COMMA           reduce using rule 76 (TERM_R -> EMPTY .)
    SEMICOLON       reduce using rule 76 (TERM_R -> EMPTY .)
    RPAREN          reduce using rule 76 (TERM_R -> EMPTY .)


state 133

    (79) FACTOR -> LPAREN EXPRESSION . RPAREN

    RPAREN          shift and go to state 158


state 134

    (41) DECISION -> IF_K LPAREN H_EXPRESSION . RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT

    RPAREN          shift and go to state 159


state 135

    (39) WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION . RPAREN BLOCKSTART STATEMENT_R BLOCKEND

    RPAREN          shift and go to state 160


state 136

    (40) FOR_LOOP -> FOR_K ID EQUALS . INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 161


state 137

    (23) PARAM_DECL -> TYPE ID PARAM_DECL_R .

    RPAREN          reduce using rule 23 (PARAM_DECL -> TYPE ID PARAM_DECL_R .)


state 138

    (25) PARAM_DECL_R -> COMMA . PARAM_DECL
    (23) PARAM_DECL -> . TYPE ID PARAM_DECL_R
    (24) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K
    (12) TYPE -> . FLOAT_K
    (13) TYPE -> . STRING_K
    (91) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 91 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 162
    TYPE                           shift and go to state 64
    EMPTY                          shift and go to state 66

state 139

    (26) PARAM_DECL_R -> EMPTY .

    RPAREN          reduce using rule 26 (PARAM_DECL_R -> EMPTY .)


state 140

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    BLOCKSTART      shift and go to state 163


state 141

    (22) neural_param_decl -> EMPTY .

    BLOCKSTART      reduce using rule 22 (neural_param_decl -> EMPTY .)


state 142

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    BLOCKSTART      shift and go to state 164


state 143

    (51) FUNC_CALL -> ID LPAREN ARG_LIST RPAREN .

    SEMICOLON       reduce using rule 51 (FUNC_CALL -> ID LPAREN ARG_LIST RPAREN .)


state 144

    (52) ARG_LIST -> VAR ARG_LIST_R .

    RPAREN          reduce using rule 52 (ARG_LIST -> VAR ARG_LIST_R .)


state 145

    (53) ARG_LIST -> CONSTANT ARG_LIST_R .

    RPAREN          reduce using rule 53 (ARG_LIST -> CONSTANT ARG_LIST_R .)


state 146

    (55) ARG_LIST_R -> COMMA ARG_LIST .

    RPAREN          reduce using rule 55 (ARG_LIST_R -> COMMA ARG_LIST .)


state 147

    (50) ARRAY -> ID LBRACE INT RBRACE .

    EQUALS          reduce using rule 50 (ARRAY -> ID LBRACE INT RBRACE .)
    COMMA           reduce using rule 50 (ARRAY -> ID LBRACE INT RBRACE .)
    RPAREN          reduce using rule 50 (ARRAY -> ID LBRACE INT RBRACE .)


state 148

    (62) ID_LIST_R -> COMMA ID_LIST .

    SEMICOLON       reduce using rule 62 (ID_LIST_R -> COMMA ID_LIST .)


state 149

    (66) WRITE_LIST_R -> COMMA H_EXPRESSION .

    SEMICOLON       reduce using rule 66 (WRITE_LIST_R -> COMMA H_EXPRESSION .)


state 150

    (84) H_EXPRESSION_R -> OR H_EXPRESSION .

    COMMA           reduce using rule 84 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    SEMICOLON       reduce using rule 84 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    RPAREN          reduce using rule 84 (H_EXPRESSION_R -> OR H_EXPRESSION .)


state 151

    (85) H_EXPRESSION_R -> AND H_EXPRESSION .

    COMMA           reduce using rule 85 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    SEMICOLON       reduce using rule 85 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    RPAREN          reduce using rule 85 (H_EXPRESSION_R -> AND H_EXPRESSION .)


state 152

    (81) S_EXPRESSION -> EXPRESSION GT EXPRESSION .

    OR              reduce using rule 81 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    AND             reduce using rule 81 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    COMMA           reduce using rule 81 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    SEMICOLON       reduce using rule 81 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    RPAREN          reduce using rule 81 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)


state 153

    (82) S_EXPRESSION -> EXPRESSION LT EXPRESSION .

    OR              reduce using rule 82 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    AND             reduce using rule 82 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    COMMA           reduce using rule 82 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    SEMICOLON       reduce using rule 82 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    RPAREN          reduce using rule 82 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)


state 154

    (70) EXPRESSION_R -> PLUS EXPRESSION .

    GT              reduce using rule 70 (EXPRESSION_R -> PLUS EXPRESSION .)
    LT              reduce using rule 70 (EXPRESSION_R -> PLUS EXPRESSION .)
    OR              reduce using rule 70 (EXPRESSION_R -> PLUS EXPRESSION .)
    AND             reduce using rule 70 (EXPRESSION_R -> PLUS EXPRESSION .)
    COMMA           reduce using rule 70 (EXPRESSION_R -> PLUS EXPRESSION .)
    SEMICOLON       reduce using rule 70 (EXPRESSION_R -> PLUS EXPRESSION .)
    RPAREN          reduce using rule 70 (EXPRESSION_R -> PLUS EXPRESSION .)


state 155

    (71) EXPRESSION_R -> MINUS EXPRESSION .

    GT              reduce using rule 71 (EXPRESSION_R -> MINUS EXPRESSION .)
    LT              reduce using rule 71 (EXPRESSION_R -> MINUS EXPRESSION .)
    OR              reduce using rule 71 (EXPRESSION_R -> MINUS EXPRESSION .)
    AND             reduce using rule 71 (EXPRESSION_R -> MINUS EXPRESSION .)
    COMMA           reduce using rule 71 (EXPRESSION_R -> MINUS EXPRESSION .)
    SEMICOLON       reduce using rule 71 (EXPRESSION_R -> MINUS EXPRESSION .)
    RPAREN          reduce using rule 71 (EXPRESSION_R -> MINUS EXPRESSION .)


state 156

    (74) TERM_R -> TIMES TERM .

    PLUS            reduce using rule 74 (TERM_R -> TIMES TERM .)
    MINUS           reduce using rule 74 (TERM_R -> TIMES TERM .)
    GT              reduce using rule 74 (TERM_R -> TIMES TERM .)
    LT              reduce using rule 74 (TERM_R -> TIMES TERM .)
    OR              reduce using rule 74 (TERM_R -> TIMES TERM .)
    AND             reduce using rule 74 (TERM_R -> TIMES TERM .)
    COMMA           reduce using rule 74 (TERM_R -> TIMES TERM .)
    SEMICOLON       reduce using rule 74 (TERM_R -> TIMES TERM .)
    RPAREN          reduce using rule 74 (TERM_R -> TIMES TERM .)


state 157

    (75) TERM_R -> DIVIDE TERM .

    PLUS            reduce using rule 75 (TERM_R -> DIVIDE TERM .)
    MINUS           reduce using rule 75 (TERM_R -> DIVIDE TERM .)
    GT              reduce using rule 75 (TERM_R -> DIVIDE TERM .)
    LT              reduce using rule 75 (TERM_R -> DIVIDE TERM .)
    OR              reduce using rule 75 (TERM_R -> DIVIDE TERM .)
    AND             reduce using rule 75 (TERM_R -> DIVIDE TERM .)
    COMMA           reduce using rule 75 (TERM_R -> DIVIDE TERM .)
    SEMICOLON       reduce using rule 75 (TERM_R -> DIVIDE TERM .)
    RPAREN          reduce using rule 75 (TERM_R -> DIVIDE TERM .)


state 158

    (79) FACTOR -> LPAREN EXPRESSION RPAREN .

    TIMES           reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)
    DIVIDE          reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)
    PLUS            reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)
    MINUS           reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)
    GT              reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)
    LT              reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)
    OR              reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)
    AND             reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)
    COMMA           reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)
    SEMICOLON       reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)
    RPAREN          reduce using rule 79 (FACTOR -> LPAREN EXPRESSION RPAREN .)


state 159

    (41) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN . BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT

    BLOCKSTART      shift and go to state 165


state 160

    (39) WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 166


state 161

    (40) FOR_LOOP -> FOR_K ID EQUALS INT . TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    TO_K            shift and go to state 167


state 162

    (25) PARAM_DECL_R -> COMMA PARAM_DECL .

    RPAREN          reduce using rule 25 (PARAM_DECL_R -> COMMA PARAM_DECL .)


state 163

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . PROC_BODY RETURN BLOCKEND PROC_DECL
    (27) PROC_BODY -> . STATEMENT PROC_BODY_R
    (30) STATEMENT -> . ASSIGN SEMICOLON
    (31) STATEMENT -> . FUNC_CALL SEMICOLON
    (32) STATEMENT -> . READ SEMICOLON
    (33) STATEMENT -> . WRITE SEMICOLON
    (34) STATEMENT -> . FLOW
    (47) ASSIGN -> . VAR EQUALS H_EXPRESSION
    (51) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (60) READ -> . READ_K ID_LIST
    (64) WRITE -> . WRITE_K WRITE_LIST
    (35) FLOW -> . DECISION
    (36) FLOW -> . LOOP
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (37) LOOP -> . WHILE_LOOP
    (38) LOOP -> . FOR_LOOP
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (39) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (40) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 53
    READ_K          shift and go to state 54
    WRITE_K         shift and go to state 55
    IF_K            shift and go to state 59
    WHILE_K         shift and go to state 62
    FOR_K           shift and go to state 63

    PROC_BODY                      shift and go to state 168
    STATEMENT                      shift and go to state 169
    ASSIGN                         shift and go to state 47
    FUNC_CALL                      shift and go to state 48
    READ                           shift and go to state 49
    WRITE                          shift and go to state 50
    FLOW                           shift and go to state 51
    VAR                            shift and go to state 52
    DECISION                       shift and go to state 56
    LOOP                           shift and go to state 57
    ARRAY                          shift and go to state 58
    WHILE_LOOP                     shift and go to state 60
    FOR_LOOP                       shift and go to state 61

state 164

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . PROC_BODY BLOCKEND PROC_DECL
    (27) PROC_BODY -> . STATEMENT PROC_BODY_R
    (30) STATEMENT -> . ASSIGN SEMICOLON
    (31) STATEMENT -> . FUNC_CALL SEMICOLON
    (32) STATEMENT -> . READ SEMICOLON
    (33) STATEMENT -> . WRITE SEMICOLON
    (34) STATEMENT -> . FLOW
    (47) ASSIGN -> . VAR EQUALS H_EXPRESSION
    (51) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (60) READ -> . READ_K ID_LIST
    (64) WRITE -> . WRITE_K WRITE_LIST
    (35) FLOW -> . DECISION
    (36) FLOW -> . LOOP
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (37) LOOP -> . WHILE_LOOP
    (38) LOOP -> . FOR_LOOP
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (39) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (40) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 53
    READ_K          shift and go to state 54
    WRITE_K         shift and go to state 55
    IF_K            shift and go to state 59
    WHILE_K         shift and go to state 62
    FOR_K           shift and go to state 63

    PROC_BODY                      shift and go to state 170
    STATEMENT                      shift and go to state 169
    ASSIGN                         shift and go to state 47
    FUNC_CALL                      shift and go to state 48
    READ                           shift and go to state 49
    WRITE                          shift and go to state 50
    FLOW                           shift and go to state 51
    VAR                            shift and go to state 52
    DECISION                       shift and go to state 56
    LOOP                           shift and go to state 57
    ARRAY                          shift and go to state 58
    WHILE_LOOP                     shift and go to state 60
    FOR_LOOP                       shift and go to state 61

state 165

    (41) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART . STATEMENT_R BLOCKEND DECISION_ALT
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (30) STATEMENT -> . ASSIGN SEMICOLON
    (31) STATEMENT -> . FUNC_CALL SEMICOLON
    (32) STATEMENT -> . READ SEMICOLON
    (33) STATEMENT -> . WRITE SEMICOLON
    (34) STATEMENT -> . FLOW
    (91) EMPTY -> .
    (47) ASSIGN -> . VAR EQUALS H_EXPRESSION
    (51) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (60) READ -> . READ_K ID_LIST
    (64) WRITE -> . WRITE_K WRITE_LIST
    (35) FLOW -> . DECISION
    (36) FLOW -> . LOOP
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (37) LOOP -> . WHILE_LOOP
    (38) LOOP -> . FOR_LOOP
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (39) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (40) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 91 (EMPTY -> .)
    ID              shift and go to state 53
    READ_K          shift and go to state 54
    WRITE_K         shift and go to state 55
    IF_K            shift and go to state 59
    WHILE_K         shift and go to state 62
    FOR_K           shift and go to state 63

    STATEMENT_R                    shift and go to state 171
    STATEMENT                      shift and go to state 172
    EMPTY                          shift and go to state 173
    ASSIGN                         shift and go to state 47
    FUNC_CALL                      shift and go to state 48
    READ                           shift and go to state 49
    WRITE                          shift and go to state 50
    FLOW                           shift and go to state 51
    VAR                            shift and go to state 52
    DECISION                       shift and go to state 56
    LOOP                           shift and go to state 57
    ARRAY                          shift and go to state 58
    WHILE_LOOP                     shift and go to state 60
    FOR_LOOP                       shift and go to state 61

state 166

    (39) WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART . STATEMENT_R BLOCKEND
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (30) STATEMENT -> . ASSIGN SEMICOLON
    (31) STATEMENT -> . FUNC_CALL SEMICOLON
    (32) STATEMENT -> . READ SEMICOLON
    (33) STATEMENT -> . WRITE SEMICOLON
    (34) STATEMENT -> . FLOW
    (91) EMPTY -> .
    (47) ASSIGN -> . VAR EQUALS H_EXPRESSION
    (51) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (60) READ -> . READ_K ID_LIST
    (64) WRITE -> . WRITE_K WRITE_LIST
    (35) FLOW -> . DECISION
    (36) FLOW -> . LOOP
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (37) LOOP -> . WHILE_LOOP
    (38) LOOP -> . FOR_LOOP
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (39) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (40) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 91 (EMPTY -> .)
    ID              shift and go to state 53
    READ_K          shift and go to state 54
    WRITE_K         shift and go to state 55
    IF_K            shift and go to state 59
    WHILE_K         shift and go to state 62
    FOR_K           shift and go to state 63

    STATEMENT_R                    shift and go to state 174
    STATEMENT                      shift and go to state 172
    EMPTY                          shift and go to state 173
    ASSIGN                         shift and go to state 47
    FUNC_CALL                      shift and go to state 48
    READ                           shift and go to state 49
    WRITE                          shift and go to state 50
    FLOW                           shift and go to state 51
    VAR                            shift and go to state 52
    DECISION                       shift and go to state 56
    LOOP                           shift and go to state 57
    ARRAY                          shift and go to state 58
    WHILE_LOOP                     shift and go to state 60
    FOR_LOOP                       shift and go to state 61

state 167

    (40) FOR_LOOP -> FOR_K ID EQUALS INT TO_K . INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 175


state 168

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY . RETURN BLOCKEND PROC_DECL
    (68) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON

    RETURN_K        shift and go to state 177

    RETURN                         shift and go to state 176

state 169

    (27) PROC_BODY -> STATEMENT . PROC_BODY_R
    (28) PROC_BODY_R -> . PROC_BODY
    (29) PROC_BODY_R -> . EMPTY
    (27) PROC_BODY -> . STATEMENT PROC_BODY_R
    (91) EMPTY -> .
    (30) STATEMENT -> . ASSIGN SEMICOLON
    (31) STATEMENT -> . FUNC_CALL SEMICOLON
    (32) STATEMENT -> . READ SEMICOLON
    (33) STATEMENT -> . WRITE SEMICOLON
    (34) STATEMENT -> . FLOW
    (47) ASSIGN -> . VAR EQUALS H_EXPRESSION
    (51) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (60) READ -> . READ_K ID_LIST
    (64) WRITE -> . WRITE_K WRITE_LIST
    (35) FLOW -> . DECISION
    (36) FLOW -> . LOOP
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (37) LOOP -> . WHILE_LOOP
    (38) LOOP -> . FOR_LOOP
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (39) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (40) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    RETURN_K        reduce using rule 91 (EMPTY -> .)
    BLOCKEND        reduce using rule 91 (EMPTY -> .)
    ID              shift and go to state 53
    READ_K          shift and go to state 54
    WRITE_K         shift and go to state 55
    IF_K            shift and go to state 59
    WHILE_K         shift and go to state 62
    FOR_K           shift and go to state 63

    STATEMENT                      shift and go to state 169
    PROC_BODY_R                    shift and go to state 178
    PROC_BODY                      shift and go to state 179
    EMPTY                          shift and go to state 180
    ASSIGN                         shift and go to state 47
    FUNC_CALL                      shift and go to state 48
    READ                           shift and go to state 49
    WRITE                          shift and go to state 50
    FLOW                           shift and go to state 51
    VAR                            shift and go to state 52
    DECISION                       shift and go to state 56
    LOOP                           shift and go to state 57
    ARRAY                          shift and go to state 58
    WHILE_LOOP                     shift and go to state 60
    FOR_LOOP                       shift and go to state 61

state 170

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY . BLOCKEND PROC_DECL

    BLOCKEND        shift and go to state 181


state 171

    (41) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R . BLOCKEND DECISION_ALT

    BLOCKEND        shift and go to state 182


state 172

    (45) STATEMENT_R -> STATEMENT . STATEMENT_R
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (30) STATEMENT -> . ASSIGN SEMICOLON
    (31) STATEMENT -> . FUNC_CALL SEMICOLON
    (32) STATEMENT -> . READ SEMICOLON
    (33) STATEMENT -> . WRITE SEMICOLON
    (34) STATEMENT -> . FLOW
    (91) EMPTY -> .
    (47) ASSIGN -> . VAR EQUALS H_EXPRESSION
    (51) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (60) READ -> . READ_K ID_LIST
    (64) WRITE -> . WRITE_K WRITE_LIST
    (35) FLOW -> . DECISION
    (36) FLOW -> . LOOP
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (37) LOOP -> . WHILE_LOOP
    (38) LOOP -> . FOR_LOOP
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (39) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (40) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 91 (EMPTY -> .)
    ID              shift and go to state 53
    READ_K          shift and go to state 54
    WRITE_K         shift and go to state 55
    IF_K            shift and go to state 59
    WHILE_K         shift and go to state 62
    FOR_K           shift and go to state 63

    STATEMENT                      shift and go to state 172
    STATEMENT_R                    shift and go to state 183
    EMPTY                          shift and go to state 173
    ASSIGN                         shift and go to state 47
    FUNC_CALL                      shift and go to state 48
    READ                           shift and go to state 49
    WRITE                          shift and go to state 50
    FLOW                           shift and go to state 51
    VAR                            shift and go to state 52
    DECISION                       shift and go to state 56
    LOOP                           shift and go to state 57
    ARRAY                          shift and go to state 58
    WHILE_LOOP                     shift and go to state 60
    FOR_LOOP                       shift and go to state 61

state 173

    (46) STATEMENT_R -> EMPTY .

    BLOCKEND        reduce using rule 46 (STATEMENT_R -> EMPTY .)


state 174

    (39) WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 184


state 175

    (40) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT . DO_K BLOCKSTART STATEMENT_R BLOCKEND

    DO_K            shift and go to state 185


state 176

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN . BLOCKEND PROC_DECL

    BLOCKEND        shift and go to state 186


state 177

    (68) RETURN -> RETURN_K . LPAREN H_EXPRESSION RPAREN SEMICOLON

    LPAREN          shift and go to state 187


state 178

    (27) PROC_BODY -> STATEMENT PROC_BODY_R .

    RETURN_K        reduce using rule 27 (PROC_BODY -> STATEMENT PROC_BODY_R .)
    BLOCKEND        reduce using rule 27 (PROC_BODY -> STATEMENT PROC_BODY_R .)


state 179

    (28) PROC_BODY_R -> PROC_BODY .

    RETURN_K        reduce using rule 28 (PROC_BODY_R -> PROC_BODY .)
    BLOCKEND        reduce using rule 28 (PROC_BODY_R -> PROC_BODY .)


state 180

    (29) PROC_BODY_R -> EMPTY .

    RETURN_K        reduce using rule 29 (PROC_BODY_R -> EMPTY .)
    BLOCKEND        reduce using rule 29 (PROC_BODY_R -> EMPTY .)


state 181

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND . PROC_DECL
    (15) PROC_DECL -> . PROC_DECL_RETURN
    (16) PROC_DECL -> . PROC_DECL_VOID
    (17) PROC_DECL -> . EMPTY
    (20) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (18) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (91) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 91 (EMPTY -> .)

    PROC_DECL                      shift and go to state 188
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 182

    (41) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND . DECISION_ALT
    (42) DECISION_ALT -> . ELSE_K DECISION
    (43) DECISION_ALT -> . BLOCKSTART STATEMENT_R BLOCKEND
    (44) DECISION_ALT -> . EMPTY
    (91) EMPTY -> .

    ELSE_K          shift and go to state 191
    BLOCKSTART      shift and go to state 189
    ID              reduce using rule 91 (EMPTY -> .)
    READ_K          reduce using rule 91 (EMPTY -> .)
    WRITE_K         reduce using rule 91 (EMPTY -> .)
    IF_K            reduce using rule 91 (EMPTY -> .)
    WHILE_K         reduce using rule 91 (EMPTY -> .)
    FOR_K           reduce using rule 91 (EMPTY -> .)
    BLOCKEND        reduce using rule 91 (EMPTY -> .)
    RETURN_K        reduce using rule 91 (EMPTY -> .)

    DECISION_ALT                   shift and go to state 190
    EMPTY                          shift and go to state 192

state 183

    (45) STATEMENT_R -> STATEMENT STATEMENT_R .

    BLOCKEND        reduce using rule 45 (STATEMENT_R -> STATEMENT STATEMENT_R .)


state 184

    (39) WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 39 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 39 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 39 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 39 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 39 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 39 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 39 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 39 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)


state 185

    (40) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 193


state 186

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND . PROC_DECL
    (15) PROC_DECL -> . PROC_DECL_RETURN
    (16) PROC_DECL -> . PROC_DECL_VOID
    (17) PROC_DECL -> . EMPTY
    (20) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (18) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (91) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 91 (EMPTY -> .)

    PROC_DECL                      shift and go to state 194
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 187

    (68) RETURN -> RETURN_K LPAREN . H_EXPRESSION RPAREN SEMICOLON
    (83) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (80) S_EXPRESSION -> . EXPRESSION
    (81) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (82) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (69) EXPRESSION -> . TERM EXPRESSION_R
    (73) TERM -> . FACTOR TERM_R
    (77) FACTOR -> . ID
    (78) FACTOR -> . CONSTANT
    (79) FACTOR -> . LPAREN EXPRESSION RPAREN
    (57) CONSTANT -> . INT
    (58) CONSTANT -> . FLOAT
    (59) CONSTANT -> . STRING

    ID              shift and go to state 91
    LPAREN          shift and go to state 93
    INT             shift and go to state 94
    FLOAT           shift and go to state 95
    STRING          shift and go to state 96

    H_EXPRESSION                   shift and go to state 195
    S_EXPRESSION                   shift and go to state 87
    EXPRESSION                     shift and go to state 88
    TERM                           shift and go to state 89
    FACTOR                         shift and go to state 90
    CONSTANT                       shift and go to state 92

state 188

    (18) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL .

    MAIN_K          reduce using rule 18 (PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL .)


state 189

    (43) DECISION_ALT -> BLOCKSTART . STATEMENT_R BLOCKEND
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (30) STATEMENT -> . ASSIGN SEMICOLON
    (31) STATEMENT -> . FUNC_CALL SEMICOLON
    (32) STATEMENT -> . READ SEMICOLON
    (33) STATEMENT -> . WRITE SEMICOLON
    (34) STATEMENT -> . FLOW
    (91) EMPTY -> .
    (47) ASSIGN -> . VAR EQUALS H_EXPRESSION
    (51) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (60) READ -> . READ_K ID_LIST
    (64) WRITE -> . WRITE_K WRITE_LIST
    (35) FLOW -> . DECISION
    (36) FLOW -> . LOOP
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (37) LOOP -> . WHILE_LOOP
    (38) LOOP -> . FOR_LOOP
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (39) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (40) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 91 (EMPTY -> .)
    ID              shift and go to state 53
    READ_K          shift and go to state 54
    WRITE_K         shift and go to state 55
    IF_K            shift and go to state 59
    WHILE_K         shift and go to state 62
    FOR_K           shift and go to state 63

    STATEMENT_R                    shift and go to state 196
    STATEMENT                      shift and go to state 172
    EMPTY                          shift and go to state 173
    ASSIGN                         shift and go to state 47
    FUNC_CALL                      shift and go to state 48
    READ                           shift and go to state 49
    WRITE                          shift and go to state 50
    FLOW                           shift and go to state 51
    VAR                            shift and go to state 52
    DECISION                       shift and go to state 56
    LOOP                           shift and go to state 57
    ARRAY                          shift and go to state 58
    WHILE_LOOP                     shift and go to state 60
    FOR_LOOP                       shift and go to state 61

state 190

    (41) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT .

    ID              reduce using rule 41 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT .)
    READ_K          reduce using rule 41 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT .)
    WRITE_K         reduce using rule 41 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT .)
    IF_K            reduce using rule 41 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT .)
    WHILE_K         reduce using rule 41 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT .)
    FOR_K           reduce using rule 41 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT .)
    BLOCKEND        reduce using rule 41 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT .)
    RETURN_K        reduce using rule 41 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT .)


state 191

    (42) DECISION_ALT -> ELSE_K . DECISION
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT

    IF_K            shift and go to state 59

    DECISION                       shift and go to state 197

state 192

    (44) DECISION_ALT -> EMPTY .

    ID              reduce using rule 44 (DECISION_ALT -> EMPTY .)
    READ_K          reduce using rule 44 (DECISION_ALT -> EMPTY .)
    WRITE_K         reduce using rule 44 (DECISION_ALT -> EMPTY .)
    IF_K            reduce using rule 44 (DECISION_ALT -> EMPTY .)
    WHILE_K         reduce using rule 44 (DECISION_ALT -> EMPTY .)
    FOR_K           reduce using rule 44 (DECISION_ALT -> EMPTY .)
    BLOCKEND        reduce using rule 44 (DECISION_ALT -> EMPTY .)
    RETURN_K        reduce using rule 44 (DECISION_ALT -> EMPTY .)


state 193

    (40) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART . STATEMENT_R BLOCKEND
    (45) STATEMENT_R -> . STATEMENT STATEMENT_R
    (46) STATEMENT_R -> . EMPTY
    (30) STATEMENT -> . ASSIGN SEMICOLON
    (31) STATEMENT -> . FUNC_CALL SEMICOLON
    (32) STATEMENT -> . READ SEMICOLON
    (33) STATEMENT -> . WRITE SEMICOLON
    (34) STATEMENT -> . FLOW
    (91) EMPTY -> .
    (47) ASSIGN -> . VAR EQUALS H_EXPRESSION
    (51) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (60) READ -> . READ_K ID_LIST
    (64) WRITE -> . WRITE_K WRITE_LIST
    (35) FLOW -> . DECISION
    (36) FLOW -> . LOOP
    (48) VAR -> . ID
    (49) VAR -> . ARRAY
    (41) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT
    (37) LOOP -> . WHILE_LOOP
    (38) LOOP -> . FOR_LOOP
    (50) ARRAY -> . ID LBRACE INT RBRACE
    (39) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (40) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 91 (EMPTY -> .)
    ID              shift and go to state 53
    READ_K          shift and go to state 54
    WRITE_K         shift and go to state 55
    IF_K            shift and go to state 59
    WHILE_K         shift and go to state 62
    FOR_K           shift and go to state 63

    STATEMENT_R                    shift and go to state 198
    STATEMENT                      shift and go to state 172
    EMPTY                          shift and go to state 173
    ASSIGN                         shift and go to state 47
    FUNC_CALL                      shift and go to state 48
    READ                           shift and go to state 49
    WRITE                          shift and go to state 50
    FLOW                           shift and go to state 51
    VAR                            shift and go to state 52
    DECISION                       shift and go to state 56
    LOOP                           shift and go to state 57
    ARRAY                          shift and go to state 58
    WHILE_LOOP                     shift and go to state 60
    FOR_LOOP                       shift and go to state 61

state 194

    (20) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL .

    MAIN_K          reduce using rule 20 (PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL .)


state 195

    (68) RETURN -> RETURN_K LPAREN H_EXPRESSION . RPAREN SEMICOLON

    RPAREN          shift and go to state 199


state 196

    (43) DECISION_ALT -> BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 200


state 197

    (42) DECISION_ALT -> ELSE_K DECISION .

    ID              reduce using rule 42 (DECISION_ALT -> ELSE_K DECISION .)
    READ_K          reduce using rule 42 (DECISION_ALT -> ELSE_K DECISION .)
    WRITE_K         reduce using rule 42 (DECISION_ALT -> ELSE_K DECISION .)
    IF_K            reduce using rule 42 (DECISION_ALT -> ELSE_K DECISION .)
    WHILE_K         reduce using rule 42 (DECISION_ALT -> ELSE_K DECISION .)
    FOR_K           reduce using rule 42 (DECISION_ALT -> ELSE_K DECISION .)
    BLOCKEND        reduce using rule 42 (DECISION_ALT -> ELSE_K DECISION .)
    RETURN_K        reduce using rule 42 (DECISION_ALT -> ELSE_K DECISION .)


state 198

    (40) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 201


state 199

    (68) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 202


state 200

    (43) DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 43 (DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 43 (DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 43 (DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 43 (DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 43 (DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 43 (DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 43 (DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 43 (DECISION_ALT -> BLOCKSTART STATEMENT_R BLOCKEND .)


state 201

    (40) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 40 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 40 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 40 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 40 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 40 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 40 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 40 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 40 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)


state 202

    (68) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .

    BLOCKEND        reduce using rule 68 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)

