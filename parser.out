Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK
Rule 2     neural_program_id -> EMPTY
Rule 3     BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
Rule 4     VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND
Rule 5     VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
Rule 6     VAR_DECL_R -> VAR_DECL
Rule 7     VAR_DECL_R -> EMPTY
Rule 8     VAR_LIST -> VAR VAR_LIST2
Rule 9     VAR_LIST2 -> COMMA VAR VAR_LIST2
Rule 10    VAR_LIST2 -> EMPTY
Rule 11    TYPE -> INT_K NEURAL_TYPE
Rule 12    TYPE -> FLOAT_K NEURAL_TYPE
Rule 13    TYPE -> STRING_K NEURAL_TYPE
Rule 14    NEURAL_TYPE -> EMPTY
Rule 15    PROC_BLOCK -> PROC_DECL
Rule 16    PROC_DECL -> PROC_DECL_RETURN
Rule 17    PROC_DECL -> PROC_DECL_VOID
Rule 18    PROC_DECL -> EMPTY
Rule 19    PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
Rule 20    neural_proc_void_id -> EMPTY
Rule 21    PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
Rule 22    POST_FUNC -> EMPTY
Rule 23    neural_proc_return_id -> EMPTY
Rule 24    neural_param_decl -> EMPTY
Rule 25    PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R
Rule 26    PARAM_DECL -> EMPTY
Rule 27    neuro -> EMPTY
Rule 28    PARAM_DECL_R -> COMMA PARAM_DECL
Rule 29    PARAM_DECL_R -> EMPTY
Rule 30    PROC_BODY -> STATEMENT PROC_BODY_R
Rule 31    FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND
Rule 32    LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
Rule 33    LS_VARDECL_R -> LS_VARDECL
Rule 34    LS_VARDECL_R -> EMPTY
Rule 35    FNVAR_LS -> VAR FNVAR_LS2
Rule 36    FNVAR_LS2 -> COMMA FNVAR_LS
Rule 37    FNVAR_LS2 -> EMPTY
Rule 38    PROC_BODY_R -> PROC_BODY
Rule 39    PROC_BODY_R -> EMPTY
Rule 40    STATEMENT -> ASSIGN SEMICOLON
Rule 41    STATEMENT -> ASSIGN1 SEMICOLON
Rule 42    STATEMENT -> FUNC_CALL SEMICOLON
Rule 43    STATEMENT -> READ SEMICOLON
Rule 44    STATEMENT -> WRITE SEMICOLON
Rule 45    STATEMENT -> RETURN
Rule 46    STATEMENT -> FLOW
Rule 47    STATEMENT_R -> STATEMENT STATEMENT_R
Rule 48    STATEMENT_R -> EMPTY
Rule 49    FLOW -> DECISION
Rule 50    FLOW -> LOOP
Rule 51    LOOP -> WHILE_LOOP
Rule 52    LOOP -> DO_WHILE_LOOP SEMICOLON
Rule 53    LOOP -> FOR_LOOP
Rule 54    DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
Rule 55    DW_PREV_NEURAL -> EMPTY
Rule 56    DW_END_NEURAL -> EMPTY
Rule 57    WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
Rule 58    WHILE_PREV_NEURAL -> EMPTY
Rule 59    WHILE_POST_NEURAL -> EMPTY
Rule 60    WHILE_END_NEURAL -> EMPTY
Rule 61    FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 62    DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
Rule 63    EXP_RESULT_NEURAL -> EMPTY
Rule 64    DECISION_END_NEURAL -> EMPTY
Rule 65    DECISION_ALT -> ELSE
Rule 66    DECISION_ALT -> EMPTY
Rule 67    ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 68    ELSE_NEURAL -> EMPTY
Rule 69    RIGHT_ASSIGN -> H_EXPRESSION
Rule 70    RIGHT_ASSIGN -> FUNC_CALL
Rule 71    RIGHT_ASSIGN -> ARR_AC1
Rule 72    ARR_AC1 -> ID ARR_ID_NP1 DIM_AC
Rule 73    ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
Rule 74    ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
Rule 75    N -> EMPTY
Rule 76    ASSI_H_EXP_NEURAL -> EMPTY
Rule 77    EQUALS_NEURAL -> EMPTY
Rule 78    ASSIGN_VAR_N -> EMPTY
Rule 79    ARR_AC -> ID ARR_ID_NP1 DIM_AC
Rule 80    ARR_ID_NP1 -> EMPTY
Rule 81    DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R
Rule 82    DIM_AC_PREV -> EMPTY
Rule 83    DIM_AC_R -> DIM_AC
Rule 84    DIM_AC_R -> EMPTY
Rule 85    VAR -> ID
Rule 86    VAR -> ARRAY
Rule 87    ARRAY -> ID ARR_ID_NP DIM
Rule 88    ARR_ID_NP -> EMPTY
Rule 89    DIM -> LBRACE INT LIM_NP RBRACE DIM_R
Rule 90    LIM_NP -> EMPTY
Rule 91    DIM_R -> DIM
Rule 92    DIM_R -> EMPTY
Rule 93    FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
Rule 94    POST_VERIFY -> EMPTY
Rule 95    PRE_VERIFY -> EMPTY
Rule 96    EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2
Rule 97    EXP_NEURAL -> EMPTY
Rule 98    EXP_LIST_2 -> COMMA EXP_LIST
Rule 99    EXP_LIST_2 -> EMPTY
Rule 100   CONSTANT -> INT
Rule 101   CONSTANT -> FLOAT
Rule 102   CONSTANT -> STRING
Rule 103   READ -> READ_K LPAREN ID_LIST RPAREN
Rule 104   ID_LIST -> ID READ_NEURAL ID_LIST_R
Rule 105   READ_NEURAL -> EMPTY
Rule 106   ID_LIST_R -> COMMA ID_LIST
Rule 107   ID_LIST_R -> EMPTY
Rule 108   WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN
Rule 109   WRITE_LIST -> RIGHT_ASSIGN WRITE_LIST_R
Rule 110   WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
Rule 111   CONSTANT_WRITE_N -> EMPTY
Rule 112   WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST
Rule 113   WRITE_LIST_R -> WRITE_NEURAL EMPTY
Rule 114   WRITE_NEURAL -> EMPTY
Rule 115   RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
Rule 116   EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R
Rule 117   NEURAL_EXPRESSION -> EMPTY
Rule 118   EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION
Rule 119   EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION
Rule 120   EXPRESSION_R -> EMPTY
Rule 121   NEURAL_PLUS -> EMPTY
Rule 122   NEURAL_MINUS -> EMPTY
Rule 123   TERM -> FACTOR NEURAL_TERM TERM_R
Rule 124   NEURAL_TERM -> EMPTY
Rule 125   TERM_R -> TIMES NEURAL_TIMES TERM
Rule 126   TERM_R -> DIVIDE NEURAL_DIVIDE TERM
Rule 127   TERM_R -> EMPTY
Rule 128   NEURAL_TIMES -> EMPTY
Rule 129   NEURAL_DIVIDE -> EMPTY
Rule 130   FACTOR -> ID NEURAL_ID_FAC
Rule 131   FACTOR -> CONSTANT NEURAL_CNT_FACT
Rule 132   FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT
Rule 133   FACTOR -> LPAREN H_EXPRESSION RPAREN
Rule 134   NEURAL_ID_FAC -> EMPTY
Rule 135   NEURAL_CNT_FACT -> EMPTY
Rule 136   S_EXPRESSION -> EXPRESSION S_EXPRESSION_R
Rule 137   NEURAL_EXP -> EMPTY
Rule 138   S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP
Rule 139   S_EXPRESSION_R -> EMPTY
Rule 140   NEURAL_CONDI -> EMPTY
Rule 141   CONDI -> GT
Rule 142   CONDI -> LT
Rule 143   CONDI -> LTE
Rule 144   CONDI -> GTE
Rule 145   CONDI -> DOUBLEEQUAL
Rule 146   CONDI -> AND
Rule 147   CONDI -> OR
Rule 148   H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R
Rule 149   H_EXPRESSION_R -> OR H_EXPRESSION
Rule 150   H_EXPRESSION_R -> AND H_EXPRESSION
Rule 151   H_EXPRESSION_R -> EMPTY
Rule 152   PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
Rule 153   MAIN_NEURAL -> EMPTY
Rule 154   PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R
Rule 155   PRINCIPAL_BODY -> EMPTY
Rule 156   O -> EMPTY
Rule 157   PRINCIPAL_BODY_R -> PRINCIPAL_BODY
Rule 158   EMPTY -> <empty>

Terminals, with rules where they appear

AND                  : 146 150
BLOCKEND             : 4 19 21 31 54 57 61 62 67 152
BLOCKSTART           : 4 19 21 31 54 57 61 62 67 152
COLON                : 5 32
COMMA                : 9 28 36 98 106 112
COMMENT              : 
DIVIDE               : 126
DOUBLEEQUAL          : 145
DO_K                 : 54 61
ELSE_K               : 67
EQUALS               : 61 73 74
FLOAT                : 101
FLOAT_K              : 12
FOR_K                : 61
FUNCTION_K           : 19 21
GT                   : 141
GTE                  : 144
ID                   : 1 19 21 61 72 79 85 87 93 104 130
IF_K                 : 62
INT                  : 61 61 89 100
INT_K                : 11
LBRACE               : 81 89
LPAREN               : 19 21 54 57 62 93 103 108 115 133 152
LT                   : 142
LTE                  : 143
MAIN_K               : 152
MINUS                : 119 132
OR                   : 147 149
PLUS                 : 118
PROGRAM_K            : 1
RBRACE               : 81 89
READ_K               : 103
RETURN_K             : 115
RPAREN               : 19 21 54 57 62 93 103 108 115 133 152
SEMICOLON            : 1 5 32 40 41 42 43 44 52 115
STRING               : 102
STRING_K             : 13
TIMES                : 125
TO_K                 : 61
VARS_K               : 4 31
VOID_K               : 19
WHILE_K              : 54 57
WRITE_K              : 108
error                : 

Nonterminals, with rules where they appear

ARRAY                : 86
ARR_AC               : 74
ARR_AC1              : 71
ARR_ID_NP            : 87
ARR_ID_NP1           : 72 79
ASSIGN               : 40
ASSIGN1              : 41
ASSIGN_VAR_N         : 73 74
ASSI_H_EXP_NEURAL    : 73 74
BLOCK                : 1
CONDI                : 138
CONSTANT             : 110 131 132
CONSTANT_WRITE_N     : 110
DECISION             : 49
DECISION_ALT         : 62
DECISION_END_NEURAL  : 62
DIM                  : 87 91
DIM_AC               : 72 79 83
DIM_AC_PREV          : 81
DIM_AC_R             : 81
DIM_R                : 89
DO_WHILE_LOOP        : 52
DW_END_NEURAL        : 54
DW_PREV_NEURAL       : 54
ELSE                 : 65
ELSE_NEURAL          : 67
EMPTY                : 2 7 10 14 18 20 22 23 24 26 27 29 34 37 39 48 55 56 58 59 60 63 64 66 68 75 76 77 78 80 82 84 88 90 92 94 95 97 99 105 107 111 113 114 117 120 121 122 124 127 128 129 134 135 137 139 140 151 153 155 156
EQUALS_NEURAL        : 73 74
EXPRESSION           : 118 119 136 138
EXPRESSION_R         : 116
EXP_LIST             : 93 98
EXP_LIST_2           : 96
EXP_NEURAL           : 96
EXP_RESULT_NEURAL    : 62
FACTOR               : 123
FLOW                 : 46
FNVAR_LS             : 32 36
FNVAR_LS2            : 35
FN_VARBLOCK          : 19 21
FOR_LOOP             : 53
FUNC_CALL            : 42 70
H_EXPRESSION         : 54 57 62 69 81 96 115 133 149 150
H_EXPRESSION_R       : 148
ID_LIST              : 103 106
ID_LIST_R            : 104
LIM_NP               : 89
LOOP                 : 50
LS_VARDECL           : 31 33
LS_VARDECL_R         : 32
MAIN_NEURAL          : 152
N                    : 
NEURAL_CNT_FACT      : 131 132
NEURAL_CONDI         : 138
NEURAL_DIVIDE        : 126
NEURAL_EXP           : 138
NEURAL_EXPRESSION    : 116
NEURAL_ID_FAC        : 130
NEURAL_MINUS         : 119
NEURAL_PLUS          : 118
NEURAL_TERM          : 123
NEURAL_TIMES         : 125
NEURAL_TYPE          : 11 12 13
O                    : 
PARAM_DECL           : 19 21 28
PARAM_DECL_R         : 25
POST_FUNC            : 19 21
POST_VERIFY          : 93
PRE_VERIFY           : 93
PRINCIPAL_BLOCK      : 3
PRINCIPAL_BODY       : 152 157
PRINCIPAL_BODY_R     : 154
PROC_BLOCK           : 3
PROC_BODY            : 19 21 38
PROC_BODY_R          : 30
PROC_DECL            : 15 19 21
PROC_DECL_RETURN     : 16
PROC_DECL_VOID       : 17
PROGRAM              : 0
READ                 : 43
READ_NEURAL          : 104
RETURN               : 45
RIGHT_ASSIGN         : 73 74 109
STATEMENT            : 30 47 154
STATEMENT_R          : 47 54 57 61 62 67
S_EXPRESSION         : 148
S_EXPRESSION_R       : 136
TERM                 : 116 125 126
TERM_R               : 123
TYPE                 : 5 21 25 32
VAR                  : 8 9 25 35 73
VAR_BLOCK            : 3
VAR_DECL             : 4 6
VAR_DECL_R           : 5
VAR_LIST             : 5
VAR_LIST2            : 8 9
WHILE_END_NEURAL     : 57
WHILE_LOOP           : 51
WHILE_POST_NEURAL    : 57
WHILE_PREV_NEURAL    : 57
WRITE                : 44
WRITE_LIST           : 108 112
WRITE_LIST_R         : 109 110
WRITE_NEURAL         : 112 113
neural_param_decl    : 19 21
neural_proc_return_id : 21
neural_proc_void_id  : 19
neural_program_id    : 1
neuro                : 25

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROGRAM_K ID neural_program_id SEMICOLON BLOCK

    PROGRAM_K       shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROGRAM_K . ID neural_program_id SEMICOLON BLOCK

    ID              shift and go to state 3


state 3

    (1) PROGRAM -> PROGRAM_K ID . neural_program_id SEMICOLON BLOCK
    (2) neural_program_id -> . EMPTY
    (158) EMPTY -> .

    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    neural_program_id              shift and go to state 4
    EMPTY                          shift and go to state 5

state 4

    (1) PROGRAM -> PROGRAM_K ID neural_program_id . SEMICOLON BLOCK

    SEMICOLON       shift and go to state 6


state 5

    (2) neural_program_id -> EMPTY .

    SEMICOLON       reduce using rule 2 (neural_program_id -> EMPTY .)


state 6

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON . BLOCK
    (3) BLOCK -> . VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
    (4) VAR_BLOCK -> . VARS_K BLOCKSTART VAR_DECL BLOCKEND

    VARS_K          shift and go to state 9

    BLOCK                          shift and go to state 7
    VAR_BLOCK                      shift and go to state 8

state 7

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .

    $end            reduce using rule 1 (PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .)


state 8

    (3) BLOCK -> VAR_BLOCK . PROC_BLOCK PRINCIPAL_BLOCK
    (15) PROC_BLOCK -> . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (158) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 158 (EMPTY -> .)

    PROC_BLOCK                     shift and go to state 10
    PROC_DECL                      shift and go to state 11
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 9

    (4) VAR_BLOCK -> VARS_K . BLOCKSTART VAR_DECL BLOCKEND

    BLOCKSTART      shift and go to state 16


state 10

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK . PRINCIPAL_BLOCK
    (152) PRINCIPAL_BLOCK -> . MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    MAIN_K          shift and go to state 18

    PRINCIPAL_BLOCK                shift and go to state 17

state 11

    (15) PROC_BLOCK -> PROC_DECL .

    MAIN_K          reduce using rule 15 (PROC_BLOCK -> PROC_DECL .)


state 12

    (16) PROC_DECL -> PROC_DECL_RETURN .

    MAIN_K          reduce using rule 16 (PROC_DECL -> PROC_DECL_RETURN .)


state 13

    (17) PROC_DECL -> PROC_DECL_VOID .

    MAIN_K          reduce using rule 17 (PROC_DECL -> PROC_DECL_VOID .)


state 14

    (18) PROC_DECL -> EMPTY .

    MAIN_K          reduce using rule 18 (PROC_DECL -> EMPTY .)


state 15

    (21) PROC_DECL_RETURN -> FUNCTION_K . TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> FUNCTION_K . VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    VOID_K          shift and go to state 20
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 19

state 16

    (4) VAR_BLOCK -> VARS_K BLOCKSTART . VAR_DECL BLOCKEND
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    VAR_DECL                       shift and go to state 24
    TYPE                           shift and go to state 25

state 17

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .

    $end            reduce using rule 3 (BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .)


state 18

    (152) PRINCIPAL_BLOCK -> MAIN_K . MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
    (153) MAIN_NEURAL -> . EMPTY
    (158) EMPTY -> .

    LPAREN          reduce using rule 158 (EMPTY -> .)

    MAIN_NEURAL                    shift and go to state 26
    EMPTY                          shift and go to state 27

state 19

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE . ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    ID              shift and go to state 28


state 20

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K . ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    ID              shift and go to state 29


state 21

    (11) TYPE -> INT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    COLON           reduce using rule 158 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 30
    EMPTY                          shift and go to state 31

state 22

    (12) TYPE -> FLOAT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    COLON           reduce using rule 158 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 32
    EMPTY                          shift and go to state 31

state 23

    (13) TYPE -> STRING_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    COLON           reduce using rule 158 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 33
    EMPTY                          shift and go to state 31

state 24

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL . BLOCKEND

    BLOCKEND        shift and go to state 34


state 25

    (5) VAR_DECL -> TYPE . COLON VAR_LIST SEMICOLON VAR_DECL_R

    COLON           shift and go to state 35


state 26

    (152) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL . LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    LPAREN          shift and go to state 36


state 27

    (153) MAIN_NEURAL -> EMPTY .

    LPAREN          reduce using rule 153 (MAIN_NEURAL -> EMPTY .)


state 28

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID . neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (23) neural_proc_return_id -> . EMPTY
    (158) EMPTY -> .

    LPAREN          reduce using rule 158 (EMPTY -> .)

    neural_proc_return_id          shift and go to state 37
    EMPTY                          shift and go to state 38

state 29

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID . neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (20) neural_proc_void_id -> . EMPTY
    (158) EMPTY -> .

    LPAREN          reduce using rule 158 (EMPTY -> .)

    neural_proc_void_id            shift and go to state 39
    EMPTY                          shift and go to state 40

state 30

    (11) TYPE -> INT_K NEURAL_TYPE .

    ID              reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)
    COLON           reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)


state 31

    (14) NEURAL_TYPE -> EMPTY .

    ID              reduce using rule 14 (NEURAL_TYPE -> EMPTY .)
    COLON           reduce using rule 14 (NEURAL_TYPE -> EMPTY .)


state 32

    (12) TYPE -> FLOAT_K NEURAL_TYPE .

    ID              reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)
    COLON           reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)


state 33

    (13) TYPE -> STRING_K NEURAL_TYPE .

    ID              reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)
    COLON           reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)


state 34

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .

    FUNCTION_K      reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)
    MAIN_K          reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)


state 35

    (5) VAR_DECL -> TYPE COLON . VAR_LIST SEMICOLON VAR_DECL_R
    (8) VAR_LIST -> . VAR VAR_LIST2
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (87) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    VAR_LIST                       shift and go to state 41
    VAR                            shift and go to state 42
    ARRAY                          shift and go to state 44

state 36

    (152) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN . RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    RPAREN          shift and go to state 45


state 37

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    LPAREN          shift and go to state 46


state 38

    (23) neural_proc_return_id -> EMPTY .

    LPAREN          reduce using rule 23 (neural_proc_return_id -> EMPTY .)


state 39

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    LPAREN          shift and go to state 47


state 40

    (20) neural_proc_void_id -> EMPTY .

    LPAREN          reduce using rule 20 (neural_proc_void_id -> EMPTY .)


state 41

    (5) VAR_DECL -> TYPE COLON VAR_LIST . SEMICOLON VAR_DECL_R

    SEMICOLON       shift and go to state 48


state 42

    (8) VAR_LIST -> VAR . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA VAR VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (158) EMPTY -> .

    COMMA           shift and go to state 50
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 49
    EMPTY                          shift and go to state 51

state 43

    (85) VAR -> ID .
    (87) ARRAY -> ID . ARR_ID_NP DIM
    (88) ARR_ID_NP -> . EMPTY
    (158) EMPTY -> .

    COMMA           reduce using rule 85 (VAR -> ID .)
    SEMICOLON       reduce using rule 85 (VAR -> ID .)
    RPAREN          reduce using rule 85 (VAR -> ID .)
    LBRACE          reduce using rule 158 (EMPTY -> .)

    ARR_ID_NP                      shift and go to state 52
    EMPTY                          shift and go to state 53

state 44

    (86) VAR -> ARRAY .

    COMMA           reduce using rule 86 (VAR -> ARRAY .)
    SEMICOLON       reduce using rule 86 (VAR -> ARRAY .)
    EQUALS          reduce using rule 86 (VAR -> ARRAY .)
    RPAREN          reduce using rule 86 (VAR -> ARRAY .)


state 45

    (152) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN . BLOCKSTART PRINCIPAL_BODY BLOCKEND

    BLOCKSTART      shift and go to state 54


state 46

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (25) PARAM_DECL -> . TYPE VAR neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (158) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 158 (EMPTY -> .)

    TYPE                           shift and go to state 55
    PARAM_DECL                     shift and go to state 56
    EMPTY                          shift and go to state 57

state 47

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (25) PARAM_DECL -> . TYPE VAR neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (158) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 158 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 58
    TYPE                           shift and go to state 55
    EMPTY                          shift and go to state 57

state 48

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON . VAR_DECL_R
    (6) VAR_DECL_R -> . VAR_DECL
    (7) VAR_DECL_R -> . EMPTY
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (158) EMPTY -> .
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 25
    VAR_DECL_R                     shift and go to state 59
    VAR_DECL                       shift and go to state 60
    EMPTY                          shift and go to state 61

state 49

    (8) VAR_LIST -> VAR VAR_LIST2 .

    SEMICOLON       reduce using rule 8 (VAR_LIST -> VAR VAR_LIST2 .)


state 50

    (9) VAR_LIST2 -> COMMA . VAR VAR_LIST2
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (87) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    VAR                            shift and go to state 62
    ARRAY                          shift and go to state 44

state 51

    (10) VAR_LIST2 -> EMPTY .

    SEMICOLON       reduce using rule 10 (VAR_LIST2 -> EMPTY .)


state 52

    (87) ARRAY -> ID ARR_ID_NP . DIM
    (89) DIM -> . LBRACE INT LIM_NP RBRACE DIM_R

    LBRACE          shift and go to state 64

    DIM                            shift and go to state 63

state 53

    (88) ARR_ID_NP -> EMPTY .

    LBRACE          reduce using rule 88 (ARR_ID_NP -> EMPTY .)


state 54

    (152) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART . PRINCIPAL_BODY BLOCKEND
    (154) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (155) PRINCIPAL_BODY -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (158) EMPTY -> .
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    PRINCIPAL_BODY                 shift and go to state 65
    STATEMENT                      shift and go to state 66
    EMPTY                          shift and go to state 67
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 55

    (25) PARAM_DECL -> TYPE . VAR neuro PARAM_DECL_R
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (87) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    VAR                            shift and go to state 90
    ARRAY                          shift and go to state 44

state 56

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    RPAREN          shift and go to state 91


state 57

    (26) PARAM_DECL -> EMPTY .

    RPAREN          reduce using rule 26 (PARAM_DECL -> EMPTY .)


state 58

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    RPAREN          shift and go to state 92


state 59

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .

    BLOCKEND        reduce using rule 5 (VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .)


state 60

    (6) VAR_DECL_R -> VAR_DECL .

    BLOCKEND        reduce using rule 6 (VAR_DECL_R -> VAR_DECL .)


state 61

    (7) VAR_DECL_R -> EMPTY .

    BLOCKEND        reduce using rule 7 (VAR_DECL_R -> EMPTY .)


state 62

    (9) VAR_LIST2 -> COMMA VAR . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA VAR VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (158) EMPTY -> .

    COMMA           shift and go to state 50
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 93
    EMPTY                          shift and go to state 51

state 63

    (87) ARRAY -> ID ARR_ID_NP DIM .

    COMMA           reduce using rule 87 (ARRAY -> ID ARR_ID_NP DIM .)
    SEMICOLON       reduce using rule 87 (ARRAY -> ID ARR_ID_NP DIM .)
    EQUALS          reduce using rule 87 (ARRAY -> ID ARR_ID_NP DIM .)
    RPAREN          reduce using rule 87 (ARRAY -> ID ARR_ID_NP DIM .)


state 64

    (89) DIM -> LBRACE . INT LIM_NP RBRACE DIM_R

    INT             shift and go to state 94


state 65

    (152) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY . BLOCKEND

    BLOCKEND        shift and go to state 95


state 66

    (154) PRINCIPAL_BODY -> STATEMENT . PRINCIPAL_BODY_R
    (157) PRINCIPAL_BODY_R -> . PRINCIPAL_BODY
    (154) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (155) PRINCIPAL_BODY -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (158) EMPTY -> .
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    STATEMENT                      shift and go to state 66
    PRINCIPAL_BODY_R               shift and go to state 96
    PRINCIPAL_BODY                 shift and go to state 97
    EMPTY                          shift and go to state 67
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 67

    (155) PRINCIPAL_BODY -> EMPTY .

    BLOCKEND        reduce using rule 155 (PRINCIPAL_BODY -> EMPTY .)


state 68

    (40) STATEMENT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 98


state 69

    (41) STATEMENT -> ASSIGN1 . SEMICOLON

    SEMICOLON       shift and go to state 99


state 70

    (42) STATEMENT -> FUNC_CALL . SEMICOLON

    SEMICOLON       shift and go to state 100


state 71

    (43) STATEMENT -> READ . SEMICOLON

    SEMICOLON       shift and go to state 101


state 72

    (44) STATEMENT -> WRITE . SEMICOLON

    SEMICOLON       shift and go to state 102


state 73

    (45) STATEMENT -> RETURN .

    ID              reduce using rule 45 (STATEMENT -> RETURN .)
    READ_K          reduce using rule 45 (STATEMENT -> RETURN .)
    WRITE_K         reduce using rule 45 (STATEMENT -> RETURN .)
    RETURN_K        reduce using rule 45 (STATEMENT -> RETURN .)
    IF_K            reduce using rule 45 (STATEMENT -> RETURN .)
    WHILE_K         reduce using rule 45 (STATEMENT -> RETURN .)
    DO_K            reduce using rule 45 (STATEMENT -> RETURN .)
    FOR_K           reduce using rule 45 (STATEMENT -> RETURN .)
    BLOCKEND        reduce using rule 45 (STATEMENT -> RETURN .)


state 74

    (46) STATEMENT -> FLOW .

    ID              reduce using rule 46 (STATEMENT -> FLOW .)
    READ_K          reduce using rule 46 (STATEMENT -> FLOW .)
    WRITE_K         reduce using rule 46 (STATEMENT -> FLOW .)
    RETURN_K        reduce using rule 46 (STATEMENT -> FLOW .)
    IF_K            reduce using rule 46 (STATEMENT -> FLOW .)
    WHILE_K         reduce using rule 46 (STATEMENT -> FLOW .)
    DO_K            reduce using rule 46 (STATEMENT -> FLOW .)
    FOR_K           reduce using rule 46 (STATEMENT -> FLOW .)
    BLOCKEND        reduce using rule 46 (STATEMENT -> FLOW .)


state 75

    (73) ASSIGN -> VAR . ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (78) ASSIGN_VAR_N -> . EMPTY
    (158) EMPTY -> .

    EQUALS          reduce using rule 158 (EMPTY -> .)

    ASSIGN_VAR_N                   shift and go to state 103
    EMPTY                          shift and go to state 104

state 76

    (74) ASSIGN1 -> ARR_AC . ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (78) ASSIGN_VAR_N -> . EMPTY
    (158) EMPTY -> .

    EQUALS          reduce using rule 158 (EMPTY -> .)

    ASSIGN_VAR_N                   shift and go to state 105
    EMPTY                          shift and go to state 104

state 77

    (93) FUNC_CALL -> ID . PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (85) VAR -> ID .
    (79) ARR_AC -> ID . ARR_ID_NP1 DIM_AC
    (87) ARRAY -> ID . ARR_ID_NP DIM
    (95) PRE_VERIFY -> . EMPTY
    (80) ARR_ID_NP1 -> . EMPTY
    (88) ARR_ID_NP -> . EMPTY
    (158) EMPTY -> .

    EQUALS          reduce using rule 85 (VAR -> ID .)
    LPAREN          reduce using rule 158 (EMPTY -> .)
    LBRACE          reduce using rule 158 (EMPTY -> .)

    PRE_VERIFY                     shift and go to state 106
    ARR_ID_NP1                     shift and go to state 107
    ARR_ID_NP                      shift and go to state 52
    EMPTY                          shift and go to state 108

state 78

    (103) READ -> READ_K . LPAREN ID_LIST RPAREN

    LPAREN          shift and go to state 109


state 79

    (108) WRITE -> WRITE_K . LPAREN WRITE_LIST RPAREN

    LPAREN          shift and go to state 110


state 80

    (115) RETURN -> RETURN_K . LPAREN H_EXPRESSION RPAREN SEMICOLON

    LPAREN          shift and go to state 111


state 81

    (49) FLOW -> DECISION .

    ID              reduce using rule 49 (FLOW -> DECISION .)
    READ_K          reduce using rule 49 (FLOW -> DECISION .)
    WRITE_K         reduce using rule 49 (FLOW -> DECISION .)
    RETURN_K        reduce using rule 49 (FLOW -> DECISION .)
    IF_K            reduce using rule 49 (FLOW -> DECISION .)
    WHILE_K         reduce using rule 49 (FLOW -> DECISION .)
    DO_K            reduce using rule 49 (FLOW -> DECISION .)
    FOR_K           reduce using rule 49 (FLOW -> DECISION .)
    BLOCKEND        reduce using rule 49 (FLOW -> DECISION .)


state 82

    (50) FLOW -> LOOP .

    ID              reduce using rule 50 (FLOW -> LOOP .)
    READ_K          reduce using rule 50 (FLOW -> LOOP .)
    WRITE_K         reduce using rule 50 (FLOW -> LOOP .)
    RETURN_K        reduce using rule 50 (FLOW -> LOOP .)
    IF_K            reduce using rule 50 (FLOW -> LOOP .)
    WHILE_K         reduce using rule 50 (FLOW -> LOOP .)
    DO_K            reduce using rule 50 (FLOW -> LOOP .)
    FOR_K           reduce using rule 50 (FLOW -> LOOP .)
    BLOCKEND        reduce using rule 50 (FLOW -> LOOP .)


state 83

    (62) DECISION -> IF_K . LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    LPAREN          shift and go to state 112


state 84

    (51) LOOP -> WHILE_LOOP .

    ID              reduce using rule 51 (LOOP -> WHILE_LOOP .)
    READ_K          reduce using rule 51 (LOOP -> WHILE_LOOP .)
    WRITE_K         reduce using rule 51 (LOOP -> WHILE_LOOP .)
    RETURN_K        reduce using rule 51 (LOOP -> WHILE_LOOP .)
    IF_K            reduce using rule 51 (LOOP -> WHILE_LOOP .)
    WHILE_K         reduce using rule 51 (LOOP -> WHILE_LOOP .)
    DO_K            reduce using rule 51 (LOOP -> WHILE_LOOP .)
    FOR_K           reduce using rule 51 (LOOP -> WHILE_LOOP .)
    BLOCKEND        reduce using rule 51 (LOOP -> WHILE_LOOP .)


state 85

    (52) LOOP -> DO_WHILE_LOOP . SEMICOLON

    SEMICOLON       shift and go to state 113


state 86

    (53) LOOP -> FOR_LOOP .

    ID              reduce using rule 53 (LOOP -> FOR_LOOP .)
    READ_K          reduce using rule 53 (LOOP -> FOR_LOOP .)
    WRITE_K         reduce using rule 53 (LOOP -> FOR_LOOP .)
    RETURN_K        reduce using rule 53 (LOOP -> FOR_LOOP .)
    IF_K            reduce using rule 53 (LOOP -> FOR_LOOP .)
    WHILE_K         reduce using rule 53 (LOOP -> FOR_LOOP .)
    DO_K            reduce using rule 53 (LOOP -> FOR_LOOP .)
    FOR_K           reduce using rule 53 (LOOP -> FOR_LOOP .)
    BLOCKEND        reduce using rule 53 (LOOP -> FOR_LOOP .)


state 87

    (57) WHILE_LOOP -> WHILE_K . WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (58) WHILE_PREV_NEURAL -> . EMPTY
    (158) EMPTY -> .

    LPAREN          reduce using rule 158 (EMPTY -> .)

    WHILE_PREV_NEURAL              shift and go to state 114
    EMPTY                          shift and go to state 115

state 88

    (54) DO_WHILE_LOOP -> DO_K . DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (55) DW_PREV_NEURAL -> . EMPTY
    (158) EMPTY -> .

    BLOCKSTART      reduce using rule 158 (EMPTY -> .)

    DW_PREV_NEURAL                 shift and go to state 116
    EMPTY                          shift and go to state 117

state 89

    (61) FOR_LOOP -> FOR_K . ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 118


state 90

    (25) PARAM_DECL -> TYPE VAR . neuro PARAM_DECL_R
    (27) neuro -> . EMPTY
    (158) EMPTY -> .

    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)

    neuro                          shift and go to state 119
    EMPTY                          shift and go to state 120

state 91

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (24) neural_param_decl -> . EMPTY
    (158) EMPTY -> .

    BLOCKSTART      reduce using rule 158 (EMPTY -> .)

    neural_param_decl              shift and go to state 121
    EMPTY                          shift and go to state 122

state 92

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (24) neural_param_decl -> . EMPTY
    (158) EMPTY -> .

    BLOCKSTART      reduce using rule 158 (EMPTY -> .)

    neural_param_decl              shift and go to state 123
    EMPTY                          shift and go to state 122

state 93

    (9) VAR_LIST2 -> COMMA VAR VAR_LIST2 .

    SEMICOLON       reduce using rule 9 (VAR_LIST2 -> COMMA VAR VAR_LIST2 .)


state 94

    (89) DIM -> LBRACE INT . LIM_NP RBRACE DIM_R
    (90) LIM_NP -> . EMPTY
    (158) EMPTY -> .

    RBRACE          reduce using rule 158 (EMPTY -> .)

    LIM_NP                         shift and go to state 124
    EMPTY                          shift and go to state 125

state 95

    (152) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .

    $end            reduce using rule 152 (PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .)


state 96

    (154) PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .

    BLOCKEND        reduce using rule 154 (PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .)


state 97

    (157) PRINCIPAL_BODY_R -> PRINCIPAL_BODY .

    BLOCKEND        reduce using rule 157 (PRINCIPAL_BODY_R -> PRINCIPAL_BODY .)


state 98

    (40) STATEMENT -> ASSIGN SEMICOLON .

    ID              reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    READ_K          reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    WRITE_K         reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    RETURN_K        reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    IF_K            reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    WHILE_K         reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    DO_K            reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    FOR_K           reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    BLOCKEND        reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)


state 99

    (41) STATEMENT -> ASSIGN1 SEMICOLON .

    ID              reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    READ_K          reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    WRITE_K         reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    RETURN_K        reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    IF_K            reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    WHILE_K         reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    DO_K            reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    FOR_K           reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    BLOCKEND        reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)


state 100

    (42) STATEMENT -> FUNC_CALL SEMICOLON .

    ID              reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    READ_K          reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WRITE_K         reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    RETURN_K        reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    IF_K            reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WHILE_K         reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    DO_K            reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    FOR_K           reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    BLOCKEND        reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)


state 101

    (43) STATEMENT -> READ SEMICOLON .

    ID              reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    READ_K          reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    WRITE_K         reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    RETURN_K        reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    IF_K            reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    WHILE_K         reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    DO_K            reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    FOR_K           reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    BLOCKEND        reduce using rule 43 (STATEMENT -> READ SEMICOLON .)


state 102

    (44) STATEMENT -> WRITE SEMICOLON .

    ID              reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    READ_K          reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    WRITE_K         reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    RETURN_K        reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    IF_K            reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    WHILE_K         reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    DO_K            reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    FOR_K           reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    BLOCKEND        reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)


state 103

    (73) ASSIGN -> VAR ASSIGN_VAR_N . EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL

    EQUALS          shift and go to state 126


state 104

    (78) ASSIGN_VAR_N -> EMPTY .

    EQUALS          reduce using rule 78 (ASSIGN_VAR_N -> EMPTY .)


state 105

    (74) ASSIGN1 -> ARR_AC ASSIGN_VAR_N . EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL

    EQUALS          shift and go to state 127


state 106

    (93) FUNC_CALL -> ID PRE_VERIFY . LPAREN EXP_LIST POST_VERIFY RPAREN

    LPAREN          shift and go to state 128


state 107

    (79) ARR_AC -> ID ARR_ID_NP1 . DIM_AC
    (81) DIM_AC -> . LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R

    LBRACE          shift and go to state 130

    DIM_AC                         shift and go to state 129

state 108

    (95) PRE_VERIFY -> EMPTY .
    (80) ARR_ID_NP1 -> EMPTY .
    (88) ARR_ID_NP -> EMPTY .

  ! reduce/reduce conflict for LBRACE resolved using rule 80 (ARR_ID_NP1 -> EMPTY .)
    LPAREN          reduce using rule 95 (PRE_VERIFY -> EMPTY .)
    LBRACE          reduce using rule 80 (ARR_ID_NP1 -> EMPTY .)

  ! LBRACE          [ reduce using rule 88 (ARR_ID_NP -> EMPTY .) ]


state 109

    (103) READ -> READ_K LPAREN . ID_LIST RPAREN
    (104) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 132

    ID_LIST                        shift and go to state 131

state 110

    (108) WRITE -> WRITE_K LPAREN . WRITE_LIST RPAREN
    (109) WRITE_LIST -> . RIGHT_ASSIGN WRITE_LIST_R
    (110) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (69) RIGHT_ASSIGN -> . H_EXPRESSION
    (70) RIGHT_ASSIGN -> . FUNC_CALL
    (71) RIGHT_ASSIGN -> . ARR_AC1
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (72) ARR_AC1 -> . ID ARR_ID_NP1 DIM_AC
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142
    ID              shift and go to state 144
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133

    WRITE_LIST                     shift and go to state 134
    RIGHT_ASSIGN                   shift and go to state 135
    CONSTANT                       shift and go to state 136
    H_EXPRESSION                   shift and go to state 137
    FUNC_CALL                      shift and go to state 138
    ARR_AC1                        shift and go to state 139
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147

state 111

    (115) RETURN -> RETURN_K LPAREN . H_EXPRESSION RPAREN SEMICOLON
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    H_EXPRESSION                   shift and go to state 149
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 112

    (62) DECISION -> IF_K LPAREN . H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    H_EXPRESSION                   shift and go to state 152
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 113

    (52) LOOP -> DO_WHILE_LOOP SEMICOLON .

    ID              reduce using rule 52 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    READ_K          reduce using rule 52 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    WRITE_K         reduce using rule 52 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    RETURN_K        reduce using rule 52 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    IF_K            reduce using rule 52 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    WHILE_K         reduce using rule 52 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    DO_K            reduce using rule 52 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    FOR_K           reduce using rule 52 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    BLOCKEND        reduce using rule 52 (LOOP -> DO_WHILE_LOOP SEMICOLON .)


state 114

    (57) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL . LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    LPAREN          shift and go to state 153


state 115

    (58) WHILE_PREV_NEURAL -> EMPTY .

    LPAREN          reduce using rule 58 (WHILE_PREV_NEURAL -> EMPTY .)


state 116

    (54) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    BLOCKSTART      shift and go to state 154


state 117

    (55) DW_PREV_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 55 (DW_PREV_NEURAL -> EMPTY .)


state 118

    (61) FOR_LOOP -> FOR_K ID . EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    EQUALS          shift and go to state 155


state 119

    (25) PARAM_DECL -> TYPE VAR neuro . PARAM_DECL_R
    (28) PARAM_DECL_R -> . COMMA PARAM_DECL
    (29) PARAM_DECL_R -> . EMPTY
    (158) EMPTY -> .

    COMMA           shift and go to state 157
    RPAREN          reduce using rule 158 (EMPTY -> .)

    PARAM_DECL_R                   shift and go to state 156
    EMPTY                          shift and go to state 158

state 120

    (27) neuro -> EMPTY .

    COMMA           reduce using rule 27 (neuro -> EMPTY .)
    RPAREN          reduce using rule 27 (neuro -> EMPTY .)


state 121

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    BLOCKSTART      shift and go to state 159


state 122

    (24) neural_param_decl -> EMPTY .

    BLOCKSTART      reduce using rule 24 (neural_param_decl -> EMPTY .)


state 123

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    BLOCKSTART      shift and go to state 160


state 124

    (89) DIM -> LBRACE INT LIM_NP . RBRACE DIM_R

    RBRACE          shift and go to state 161


state 125

    (90) LIM_NP -> EMPTY .

    RBRACE          reduce using rule 90 (LIM_NP -> EMPTY .)


state 126

    (73) ASSIGN -> VAR ASSIGN_VAR_N EQUALS . EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (77) EQUALS_NEURAL -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    LPAREN          reduce using rule 158 (EMPTY -> .)
    INT             reduce using rule 158 (EMPTY -> .)
    FLOAT           reduce using rule 158 (EMPTY -> .)
    STRING          reduce using rule 158 (EMPTY -> .)

    EQUALS_NEURAL                  shift and go to state 162
    EMPTY                          shift and go to state 163

state 127

    (74) ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS . EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (77) EQUALS_NEURAL -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    LPAREN          reduce using rule 158 (EMPTY -> .)
    INT             reduce using rule 158 (EMPTY -> .)
    FLOAT           reduce using rule 158 (EMPTY -> .)
    STRING          reduce using rule 158 (EMPTY -> .)

    EQUALS_NEURAL                  shift and go to state 164
    EMPTY                          shift and go to state 163

state 128

    (93) FUNC_CALL -> ID PRE_VERIFY LPAREN . EXP_LIST POST_VERIFY RPAREN
    (96) EXP_LIST -> . H_EXPRESSION EXP_NEURAL EXP_LIST_2
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    EXP_LIST                       shift and go to state 165
    H_EXPRESSION                   shift and go to state 166
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 129

    (79) ARR_AC -> ID ARR_ID_NP1 DIM_AC .

    EQUALS          reduce using rule 79 (ARR_AC -> ID ARR_ID_NP1 DIM_AC .)


state 130

    (81) DIM_AC -> LBRACE . H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    H_EXPRESSION                   shift and go to state 167
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 131

    (103) READ -> READ_K LPAREN ID_LIST . RPAREN

    RPAREN          shift and go to state 168


state 132

    (104) ID_LIST -> ID . READ_NEURAL ID_LIST_R
    (105) READ_NEURAL -> . EMPTY
    (158) EMPTY -> .

    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)

    READ_NEURAL                    shift and go to state 169
    EMPTY                          shift and go to state 170

state 133

    (133) FACTOR -> LPAREN . H_EXPRESSION RPAREN
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    H_EXPRESSION                   shift and go to state 171
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 134

    (108) WRITE -> WRITE_K LPAREN WRITE_LIST . RPAREN

    RPAREN          shift and go to state 172


state 135

    (109) WRITE_LIST -> RIGHT_ASSIGN . WRITE_LIST_R
    (112) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (113) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (114) WRITE_NEURAL -> . EMPTY
    (158) EMPTY -> .

    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 173
    WRITE_NEURAL                   shift and go to state 174
    EMPTY                          shift and go to state 175

state 136

    (110) WRITE_LIST -> CONSTANT . CONSTANT_WRITE_N WRITE_LIST_R
    (131) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (111) CONSTANT_WRITE_N -> . EMPTY
    (135) NEURAL_CNT_FACT -> . EMPTY
    (158) EMPTY -> .

    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    TIMES           reduce using rule 158 (EMPTY -> .)
    DIVIDE          reduce using rule 158 (EMPTY -> .)
    PLUS            reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    GT              reduce using rule 158 (EMPTY -> .)
    LT              reduce using rule 158 (EMPTY -> .)
    LTE             reduce using rule 158 (EMPTY -> .)
    GTE             reduce using rule 158 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 158 (EMPTY -> .)
    AND             reduce using rule 158 (EMPTY -> .)
    OR              reduce using rule 158 (EMPTY -> .)

    CONSTANT_WRITE_N               shift and go to state 176
    NEURAL_CNT_FACT                shift and go to state 177
    EMPTY                          shift and go to state 178

state 137

    (69) RIGHT_ASSIGN -> H_EXPRESSION .

    COMMA           reduce using rule 69 (RIGHT_ASSIGN -> H_EXPRESSION .)
    RPAREN          reduce using rule 69 (RIGHT_ASSIGN -> H_EXPRESSION .)
    SEMICOLON       reduce using rule 69 (RIGHT_ASSIGN -> H_EXPRESSION .)


state 138

    (70) RIGHT_ASSIGN -> FUNC_CALL .

    COMMA           reduce using rule 70 (RIGHT_ASSIGN -> FUNC_CALL .)
    RPAREN          reduce using rule 70 (RIGHT_ASSIGN -> FUNC_CALL .)
    SEMICOLON       reduce using rule 70 (RIGHT_ASSIGN -> FUNC_CALL .)


state 139

    (71) RIGHT_ASSIGN -> ARR_AC1 .

    COMMA           reduce using rule 71 (RIGHT_ASSIGN -> ARR_AC1 .)
    RPAREN          reduce using rule 71 (RIGHT_ASSIGN -> ARR_AC1 .)
    SEMICOLON       reduce using rule 71 (RIGHT_ASSIGN -> ARR_AC1 .)


state 140

    (100) CONSTANT -> INT .

    COMMA           reduce using rule 100 (CONSTANT -> INT .)
    RPAREN          reduce using rule 100 (CONSTANT -> INT .)
    TIMES           reduce using rule 100 (CONSTANT -> INT .)
    DIVIDE          reduce using rule 100 (CONSTANT -> INT .)
    PLUS            reduce using rule 100 (CONSTANT -> INT .)
    MINUS           reduce using rule 100 (CONSTANT -> INT .)
    GT              reduce using rule 100 (CONSTANT -> INT .)
    LT              reduce using rule 100 (CONSTANT -> INT .)
    LTE             reduce using rule 100 (CONSTANT -> INT .)
    GTE             reduce using rule 100 (CONSTANT -> INT .)
    DOUBLEEQUAL     reduce using rule 100 (CONSTANT -> INT .)
    AND             reduce using rule 100 (CONSTANT -> INT .)
    OR              reduce using rule 100 (CONSTANT -> INT .)
    RBRACE          reduce using rule 100 (CONSTANT -> INT .)
    SEMICOLON       reduce using rule 100 (CONSTANT -> INT .)


state 141

    (101) CONSTANT -> FLOAT .

    COMMA           reduce using rule 101 (CONSTANT -> FLOAT .)
    RPAREN          reduce using rule 101 (CONSTANT -> FLOAT .)
    TIMES           reduce using rule 101 (CONSTANT -> FLOAT .)
    DIVIDE          reduce using rule 101 (CONSTANT -> FLOAT .)
    PLUS            reduce using rule 101 (CONSTANT -> FLOAT .)
    MINUS           reduce using rule 101 (CONSTANT -> FLOAT .)
    GT              reduce using rule 101 (CONSTANT -> FLOAT .)
    LT              reduce using rule 101 (CONSTANT -> FLOAT .)
    LTE             reduce using rule 101 (CONSTANT -> FLOAT .)
    GTE             reduce using rule 101 (CONSTANT -> FLOAT .)
    DOUBLEEQUAL     reduce using rule 101 (CONSTANT -> FLOAT .)
    AND             reduce using rule 101 (CONSTANT -> FLOAT .)
    OR              reduce using rule 101 (CONSTANT -> FLOAT .)
    RBRACE          reduce using rule 101 (CONSTANT -> FLOAT .)
    SEMICOLON       reduce using rule 101 (CONSTANT -> FLOAT .)


state 142

    (102) CONSTANT -> STRING .

    COMMA           reduce using rule 102 (CONSTANT -> STRING .)
    RPAREN          reduce using rule 102 (CONSTANT -> STRING .)
    TIMES           reduce using rule 102 (CONSTANT -> STRING .)
    DIVIDE          reduce using rule 102 (CONSTANT -> STRING .)
    PLUS            reduce using rule 102 (CONSTANT -> STRING .)
    MINUS           reduce using rule 102 (CONSTANT -> STRING .)
    GT              reduce using rule 102 (CONSTANT -> STRING .)
    LT              reduce using rule 102 (CONSTANT -> STRING .)
    LTE             reduce using rule 102 (CONSTANT -> STRING .)
    GTE             reduce using rule 102 (CONSTANT -> STRING .)
    DOUBLEEQUAL     reduce using rule 102 (CONSTANT -> STRING .)
    AND             reduce using rule 102 (CONSTANT -> STRING .)
    OR              reduce using rule 102 (CONSTANT -> STRING .)
    RBRACE          reduce using rule 102 (CONSTANT -> STRING .)
    SEMICOLON       reduce using rule 102 (CONSTANT -> STRING .)


state 143

    (148) H_EXPRESSION -> S_EXPRESSION . H_EXPRESSION_R
    (149) H_EXPRESSION_R -> . OR H_EXPRESSION
    (150) H_EXPRESSION_R -> . AND H_EXPRESSION
    (151) H_EXPRESSION_R -> . EMPTY
    (158) EMPTY -> .

    OR              shift and go to state 180
    AND             shift and go to state 181
    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    RBRACE          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    H_EXPRESSION_R                 shift and go to state 179
    EMPTY                          shift and go to state 182

state 144

    (93) FUNC_CALL -> ID . PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (72) ARR_AC1 -> ID . ARR_ID_NP1 DIM_AC
    (130) FACTOR -> ID . NEURAL_ID_FAC
    (95) PRE_VERIFY -> . EMPTY
    (80) ARR_ID_NP1 -> . EMPTY
    (134) NEURAL_ID_FAC -> . EMPTY
    (158) EMPTY -> .

    LPAREN          reduce using rule 158 (EMPTY -> .)
    LBRACE          reduce using rule 158 (EMPTY -> .)
    TIMES           reduce using rule 158 (EMPTY -> .)
    DIVIDE          reduce using rule 158 (EMPTY -> .)
    PLUS            reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    GT              reduce using rule 158 (EMPTY -> .)
    LT              reduce using rule 158 (EMPTY -> .)
    LTE             reduce using rule 158 (EMPTY -> .)
    GTE             reduce using rule 158 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 158 (EMPTY -> .)
    AND             reduce using rule 158 (EMPTY -> .)
    OR              reduce using rule 158 (EMPTY -> .)
    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    PRE_VERIFY                     shift and go to state 106
    ARR_ID_NP1                     shift and go to state 183
    NEURAL_ID_FAC                  shift and go to state 184
    EMPTY                          shift and go to state 185

state 145

    (136) S_EXPRESSION -> EXPRESSION . S_EXPRESSION_R
    (138) S_EXPRESSION_R -> . CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP
    (139) S_EXPRESSION_R -> . EMPTY
    (141) CONDI -> . GT
    (142) CONDI -> . LT
    (143) CONDI -> . LTE
    (144) CONDI -> . GTE
    (145) CONDI -> . DOUBLEEQUAL
    (146) CONDI -> . AND
    (147) CONDI -> . OR
    (158) EMPTY -> .

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    GT              shift and go to state 189
    LT              shift and go to state 190
    LTE             shift and go to state 191
    GTE             shift and go to state 192
    DOUBLEEQUAL     shift and go to state 193
    AND             shift and go to state 194
    OR              shift and go to state 195
    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    RBRACE          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

  ! OR              [ reduce using rule 158 (EMPTY -> .) ]
  ! AND             [ reduce using rule 158 (EMPTY -> .) ]

    S_EXPRESSION_R                 shift and go to state 186
    CONDI                          shift and go to state 187
    EMPTY                          shift and go to state 188

state 146

    (116) EXPRESSION -> TERM . NEURAL_EXPRESSION EXPRESSION_R
    (117) NEURAL_EXPRESSION -> . EMPTY
    (158) EMPTY -> .

    PLUS            reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    GT              reduce using rule 158 (EMPTY -> .)
    LT              reduce using rule 158 (EMPTY -> .)
    LTE             reduce using rule 158 (EMPTY -> .)
    GTE             reduce using rule 158 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 158 (EMPTY -> .)
    AND             reduce using rule 158 (EMPTY -> .)
    OR              reduce using rule 158 (EMPTY -> .)
    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    RBRACE          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    NEURAL_EXPRESSION              shift and go to state 196
    EMPTY                          shift and go to state 197

state 147

    (123) TERM -> FACTOR . NEURAL_TERM TERM_R
    (124) NEURAL_TERM -> . EMPTY
    (158) EMPTY -> .

    TIMES           reduce using rule 158 (EMPTY -> .)
    DIVIDE          reduce using rule 158 (EMPTY -> .)
    PLUS            reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    GT              reduce using rule 158 (EMPTY -> .)
    LT              reduce using rule 158 (EMPTY -> .)
    LTE             reduce using rule 158 (EMPTY -> .)
    GTE             reduce using rule 158 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 158 (EMPTY -> .)
    AND             reduce using rule 158 (EMPTY -> .)
    OR              reduce using rule 158 (EMPTY -> .)
    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    RBRACE          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    NEURAL_TERM                    shift and go to state 198
    EMPTY                          shift and go to state 199

state 148

    (132) FACTOR -> MINUS . CONSTANT NEURAL_CNT_FACT
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    CONSTANT                       shift and go to state 200

state 149

    (115) RETURN -> RETURN_K LPAREN H_EXPRESSION . RPAREN SEMICOLON

    RPAREN          shift and go to state 201


state 150

    (130) FACTOR -> ID . NEURAL_ID_FAC
    (134) NEURAL_ID_FAC -> . EMPTY
    (158) EMPTY -> .

    TIMES           reduce using rule 158 (EMPTY -> .)
    DIVIDE          reduce using rule 158 (EMPTY -> .)
    PLUS            reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    GT              reduce using rule 158 (EMPTY -> .)
    LT              reduce using rule 158 (EMPTY -> .)
    LTE             reduce using rule 158 (EMPTY -> .)
    GTE             reduce using rule 158 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 158 (EMPTY -> .)
    AND             reduce using rule 158 (EMPTY -> .)
    OR              reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    COMMA           reduce using rule 158 (EMPTY -> .)
    RBRACE          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    NEURAL_ID_FAC                  shift and go to state 184
    EMPTY                          shift and go to state 202

state 151

    (131) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (135) NEURAL_CNT_FACT -> . EMPTY
    (158) EMPTY -> .

    TIMES           reduce using rule 158 (EMPTY -> .)
    DIVIDE          reduce using rule 158 (EMPTY -> .)
    PLUS            reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    GT              reduce using rule 158 (EMPTY -> .)
    LT              reduce using rule 158 (EMPTY -> .)
    LTE             reduce using rule 158 (EMPTY -> .)
    GTE             reduce using rule 158 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 158 (EMPTY -> .)
    AND             reduce using rule 158 (EMPTY -> .)
    OR              reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    COMMA           reduce using rule 158 (EMPTY -> .)
    RBRACE          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    NEURAL_CNT_FACT                shift and go to state 177
    EMPTY                          shift and go to state 203

state 152

    (62) DECISION -> IF_K LPAREN H_EXPRESSION . RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    RPAREN          shift and go to state 204


state 153

    (57) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN . H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    H_EXPRESSION                   shift and go to state 205
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 154

    (54) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (47) STATEMENT_R -> . STATEMENT STATEMENT_R
    (48) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (158) EMPTY -> .
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    STATEMENT_R                    shift and go to state 206
    STATEMENT                      shift and go to state 207
    EMPTY                          shift and go to state 208
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 155

    (61) FOR_LOOP -> FOR_K ID EQUALS . INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 209


state 156

    (25) PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R .

    RPAREN          reduce using rule 25 (PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R .)


state 157

    (28) PARAM_DECL_R -> COMMA . PARAM_DECL
    (25) PARAM_DECL -> . TYPE VAR neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (158) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 158 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 210
    TYPE                           shift and go to state 55
    EMPTY                          shift and go to state 57

state 158

    (29) PARAM_DECL_R -> EMPTY .

    RPAREN          reduce using rule 29 (PARAM_DECL_R -> EMPTY .)


state 159

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (31) FN_VARBLOCK -> . VARS_K BLOCKSTART LS_VARDECL BLOCKEND

    VARS_K          shift and go to state 212

    FN_VARBLOCK                    shift and go to state 211

state 160

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (31) FN_VARBLOCK -> . VARS_K BLOCKSTART LS_VARDECL BLOCKEND

    VARS_K          shift and go to state 212

    FN_VARBLOCK                    shift and go to state 213

state 161

    (89) DIM -> LBRACE INT LIM_NP RBRACE . DIM_R
    (91) DIM_R -> . DIM
    (92) DIM_R -> . EMPTY
    (89) DIM -> . LBRACE INT LIM_NP RBRACE DIM_R
    (158) EMPTY -> .

    LBRACE          shift and go to state 64
    COMMA           reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)
    EQUALS          reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)

    DIM_R                          shift and go to state 214
    DIM                            shift and go to state 215
    EMPTY                          shift and go to state 216

state 162

    (73) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL . RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (69) RIGHT_ASSIGN -> . H_EXPRESSION
    (70) RIGHT_ASSIGN -> . FUNC_CALL
    (71) RIGHT_ASSIGN -> . ARR_AC1
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (72) ARR_AC1 -> . ID ARR_ID_NP1 DIM_AC
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 144
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    RIGHT_ASSIGN                   shift and go to state 217
    H_EXPRESSION                   shift and go to state 137
    FUNC_CALL                      shift and go to state 138
    ARR_AC1                        shift and go to state 139
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 163

    (77) EQUALS_NEURAL -> EMPTY .

    ID              reduce using rule 77 (EQUALS_NEURAL -> EMPTY .)
    MINUS           reduce using rule 77 (EQUALS_NEURAL -> EMPTY .)
    LPAREN          reduce using rule 77 (EQUALS_NEURAL -> EMPTY .)
    INT             reduce using rule 77 (EQUALS_NEURAL -> EMPTY .)
    FLOAT           reduce using rule 77 (EQUALS_NEURAL -> EMPTY .)
    STRING          reduce using rule 77 (EQUALS_NEURAL -> EMPTY .)


state 164

    (74) ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL . RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (69) RIGHT_ASSIGN -> . H_EXPRESSION
    (70) RIGHT_ASSIGN -> . FUNC_CALL
    (71) RIGHT_ASSIGN -> . ARR_AC1
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (72) ARR_AC1 -> . ID ARR_ID_NP1 DIM_AC
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 144
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    RIGHT_ASSIGN                   shift and go to state 218
    H_EXPRESSION                   shift and go to state 137
    FUNC_CALL                      shift and go to state 138
    ARR_AC1                        shift and go to state 139
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 165

    (93) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST . POST_VERIFY RPAREN
    (94) POST_VERIFY -> . EMPTY
    (158) EMPTY -> .

    RPAREN          reduce using rule 158 (EMPTY -> .)

    POST_VERIFY                    shift and go to state 219
    EMPTY                          shift and go to state 220

state 166

    (96) EXP_LIST -> H_EXPRESSION . EXP_NEURAL EXP_LIST_2
    (97) EXP_NEURAL -> . EMPTY
    (158) EMPTY -> .

    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)

    EXP_NEURAL                     shift and go to state 221
    EMPTY                          shift and go to state 222

state 167

    (81) DIM_AC -> LBRACE H_EXPRESSION . DIM_AC_PREV RBRACE DIM_AC_R
    (82) DIM_AC_PREV -> . EMPTY
    (158) EMPTY -> .

    RBRACE          reduce using rule 158 (EMPTY -> .)

    DIM_AC_PREV                    shift and go to state 223
    EMPTY                          shift and go to state 224

state 168

    (103) READ -> READ_K LPAREN ID_LIST RPAREN .

    SEMICOLON       reduce using rule 103 (READ -> READ_K LPAREN ID_LIST RPAREN .)


state 169

    (104) ID_LIST -> ID READ_NEURAL . ID_LIST_R
    (106) ID_LIST_R -> . COMMA ID_LIST
    (107) ID_LIST_R -> . EMPTY
    (158) EMPTY -> .

    COMMA           shift and go to state 226
    RPAREN          reduce using rule 158 (EMPTY -> .)

    ID_LIST_R                      shift and go to state 225
    EMPTY                          shift and go to state 227

state 170

    (105) READ_NEURAL -> EMPTY .

    COMMA           reduce using rule 105 (READ_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 105 (READ_NEURAL -> EMPTY .)


state 171

    (133) FACTOR -> LPAREN H_EXPRESSION . RPAREN

    RPAREN          shift and go to state 228


state 172

    (108) WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .

    SEMICOLON       reduce using rule 108 (WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .)


state 173

    (109) WRITE_LIST -> RIGHT_ASSIGN WRITE_LIST_R .

    RPAREN          reduce using rule 109 (WRITE_LIST -> RIGHT_ASSIGN WRITE_LIST_R .)


state 174

    (112) WRITE_LIST_R -> WRITE_NEURAL . COMMA WRITE_LIST
    (113) WRITE_LIST_R -> WRITE_NEURAL . EMPTY
    (158) EMPTY -> .

    COMMA           shift and go to state 229
    RPAREN          reduce using rule 158 (EMPTY -> .)

    EMPTY                          shift and go to state 230

state 175

    (114) WRITE_NEURAL -> EMPTY .

    COMMA           reduce using rule 114 (WRITE_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 114 (WRITE_NEURAL -> EMPTY .)


state 176

    (110) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N . WRITE_LIST_R
    (112) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (113) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (114) WRITE_NEURAL -> . EMPTY
    (158) EMPTY -> .

    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 231
    WRITE_NEURAL                   shift and go to state 174
    EMPTY                          shift and go to state 175

state 177

    (131) FACTOR -> CONSTANT NEURAL_CNT_FACT .

    TIMES           reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DIVIDE          reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    PLUS            reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    MINUS           reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GT              reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LT              reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LTE             reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GTE             reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DOUBLEEQUAL     reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    AND             reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    OR              reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    COMMA           reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    RPAREN          reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    RBRACE          reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    SEMICOLON       reduce using rule 131 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)


state 178

    (111) CONSTANT_WRITE_N -> EMPTY .
    (135) NEURAL_CNT_FACT -> EMPTY .

  ! reduce/reduce conflict for COMMA resolved using rule 111 (CONSTANT_WRITE_N -> EMPTY .)
  ! reduce/reduce conflict for RPAREN resolved using rule 111 (CONSTANT_WRITE_N -> EMPTY .)
    COMMA           reduce using rule 111 (CONSTANT_WRITE_N -> EMPTY .)
    RPAREN          reduce using rule 111 (CONSTANT_WRITE_N -> EMPTY .)
    TIMES           reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)

  ! COMMA           [ reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .) ]
  ! RPAREN          [ reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .) ]


state 179

    (148) H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .

    COMMA           reduce using rule 148 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    RPAREN          reduce using rule 148 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    RBRACE          reduce using rule 148 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    SEMICOLON       reduce using rule 148 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)


state 180

    (149) H_EXPRESSION_R -> OR . H_EXPRESSION
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    H_EXPRESSION                   shift and go to state 232
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 181

    (150) H_EXPRESSION_R -> AND . H_EXPRESSION
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    H_EXPRESSION                   shift and go to state 233
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 182

    (151) H_EXPRESSION_R -> EMPTY .

    COMMA           reduce using rule 151 (H_EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 151 (H_EXPRESSION_R -> EMPTY .)
    RBRACE          reduce using rule 151 (H_EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 151 (H_EXPRESSION_R -> EMPTY .)


state 183

    (72) ARR_AC1 -> ID ARR_ID_NP1 . DIM_AC
    (81) DIM_AC -> . LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R

    LBRACE          shift and go to state 130

    DIM_AC                         shift and go to state 234

state 184

    (130) FACTOR -> ID NEURAL_ID_FAC .

    TIMES           reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    DIVIDE          reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    PLUS            reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    MINUS           reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    GT              reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    LT              reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    LTE             reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    GTE             reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    DOUBLEEQUAL     reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    AND             reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    OR              reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    COMMA           reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    RPAREN          reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    RBRACE          reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)
    SEMICOLON       reduce using rule 130 (FACTOR -> ID NEURAL_ID_FAC .)


state 185

    (95) PRE_VERIFY -> EMPTY .
    (80) ARR_ID_NP1 -> EMPTY .
    (134) NEURAL_ID_FAC -> EMPTY .

    LPAREN          reduce using rule 95 (PRE_VERIFY -> EMPTY .)
    LBRACE          reduce using rule 80 (ARR_ID_NP1 -> EMPTY .)
    TIMES           reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    DIVIDE          reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    PLUS            reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    MINUS           reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    GT              reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    LT              reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    LTE             reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    GTE             reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    AND             reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    OR              reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    COMMA           reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    RPAREN          reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    SEMICOLON       reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)


state 186

    (136) S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .

    OR              reduce using rule 136 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    AND             reduce using rule 136 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    COMMA           reduce using rule 136 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    RPAREN          reduce using rule 136 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    RBRACE          reduce using rule 136 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    SEMICOLON       reduce using rule 136 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)


state 187

    (138) S_EXPRESSION_R -> CONDI . NEURAL_CONDI EXPRESSION NEURAL_EXP
    (140) NEURAL_CONDI -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    LPAREN          reduce using rule 158 (EMPTY -> .)
    INT             reduce using rule 158 (EMPTY -> .)
    FLOAT           reduce using rule 158 (EMPTY -> .)
    STRING          reduce using rule 158 (EMPTY -> .)

    NEURAL_CONDI                   shift and go to state 235
    EMPTY                          shift and go to state 236

state 188

    (139) S_EXPRESSION_R -> EMPTY .

    OR              reduce using rule 139 (S_EXPRESSION_R -> EMPTY .)
    AND             reduce using rule 139 (S_EXPRESSION_R -> EMPTY .)
    COMMA           reduce using rule 139 (S_EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 139 (S_EXPRESSION_R -> EMPTY .)
    RBRACE          reduce using rule 139 (S_EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 139 (S_EXPRESSION_R -> EMPTY .)


state 189

    (141) CONDI -> GT .

    ID              reduce using rule 141 (CONDI -> GT .)
    MINUS           reduce using rule 141 (CONDI -> GT .)
    LPAREN          reduce using rule 141 (CONDI -> GT .)
    INT             reduce using rule 141 (CONDI -> GT .)
    FLOAT           reduce using rule 141 (CONDI -> GT .)
    STRING          reduce using rule 141 (CONDI -> GT .)


state 190

    (142) CONDI -> LT .

    ID              reduce using rule 142 (CONDI -> LT .)
    MINUS           reduce using rule 142 (CONDI -> LT .)
    LPAREN          reduce using rule 142 (CONDI -> LT .)
    INT             reduce using rule 142 (CONDI -> LT .)
    FLOAT           reduce using rule 142 (CONDI -> LT .)
    STRING          reduce using rule 142 (CONDI -> LT .)


state 191

    (143) CONDI -> LTE .

    ID              reduce using rule 143 (CONDI -> LTE .)
    MINUS           reduce using rule 143 (CONDI -> LTE .)
    LPAREN          reduce using rule 143 (CONDI -> LTE .)
    INT             reduce using rule 143 (CONDI -> LTE .)
    FLOAT           reduce using rule 143 (CONDI -> LTE .)
    STRING          reduce using rule 143 (CONDI -> LTE .)


state 192

    (144) CONDI -> GTE .

    ID              reduce using rule 144 (CONDI -> GTE .)
    MINUS           reduce using rule 144 (CONDI -> GTE .)
    LPAREN          reduce using rule 144 (CONDI -> GTE .)
    INT             reduce using rule 144 (CONDI -> GTE .)
    FLOAT           reduce using rule 144 (CONDI -> GTE .)
    STRING          reduce using rule 144 (CONDI -> GTE .)


state 193

    (145) CONDI -> DOUBLEEQUAL .

    ID              reduce using rule 145 (CONDI -> DOUBLEEQUAL .)
    MINUS           reduce using rule 145 (CONDI -> DOUBLEEQUAL .)
    LPAREN          reduce using rule 145 (CONDI -> DOUBLEEQUAL .)
    INT             reduce using rule 145 (CONDI -> DOUBLEEQUAL .)
    FLOAT           reduce using rule 145 (CONDI -> DOUBLEEQUAL .)
    STRING          reduce using rule 145 (CONDI -> DOUBLEEQUAL .)


state 194

    (146) CONDI -> AND .

    ID              reduce using rule 146 (CONDI -> AND .)
    MINUS           reduce using rule 146 (CONDI -> AND .)
    LPAREN          reduce using rule 146 (CONDI -> AND .)
    INT             reduce using rule 146 (CONDI -> AND .)
    FLOAT           reduce using rule 146 (CONDI -> AND .)
    STRING          reduce using rule 146 (CONDI -> AND .)


state 195

    (147) CONDI -> OR .

    ID              reduce using rule 147 (CONDI -> OR .)
    MINUS           reduce using rule 147 (CONDI -> OR .)
    LPAREN          reduce using rule 147 (CONDI -> OR .)
    INT             reduce using rule 147 (CONDI -> OR .)
    FLOAT           reduce using rule 147 (CONDI -> OR .)
    STRING          reduce using rule 147 (CONDI -> OR .)


state 196

    (116) EXPRESSION -> TERM NEURAL_EXPRESSION . EXPRESSION_R
    (118) EXPRESSION_R -> . PLUS NEURAL_PLUS EXPRESSION
    (119) EXPRESSION_R -> . MINUS NEURAL_MINUS EXPRESSION
    (120) EXPRESSION_R -> . EMPTY
    (158) EMPTY -> .

    PLUS            shift and go to state 238
    MINUS           shift and go to state 239
    GT              reduce using rule 158 (EMPTY -> .)
    LT              reduce using rule 158 (EMPTY -> .)
    LTE             reduce using rule 158 (EMPTY -> .)
    GTE             reduce using rule 158 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 158 (EMPTY -> .)
    AND             reduce using rule 158 (EMPTY -> .)
    OR              reduce using rule 158 (EMPTY -> .)
    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    RBRACE          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    EXPRESSION_R                   shift and go to state 237
    EMPTY                          shift and go to state 240

state 197

    (117) NEURAL_EXPRESSION -> EMPTY .

    PLUS            reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    MINUS           reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    GT              reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    LT              reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    LTE             reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    GTE             reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    AND             reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    OR              reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    COMMA           reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    RPAREN          reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    RBRACE          reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)
    SEMICOLON       reduce using rule 117 (NEURAL_EXPRESSION -> EMPTY .)


state 198

    (123) TERM -> FACTOR NEURAL_TERM . TERM_R
    (125) TERM_R -> . TIMES NEURAL_TIMES TERM
    (126) TERM_R -> . DIVIDE NEURAL_DIVIDE TERM
    (127) TERM_R -> . EMPTY
    (158) EMPTY -> .

    TIMES           shift and go to state 242
    DIVIDE          shift and go to state 243
    PLUS            reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    GT              reduce using rule 158 (EMPTY -> .)
    LT              reduce using rule 158 (EMPTY -> .)
    LTE             reduce using rule 158 (EMPTY -> .)
    GTE             reduce using rule 158 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 158 (EMPTY -> .)
    AND             reduce using rule 158 (EMPTY -> .)
    OR              reduce using rule 158 (EMPTY -> .)
    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    RBRACE          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    TERM_R                         shift and go to state 241
    EMPTY                          shift and go to state 244

state 199

    (124) NEURAL_TERM -> EMPTY .

    TIMES           reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    DIVIDE          reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    PLUS            reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    MINUS           reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    GT              reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    LT              reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    LTE             reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    GTE             reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    AND             reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    OR              reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    COMMA           reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    RPAREN          reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    RBRACE          reduce using rule 124 (NEURAL_TERM -> EMPTY .)
    SEMICOLON       reduce using rule 124 (NEURAL_TERM -> EMPTY .)


state 200

    (132) FACTOR -> MINUS CONSTANT . NEURAL_CNT_FACT
    (135) NEURAL_CNT_FACT -> . EMPTY
    (158) EMPTY -> .

    TIMES           reduce using rule 158 (EMPTY -> .)
    DIVIDE          reduce using rule 158 (EMPTY -> .)
    PLUS            reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    GT              reduce using rule 158 (EMPTY -> .)
    LT              reduce using rule 158 (EMPTY -> .)
    LTE             reduce using rule 158 (EMPTY -> .)
    GTE             reduce using rule 158 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 158 (EMPTY -> .)
    AND             reduce using rule 158 (EMPTY -> .)
    OR              reduce using rule 158 (EMPTY -> .)
    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    RBRACE          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    NEURAL_CNT_FACT                shift and go to state 245
    EMPTY                          shift and go to state 203

state 201

    (115) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 246


state 202

    (134) NEURAL_ID_FAC -> EMPTY .

    TIMES           reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    DIVIDE          reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    PLUS            reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    MINUS           reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    GT              reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    LT              reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    LTE             reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    GTE             reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    AND             reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    OR              reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    RPAREN          reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    COMMA           reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    RBRACE          reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)
    SEMICOLON       reduce using rule 134 (NEURAL_ID_FAC -> EMPTY .)


state 203

    (135) NEURAL_CNT_FACT -> EMPTY .

    TIMES           reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    RPAREN          reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    COMMA           reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    RBRACE          reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)
    SEMICOLON       reduce using rule 135 (NEURAL_CNT_FACT -> EMPTY .)


state 204

    (62) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN . EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (63) EXP_RESULT_NEURAL -> . EMPTY
    (158) EMPTY -> .

    BLOCKSTART      reduce using rule 158 (EMPTY -> .)

    EXP_RESULT_NEURAL              shift and go to state 247
    EMPTY                          shift and go to state 248

state 205

    (57) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION . RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    RPAREN          shift and go to state 249


state 206

    (54) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    BLOCKEND        shift and go to state 250


state 207

    (47) STATEMENT_R -> STATEMENT . STATEMENT_R
    (47) STATEMENT_R -> . STATEMENT STATEMENT_R
    (48) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (158) EMPTY -> .
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    STATEMENT                      shift and go to state 207
    STATEMENT_R                    shift and go to state 251
    EMPTY                          shift and go to state 208
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 208

    (48) STATEMENT_R -> EMPTY .

    BLOCKEND        reduce using rule 48 (STATEMENT_R -> EMPTY .)


state 209

    (61) FOR_LOOP -> FOR_K ID EQUALS INT . TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    TO_K            shift and go to state 252


state 210

    (28) PARAM_DECL_R -> COMMA PARAM_DECL .

    RPAREN          reduce using rule 28 (PARAM_DECL_R -> COMMA PARAM_DECL .)


state 211

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK . PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    PROC_BODY                      shift and go to state 253
    STATEMENT                      shift and go to state 254
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 212

    (31) FN_VARBLOCK -> VARS_K . BLOCKSTART LS_VARDECL BLOCKEND

    BLOCKSTART      shift and go to state 255


state 213

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK . PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    PROC_BODY                      shift and go to state 256
    STATEMENT                      shift and go to state 254
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 214

    (89) DIM -> LBRACE INT LIM_NP RBRACE DIM_R .

    COMMA           reduce using rule 89 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)
    SEMICOLON       reduce using rule 89 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)
    EQUALS          reduce using rule 89 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)
    RPAREN          reduce using rule 89 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)


state 215

    (91) DIM_R -> DIM .

    COMMA           reduce using rule 91 (DIM_R -> DIM .)
    SEMICOLON       reduce using rule 91 (DIM_R -> DIM .)
    EQUALS          reduce using rule 91 (DIM_R -> DIM .)
    RPAREN          reduce using rule 91 (DIM_R -> DIM .)


state 216

    (92) DIM_R -> EMPTY .

    COMMA           reduce using rule 92 (DIM_R -> EMPTY .)
    SEMICOLON       reduce using rule 92 (DIM_R -> EMPTY .)
    EQUALS          reduce using rule 92 (DIM_R -> EMPTY .)
    RPAREN          reduce using rule 92 (DIM_R -> EMPTY .)


state 217

    (73) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN . ASSI_H_EXP_NEURAL
    (76) ASSI_H_EXP_NEURAL -> . EMPTY
    (158) EMPTY -> .

    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    ASSI_H_EXP_NEURAL              shift and go to state 257
    EMPTY                          shift and go to state 258

state 218

    (74) ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN . ASSI_H_EXP_NEURAL
    (76) ASSI_H_EXP_NEURAL -> . EMPTY
    (158) EMPTY -> .

    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    ASSI_H_EXP_NEURAL              shift and go to state 259
    EMPTY                          shift and go to state 258

state 219

    (93) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY . RPAREN

    RPAREN          shift and go to state 260


state 220

    (94) POST_VERIFY -> EMPTY .

    RPAREN          reduce using rule 94 (POST_VERIFY -> EMPTY .)


state 221

    (96) EXP_LIST -> H_EXPRESSION EXP_NEURAL . EXP_LIST_2
    (98) EXP_LIST_2 -> . COMMA EXP_LIST
    (99) EXP_LIST_2 -> . EMPTY
    (158) EMPTY -> .

    COMMA           shift and go to state 262
    RPAREN          reduce using rule 158 (EMPTY -> .)

    EXP_LIST_2                     shift and go to state 261
    EMPTY                          shift and go to state 263

state 222

    (97) EXP_NEURAL -> EMPTY .

    COMMA           reduce using rule 97 (EXP_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 97 (EXP_NEURAL -> EMPTY .)


state 223

    (81) DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV . RBRACE DIM_AC_R

    RBRACE          shift and go to state 264


state 224

    (82) DIM_AC_PREV -> EMPTY .

    RBRACE          reduce using rule 82 (DIM_AC_PREV -> EMPTY .)


state 225

    (104) ID_LIST -> ID READ_NEURAL ID_LIST_R .

    RPAREN          reduce using rule 104 (ID_LIST -> ID READ_NEURAL ID_LIST_R .)


state 226

    (106) ID_LIST_R -> COMMA . ID_LIST
    (104) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 132

    ID_LIST                        shift and go to state 265

state 227

    (107) ID_LIST_R -> EMPTY .

    RPAREN          reduce using rule 107 (ID_LIST_R -> EMPTY .)


state 228

    (133) FACTOR -> LPAREN H_EXPRESSION RPAREN .

    TIMES           reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DIVIDE          reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    PLUS            reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    MINUS           reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GT              reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LT              reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LTE             reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GTE             reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DOUBLEEQUAL     reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    AND             reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    OR              reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    COMMA           reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    RPAREN          reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    RBRACE          reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    SEMICOLON       reduce using rule 133 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)


state 229

    (112) WRITE_LIST_R -> WRITE_NEURAL COMMA . WRITE_LIST
    (109) WRITE_LIST -> . RIGHT_ASSIGN WRITE_LIST_R
    (110) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (69) RIGHT_ASSIGN -> . H_EXPRESSION
    (70) RIGHT_ASSIGN -> . FUNC_CALL
    (71) RIGHT_ASSIGN -> . ARR_AC1
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (72) ARR_AC1 -> . ID ARR_ID_NP1 DIM_AC
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142
    ID              shift and go to state 144
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133

    WRITE_LIST                     shift and go to state 266
    RIGHT_ASSIGN                   shift and go to state 135
    CONSTANT                       shift and go to state 136
    H_EXPRESSION                   shift and go to state 137
    FUNC_CALL                      shift and go to state 138
    ARR_AC1                        shift and go to state 139
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147

state 230

    (113) WRITE_LIST_R -> WRITE_NEURAL EMPTY .

    RPAREN          reduce using rule 113 (WRITE_LIST_R -> WRITE_NEURAL EMPTY .)


state 231

    (110) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .

    RPAREN          reduce using rule 110 (WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .)


state 232

    (149) H_EXPRESSION_R -> OR H_EXPRESSION .

    COMMA           reduce using rule 149 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    RPAREN          reduce using rule 149 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    RBRACE          reduce using rule 149 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    SEMICOLON       reduce using rule 149 (H_EXPRESSION_R -> OR H_EXPRESSION .)


state 233

    (150) H_EXPRESSION_R -> AND H_EXPRESSION .

    COMMA           reduce using rule 150 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    RPAREN          reduce using rule 150 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    RBRACE          reduce using rule 150 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    SEMICOLON       reduce using rule 150 (H_EXPRESSION_R -> AND H_EXPRESSION .)


state 234

    (72) ARR_AC1 -> ID ARR_ID_NP1 DIM_AC .

    COMMA           reduce using rule 72 (ARR_AC1 -> ID ARR_ID_NP1 DIM_AC .)
    RPAREN          reduce using rule 72 (ARR_AC1 -> ID ARR_ID_NP1 DIM_AC .)
    SEMICOLON       reduce using rule 72 (ARR_AC1 -> ID ARR_ID_NP1 DIM_AC .)


state 235

    (138) S_EXPRESSION_R -> CONDI NEURAL_CONDI . EXPRESSION NEURAL_EXP
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    EXPRESSION                     shift and go to state 267
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 236

    (140) NEURAL_CONDI -> EMPTY .

    ID              reduce using rule 140 (NEURAL_CONDI -> EMPTY .)
    MINUS           reduce using rule 140 (NEURAL_CONDI -> EMPTY .)
    LPAREN          reduce using rule 140 (NEURAL_CONDI -> EMPTY .)
    INT             reduce using rule 140 (NEURAL_CONDI -> EMPTY .)
    FLOAT           reduce using rule 140 (NEURAL_CONDI -> EMPTY .)
    STRING          reduce using rule 140 (NEURAL_CONDI -> EMPTY .)


state 237

    (116) EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .

    GT              reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LT              reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LTE             reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    GTE             reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    DOUBLEEQUAL     reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    AND             reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    OR              reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    COMMA           reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    RPAREN          reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    RBRACE          reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    SEMICOLON       reduce using rule 116 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)


state 238

    (118) EXPRESSION_R -> PLUS . NEURAL_PLUS EXPRESSION
    (121) NEURAL_PLUS -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    LPAREN          reduce using rule 158 (EMPTY -> .)
    INT             reduce using rule 158 (EMPTY -> .)
    FLOAT           reduce using rule 158 (EMPTY -> .)
    STRING          reduce using rule 158 (EMPTY -> .)

    NEURAL_PLUS                    shift and go to state 268
    EMPTY                          shift and go to state 269

state 239

    (119) EXPRESSION_R -> MINUS . NEURAL_MINUS EXPRESSION
    (122) NEURAL_MINUS -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    LPAREN          reduce using rule 158 (EMPTY -> .)
    INT             reduce using rule 158 (EMPTY -> .)
    FLOAT           reduce using rule 158 (EMPTY -> .)
    STRING          reduce using rule 158 (EMPTY -> .)

    NEURAL_MINUS                   shift and go to state 270
    EMPTY                          shift and go to state 271

state 240

    (120) EXPRESSION_R -> EMPTY .

    GT              reduce using rule 120 (EXPRESSION_R -> EMPTY .)
    LT              reduce using rule 120 (EXPRESSION_R -> EMPTY .)
    LTE             reduce using rule 120 (EXPRESSION_R -> EMPTY .)
    GTE             reduce using rule 120 (EXPRESSION_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 120 (EXPRESSION_R -> EMPTY .)
    AND             reduce using rule 120 (EXPRESSION_R -> EMPTY .)
    OR              reduce using rule 120 (EXPRESSION_R -> EMPTY .)
    COMMA           reduce using rule 120 (EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 120 (EXPRESSION_R -> EMPTY .)
    RBRACE          reduce using rule 120 (EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 120 (EXPRESSION_R -> EMPTY .)


state 241

    (123) TERM -> FACTOR NEURAL_TERM TERM_R .

    PLUS            reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    MINUS           reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GT              reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LT              reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LTE             reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GTE             reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    DOUBLEEQUAL     reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    AND             reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    OR              reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    COMMA           reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    RPAREN          reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    RBRACE          reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    SEMICOLON       reduce using rule 123 (TERM -> FACTOR NEURAL_TERM TERM_R .)


state 242

    (125) TERM_R -> TIMES . NEURAL_TIMES TERM
    (128) NEURAL_TIMES -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    LPAREN          reduce using rule 158 (EMPTY -> .)
    INT             reduce using rule 158 (EMPTY -> .)
    FLOAT           reduce using rule 158 (EMPTY -> .)
    STRING          reduce using rule 158 (EMPTY -> .)

    NEURAL_TIMES                   shift and go to state 272
    EMPTY                          shift and go to state 273

state 243

    (126) TERM_R -> DIVIDE . NEURAL_DIVIDE TERM
    (129) NEURAL_DIVIDE -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    MINUS           reduce using rule 158 (EMPTY -> .)
    LPAREN          reduce using rule 158 (EMPTY -> .)
    INT             reduce using rule 158 (EMPTY -> .)
    FLOAT           reduce using rule 158 (EMPTY -> .)
    STRING          reduce using rule 158 (EMPTY -> .)

    NEURAL_DIVIDE                  shift and go to state 274
    EMPTY                          shift and go to state 275

state 244

    (127) TERM_R -> EMPTY .

    PLUS            reduce using rule 127 (TERM_R -> EMPTY .)
    MINUS           reduce using rule 127 (TERM_R -> EMPTY .)
    GT              reduce using rule 127 (TERM_R -> EMPTY .)
    LT              reduce using rule 127 (TERM_R -> EMPTY .)
    LTE             reduce using rule 127 (TERM_R -> EMPTY .)
    GTE             reduce using rule 127 (TERM_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 127 (TERM_R -> EMPTY .)
    AND             reduce using rule 127 (TERM_R -> EMPTY .)
    OR              reduce using rule 127 (TERM_R -> EMPTY .)
    COMMA           reduce using rule 127 (TERM_R -> EMPTY .)
    RPAREN          reduce using rule 127 (TERM_R -> EMPTY .)
    RBRACE          reduce using rule 127 (TERM_R -> EMPTY .)
    SEMICOLON       reduce using rule 127 (TERM_R -> EMPTY .)


state 245

    (132) FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .

    TIMES           reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    DIVIDE          reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    PLUS            reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    MINUS           reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    GT              reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    LT              reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    LTE             reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    GTE             reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    DOUBLEEQUAL     reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    AND             reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    OR              reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    COMMA           reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    RPAREN          reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    RBRACE          reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)
    SEMICOLON       reduce using rule 132 (FACTOR -> MINUS CONSTANT NEURAL_CNT_FACT .)


state 246

    (115) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .

    ID              reduce using rule 115 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)
    READ_K          reduce using rule 115 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)
    WRITE_K         reduce using rule 115 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)
    RETURN_K        reduce using rule 115 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)
    IF_K            reduce using rule 115 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)
    WHILE_K         reduce using rule 115 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)
    DO_K            reduce using rule 115 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)
    FOR_K           reduce using rule 115 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)
    BLOCKEND        reduce using rule 115 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)


state 247

    (62) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKSTART      shift and go to state 276


state 248

    (63) EXP_RESULT_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 63 (EXP_RESULT_NEURAL -> EMPTY .)


state 249

    (57) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN . WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (59) WHILE_POST_NEURAL -> . EMPTY
    (158) EMPTY -> .

    BLOCKSTART      reduce using rule 158 (EMPTY -> .)

    WHILE_POST_NEURAL              shift and go to state 277
    EMPTY                          shift and go to state 278

state 250

    (54) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    WHILE_K         shift and go to state 279


state 251

    (47) STATEMENT_R -> STATEMENT STATEMENT_R .

    BLOCKEND        reduce using rule 47 (STATEMENT_R -> STATEMENT STATEMENT_R .)


state 252

    (61) FOR_LOOP -> FOR_K ID EQUALS INT TO_K . INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 280


state 253

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY . BLOCKEND POST_FUNC PROC_DECL

    BLOCKEND        shift and go to state 281


state 254

    (30) PROC_BODY -> STATEMENT . PROC_BODY_R
    (38) PROC_BODY_R -> . PROC_BODY
    (39) PROC_BODY_R -> . EMPTY
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (158) EMPTY -> .
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    STATEMENT                      shift and go to state 254
    PROC_BODY_R                    shift and go to state 282
    PROC_BODY                      shift and go to state 283
    EMPTY                          shift and go to state 284
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 255

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART . LS_VARDECL BLOCKEND
    (32) LS_VARDECL -> . TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    LS_VARDECL                     shift and go to state 285
    TYPE                           shift and go to state 286

state 256

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY . BLOCKEND POST_FUNC PROC_DECL

    BLOCKEND        shift and go to state 287


state 257

    (73) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL .

    SEMICOLON       reduce using rule 73 (ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL .)


state 258

    (76) ASSI_H_EXP_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 76 (ASSI_H_EXP_NEURAL -> EMPTY .)


state 259

    (74) ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL .

    SEMICOLON       reduce using rule 74 (ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL .)


state 260

    (93) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN .

    SEMICOLON       reduce using rule 93 (FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN .)
    COMMA           reduce using rule 93 (FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN .)
    RPAREN          reduce using rule 93 (FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN .)


state 261

    (96) EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2 .

    RPAREN          reduce using rule 96 (EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2 .)


state 262

    (98) EXP_LIST_2 -> COMMA . EXP_LIST
    (96) EXP_LIST -> . H_EXPRESSION EXP_NEURAL EXP_LIST_2
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    EXP_LIST                       shift and go to state 288
    H_EXPRESSION                   shift and go to state 166
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 263

    (99) EXP_LIST_2 -> EMPTY .

    RPAREN          reduce using rule 99 (EXP_LIST_2 -> EMPTY .)


state 264

    (81) DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE . DIM_AC_R
    (83) DIM_AC_R -> . DIM_AC
    (84) DIM_AC_R -> . EMPTY
    (81) DIM_AC -> . LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R
    (158) EMPTY -> .

    LBRACE          shift and go to state 130
    EQUALS          reduce using rule 158 (EMPTY -> .)
    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    DIM_AC_R                       shift and go to state 289
    DIM_AC                         shift and go to state 290
    EMPTY                          shift and go to state 291

state 265

    (106) ID_LIST_R -> COMMA ID_LIST .

    RPAREN          reduce using rule 106 (ID_LIST_R -> COMMA ID_LIST .)


state 266

    (112) WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .

    RPAREN          reduce using rule 112 (WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .)


state 267

    (138) S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION . NEURAL_EXP
    (137) NEURAL_EXP -> . EMPTY
    (158) EMPTY -> .

    OR              reduce using rule 158 (EMPTY -> .)
    AND             reduce using rule 158 (EMPTY -> .)
    COMMA           reduce using rule 158 (EMPTY -> .)
    RPAREN          reduce using rule 158 (EMPTY -> .)
    RBRACE          reduce using rule 158 (EMPTY -> .)
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    NEURAL_EXP                     shift and go to state 292
    EMPTY                          shift and go to state 293

state 268

    (118) EXPRESSION_R -> PLUS NEURAL_PLUS . EXPRESSION
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    EXPRESSION                     shift and go to state 294
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 269

    (121) NEURAL_PLUS -> EMPTY .

    ID              reduce using rule 121 (NEURAL_PLUS -> EMPTY .)
    MINUS           reduce using rule 121 (NEURAL_PLUS -> EMPTY .)
    LPAREN          reduce using rule 121 (NEURAL_PLUS -> EMPTY .)
    INT             reduce using rule 121 (NEURAL_PLUS -> EMPTY .)
    FLOAT           reduce using rule 121 (NEURAL_PLUS -> EMPTY .)
    STRING          reduce using rule 121 (NEURAL_PLUS -> EMPTY .)


state 270

    (119) EXPRESSION_R -> MINUS NEURAL_MINUS . EXPRESSION
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    EXPRESSION                     shift and go to state 295
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 271

    (122) NEURAL_MINUS -> EMPTY .

    ID              reduce using rule 122 (NEURAL_MINUS -> EMPTY .)
    MINUS           reduce using rule 122 (NEURAL_MINUS -> EMPTY .)
    LPAREN          reduce using rule 122 (NEURAL_MINUS -> EMPTY .)
    INT             reduce using rule 122 (NEURAL_MINUS -> EMPTY .)
    FLOAT           reduce using rule 122 (NEURAL_MINUS -> EMPTY .)
    STRING          reduce using rule 122 (NEURAL_MINUS -> EMPTY .)


state 272

    (125) TERM_R -> TIMES NEURAL_TIMES . TERM
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    TERM                           shift and go to state 296
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 273

    (128) NEURAL_TIMES -> EMPTY .

    ID              reduce using rule 128 (NEURAL_TIMES -> EMPTY .)
    MINUS           reduce using rule 128 (NEURAL_TIMES -> EMPTY .)
    LPAREN          reduce using rule 128 (NEURAL_TIMES -> EMPTY .)
    INT             reduce using rule 128 (NEURAL_TIMES -> EMPTY .)
    FLOAT           reduce using rule 128 (NEURAL_TIMES -> EMPTY .)
    STRING          reduce using rule 128 (NEURAL_TIMES -> EMPTY .)


state 274

    (126) TERM_R -> DIVIDE NEURAL_DIVIDE . TERM
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    TERM                           shift and go to state 297
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 275

    (129) NEURAL_DIVIDE -> EMPTY .

    ID              reduce using rule 129 (NEURAL_DIVIDE -> EMPTY .)
    MINUS           reduce using rule 129 (NEURAL_DIVIDE -> EMPTY .)
    LPAREN          reduce using rule 129 (NEURAL_DIVIDE -> EMPTY .)
    INT             reduce using rule 129 (NEURAL_DIVIDE -> EMPTY .)
    FLOAT           reduce using rule 129 (NEURAL_DIVIDE -> EMPTY .)
    STRING          reduce using rule 129 (NEURAL_DIVIDE -> EMPTY .)


state 276

    (62) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (47) STATEMENT_R -> . STATEMENT STATEMENT_R
    (48) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (158) EMPTY -> .
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    STATEMENT_R                    shift and go to state 298
    STATEMENT                      shift and go to state 207
    EMPTY                          shift and go to state 208
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 277

    (57) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    BLOCKSTART      shift and go to state 299


state 278

    (59) WHILE_POST_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 59 (WHILE_POST_NEURAL -> EMPTY .)


state 279

    (54) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K . LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    LPAREN          shift and go to state 300


state 280

    (61) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT . DO_K BLOCKSTART STATEMENT_R BLOCKEND

    DO_K            shift and go to state 301


state 281

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND . POST_FUNC PROC_DECL
    (22) POST_FUNC -> . EMPTY
    (158) EMPTY -> .

    FUNCTION_K      reduce using rule 158 (EMPTY -> .)
    MAIN_K          reduce using rule 158 (EMPTY -> .)

    POST_FUNC                      shift and go to state 302
    EMPTY                          shift and go to state 303

state 282

    (30) PROC_BODY -> STATEMENT PROC_BODY_R .

    BLOCKEND        reduce using rule 30 (PROC_BODY -> STATEMENT PROC_BODY_R .)


state 283

    (38) PROC_BODY_R -> PROC_BODY .

    BLOCKEND        reduce using rule 38 (PROC_BODY_R -> PROC_BODY .)


state 284

    (39) PROC_BODY_R -> EMPTY .

    BLOCKEND        reduce using rule 39 (PROC_BODY_R -> EMPTY .)


state 285

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL . BLOCKEND

    BLOCKEND        shift and go to state 304


state 286

    (32) LS_VARDECL -> TYPE . COLON FNVAR_LS SEMICOLON LS_VARDECL_R

    COLON           shift and go to state 305


state 287

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND . POST_FUNC PROC_DECL
    (22) POST_FUNC -> . EMPTY
    (158) EMPTY -> .

    FUNCTION_K      reduce using rule 158 (EMPTY -> .)
    MAIN_K          reduce using rule 158 (EMPTY -> .)

    POST_FUNC                      shift and go to state 306
    EMPTY                          shift and go to state 303

state 288

    (98) EXP_LIST_2 -> COMMA EXP_LIST .

    RPAREN          reduce using rule 98 (EXP_LIST_2 -> COMMA EXP_LIST .)


state 289

    (81) DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R .

    EQUALS          reduce using rule 81 (DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R .)
    COMMA           reduce using rule 81 (DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R .)
    RPAREN          reduce using rule 81 (DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R .)
    SEMICOLON       reduce using rule 81 (DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R .)


state 290

    (83) DIM_AC_R -> DIM_AC .

    EQUALS          reduce using rule 83 (DIM_AC_R -> DIM_AC .)
    COMMA           reduce using rule 83 (DIM_AC_R -> DIM_AC .)
    RPAREN          reduce using rule 83 (DIM_AC_R -> DIM_AC .)
    SEMICOLON       reduce using rule 83 (DIM_AC_R -> DIM_AC .)


state 291

    (84) DIM_AC_R -> EMPTY .

    EQUALS          reduce using rule 84 (DIM_AC_R -> EMPTY .)
    COMMA           reduce using rule 84 (DIM_AC_R -> EMPTY .)
    RPAREN          reduce using rule 84 (DIM_AC_R -> EMPTY .)
    SEMICOLON       reduce using rule 84 (DIM_AC_R -> EMPTY .)


state 292

    (138) S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .

    OR              reduce using rule 138 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    AND             reduce using rule 138 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    COMMA           reduce using rule 138 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    RPAREN          reduce using rule 138 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    RBRACE          reduce using rule 138 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    SEMICOLON       reduce using rule 138 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)


state 293

    (137) NEURAL_EXP -> EMPTY .

    OR              reduce using rule 137 (NEURAL_EXP -> EMPTY .)
    AND             reduce using rule 137 (NEURAL_EXP -> EMPTY .)
    COMMA           reduce using rule 137 (NEURAL_EXP -> EMPTY .)
    RPAREN          reduce using rule 137 (NEURAL_EXP -> EMPTY .)
    RBRACE          reduce using rule 137 (NEURAL_EXP -> EMPTY .)
    SEMICOLON       reduce using rule 137 (NEURAL_EXP -> EMPTY .)


state 294

    (118) EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .

    GT              reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LT              reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LTE             reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    GTE             reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    AND             reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    OR              reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    COMMA           reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    RPAREN          reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    RBRACE          reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    SEMICOLON       reduce using rule 118 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)


state 295

    (119) EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .

    GT              reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LT              reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LTE             reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    GTE             reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    AND             reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    OR              reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    COMMA           reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    RPAREN          reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    RBRACE          reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    SEMICOLON       reduce using rule 119 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)


state 296

    (125) TERM_R -> TIMES NEURAL_TIMES TERM .

    PLUS            reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    MINUS           reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GT              reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LT              reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LTE             reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GTE             reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    DOUBLEEQUAL     reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    AND             reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    OR              reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    COMMA           reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    RPAREN          reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    RBRACE          reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    SEMICOLON       reduce using rule 125 (TERM_R -> TIMES NEURAL_TIMES TERM .)


state 297

    (126) TERM_R -> DIVIDE NEURAL_DIVIDE TERM .

    PLUS            reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    MINUS           reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GT              reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LT              reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LTE             reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GTE             reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    DOUBLEEQUAL     reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    AND             reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    OR              reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    COMMA           reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    RPAREN          reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    RBRACE          reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    SEMICOLON       reduce using rule 126 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)


state 298

    (62) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKEND        shift and go to state 307


state 299

    (57) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (47) STATEMENT_R -> . STATEMENT STATEMENT_R
    (48) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (158) EMPTY -> .
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    STATEMENT_R                    shift and go to state 308
    STATEMENT                      shift and go to state 207
    EMPTY                          shift and go to state 208
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 300

    (54) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN . H_EXPRESSION RPAREN DW_END_NEURAL
    (148) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (136) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (116) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (123) TERM -> . FACTOR NEURAL_TERM TERM_R
    (130) FACTOR -> . ID NEURAL_ID_FAC
    (131) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (132) FACTOR -> . MINUS CONSTANT NEURAL_CNT_FACT
    (133) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (100) CONSTANT -> . INT
    (101) CONSTANT -> . FLOAT
    (102) CONSTANT -> . STRING

    ID              shift and go to state 150
    MINUS           shift and go to state 148
    LPAREN          shift and go to state 133
    INT             shift and go to state 140
    FLOAT           shift and go to state 141
    STRING          shift and go to state 142

    H_EXPRESSION                   shift and go to state 309
    S_EXPRESSION                   shift and go to state 143
    EXPRESSION                     shift and go to state 145
    TERM                           shift and go to state 146
    FACTOR                         shift and go to state 147
    CONSTANT                       shift and go to state 151

state 301

    (61) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 310


state 302

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (158) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 158 (EMPTY -> .)

    PROC_DECL                      shift and go to state 311
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 303

    (22) POST_FUNC -> EMPTY .

    FUNCTION_K      reduce using rule 22 (POST_FUNC -> EMPTY .)
    MAIN_K          reduce using rule 22 (POST_FUNC -> EMPTY .)


state 304

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .

    ID              reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    READ_K          reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    WRITE_K         reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    RETURN_K        reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    IF_K            reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    WHILE_K         reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    DO_K            reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    FOR_K           reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)


state 305

    (32) LS_VARDECL -> TYPE COLON . FNVAR_LS SEMICOLON LS_VARDECL_R
    (35) FNVAR_LS -> . VAR FNVAR_LS2
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (87) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    FNVAR_LS                       shift and go to state 312
    VAR                            shift and go to state 313
    ARRAY                          shift and go to state 44

state 306

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (158) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 158 (EMPTY -> .)

    PROC_DECL                      shift and go to state 314
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 307

    (62) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . DECISION_ALT DECISION_END_NEURAL
    (65) DECISION_ALT -> . ELSE
    (66) DECISION_ALT -> . EMPTY
    (67) ELSE -> . ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
    (158) EMPTY -> .
    (68) ELSE_NEURAL -> . EMPTY

    ID              reduce using rule 158 (EMPTY -> .)
    READ_K          reduce using rule 158 (EMPTY -> .)
    WRITE_K         reduce using rule 158 (EMPTY -> .)
    RETURN_K        reduce using rule 158 (EMPTY -> .)
    IF_K            reduce using rule 158 (EMPTY -> .)
    WHILE_K         reduce using rule 158 (EMPTY -> .)
    DO_K            reduce using rule 158 (EMPTY -> .)
    FOR_K           reduce using rule 158 (EMPTY -> .)
    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    ELSE_K          reduce using rule 158 (EMPTY -> .)

    DECISION_ALT                   shift and go to state 315
    ELSE                           shift and go to state 316
    EMPTY                          shift and go to state 317
    ELSE_NEURAL                    shift and go to state 318

state 308

    (57) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND WHILE_END_NEURAL

    BLOCKEND        shift and go to state 319


state 309

    (54) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION . RPAREN DW_END_NEURAL

    RPAREN          shift and go to state 320


state 310

    (61) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART . STATEMENT_R BLOCKEND
    (47) STATEMENT_R -> . STATEMENT STATEMENT_R
    (48) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (158) EMPTY -> .
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    STATEMENT_R                    shift and go to state 321
    STATEMENT                      shift and go to state 207
    EMPTY                          shift and go to state 208
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 311

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL .

    MAIN_K          reduce using rule 21 (PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL .)


state 312

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS . SEMICOLON LS_VARDECL_R

    SEMICOLON       shift and go to state 322


state 313

    (35) FNVAR_LS -> VAR . FNVAR_LS2
    (36) FNVAR_LS2 -> . COMMA FNVAR_LS
    (37) FNVAR_LS2 -> . EMPTY
    (158) EMPTY -> .

    COMMA           shift and go to state 324
    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    FNVAR_LS2                      shift and go to state 323
    EMPTY                          shift and go to state 325

state 314

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL .

    MAIN_K          reduce using rule 19 (PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL .)


state 315

    (62) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT . DECISION_END_NEURAL
    (64) DECISION_END_NEURAL -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    READ_K          reduce using rule 158 (EMPTY -> .)
    WRITE_K         reduce using rule 158 (EMPTY -> .)
    RETURN_K        reduce using rule 158 (EMPTY -> .)
    IF_K            reduce using rule 158 (EMPTY -> .)
    WHILE_K         reduce using rule 158 (EMPTY -> .)
    DO_K            reduce using rule 158 (EMPTY -> .)
    FOR_K           reduce using rule 158 (EMPTY -> .)
    BLOCKEND        reduce using rule 158 (EMPTY -> .)

    DECISION_END_NEURAL            shift and go to state 326
    EMPTY                          shift and go to state 327

state 316

    (65) DECISION_ALT -> ELSE .

    ID              reduce using rule 65 (DECISION_ALT -> ELSE .)
    READ_K          reduce using rule 65 (DECISION_ALT -> ELSE .)
    WRITE_K         reduce using rule 65 (DECISION_ALT -> ELSE .)
    RETURN_K        reduce using rule 65 (DECISION_ALT -> ELSE .)
    IF_K            reduce using rule 65 (DECISION_ALT -> ELSE .)
    WHILE_K         reduce using rule 65 (DECISION_ALT -> ELSE .)
    DO_K            reduce using rule 65 (DECISION_ALT -> ELSE .)
    FOR_K           reduce using rule 65 (DECISION_ALT -> ELSE .)
    BLOCKEND        reduce using rule 65 (DECISION_ALT -> ELSE .)


state 317

    (66) DECISION_ALT -> EMPTY .
    (68) ELSE_NEURAL -> EMPTY .

    ID              reduce using rule 66 (DECISION_ALT -> EMPTY .)
    READ_K          reduce using rule 66 (DECISION_ALT -> EMPTY .)
    WRITE_K         reduce using rule 66 (DECISION_ALT -> EMPTY .)
    RETURN_K        reduce using rule 66 (DECISION_ALT -> EMPTY .)
    IF_K            reduce using rule 66 (DECISION_ALT -> EMPTY .)
    WHILE_K         reduce using rule 66 (DECISION_ALT -> EMPTY .)
    DO_K            reduce using rule 66 (DECISION_ALT -> EMPTY .)
    FOR_K           reduce using rule 66 (DECISION_ALT -> EMPTY .)
    BLOCKEND        reduce using rule 66 (DECISION_ALT -> EMPTY .)
    ELSE_K          reduce using rule 68 (ELSE_NEURAL -> EMPTY .)


state 318

    (67) ELSE -> ELSE_NEURAL . ELSE_K BLOCKSTART STATEMENT_R BLOCKEND

    ELSE_K          shift and go to state 328


state 319

    (57) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . WHILE_END_NEURAL
    (60) WHILE_END_NEURAL -> . EMPTY
    (158) EMPTY -> .

    ID              reduce using rule 158 (EMPTY -> .)
    READ_K          reduce using rule 158 (EMPTY -> .)
    WRITE_K         reduce using rule 158 (EMPTY -> .)
    RETURN_K        reduce using rule 158 (EMPTY -> .)
    IF_K            reduce using rule 158 (EMPTY -> .)
    WHILE_K         reduce using rule 158 (EMPTY -> .)
    DO_K            reduce using rule 158 (EMPTY -> .)
    FOR_K           reduce using rule 158 (EMPTY -> .)
    BLOCKEND        reduce using rule 158 (EMPTY -> .)

    WHILE_END_NEURAL               shift and go to state 329
    EMPTY                          shift and go to state 330

state 320

    (54) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN . DW_END_NEURAL
    (56) DW_END_NEURAL -> . EMPTY
    (158) EMPTY -> .

    SEMICOLON       reduce using rule 158 (EMPTY -> .)

    DW_END_NEURAL                  shift and go to state 331
    EMPTY                          shift and go to state 332

state 321

    (61) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 333


state 322

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON . LS_VARDECL_R
    (33) LS_VARDECL_R -> . LS_VARDECL
    (34) LS_VARDECL_R -> . EMPTY
    (32) LS_VARDECL -> . TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
    (158) EMPTY -> .
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 286
    LS_VARDECL_R                   shift and go to state 334
    LS_VARDECL                     shift and go to state 335
    EMPTY                          shift and go to state 336

state 323

    (35) FNVAR_LS -> VAR FNVAR_LS2 .

    SEMICOLON       reduce using rule 35 (FNVAR_LS -> VAR FNVAR_LS2 .)


state 324

    (36) FNVAR_LS2 -> COMMA . FNVAR_LS
    (35) FNVAR_LS -> . VAR FNVAR_LS2
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (87) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    FNVAR_LS                       shift and go to state 337
    VAR                            shift and go to state 313
    ARRAY                          shift and go to state 44

state 325

    (37) FNVAR_LS2 -> EMPTY .

    SEMICOLON       reduce using rule 37 (FNVAR_LS2 -> EMPTY .)


state 326

    (62) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .

    ID              reduce using rule 62 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    READ_K          reduce using rule 62 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WRITE_K         reduce using rule 62 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    RETURN_K        reduce using rule 62 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    IF_K            reduce using rule 62 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WHILE_K         reduce using rule 62 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    DO_K            reduce using rule 62 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    FOR_K           reduce using rule 62 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    BLOCKEND        reduce using rule 62 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)


state 327

    (64) DECISION_END_NEURAL -> EMPTY .

    ID              reduce using rule 64 (DECISION_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 64 (DECISION_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 64 (DECISION_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 64 (DECISION_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 64 (DECISION_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 64 (DECISION_END_NEURAL -> EMPTY .)
    DO_K            reduce using rule 64 (DECISION_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 64 (DECISION_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 64 (DECISION_END_NEURAL -> EMPTY .)


state 328

    (67) ELSE -> ELSE_NEURAL ELSE_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 338


state 329

    (57) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .

    ID              reduce using rule 57 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    READ_K          reduce using rule 57 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    WRITE_K         reduce using rule 57 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    RETURN_K        reduce using rule 57 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    IF_K            reduce using rule 57 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    WHILE_K         reduce using rule 57 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    DO_K            reduce using rule 57 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    FOR_K           reduce using rule 57 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    BLOCKEND        reduce using rule 57 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)


state 330

    (60) WHILE_END_NEURAL -> EMPTY .

    ID              reduce using rule 60 (WHILE_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 60 (WHILE_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 60 (WHILE_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 60 (WHILE_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 60 (WHILE_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 60 (WHILE_END_NEURAL -> EMPTY .)
    DO_K            reduce using rule 60 (WHILE_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 60 (WHILE_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 60 (WHILE_END_NEURAL -> EMPTY .)


state 331

    (54) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL .

    SEMICOLON       reduce using rule 54 (DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL .)


state 332

    (56) DW_END_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 56 (DW_END_NEURAL -> EMPTY .)


state 333

    (61) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 61 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 61 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 61 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 61 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 61 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 61 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    DO_K            reduce using rule 61 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 61 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 61 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)


state 334

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R .

    BLOCKEND        reduce using rule 32 (LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R .)


state 335

    (33) LS_VARDECL_R -> LS_VARDECL .

    BLOCKEND        reduce using rule 33 (LS_VARDECL_R -> LS_VARDECL .)


state 336

    (34) LS_VARDECL_R -> EMPTY .

    BLOCKEND        reduce using rule 34 (LS_VARDECL_R -> EMPTY .)


state 337

    (36) FNVAR_LS2 -> COMMA FNVAR_LS .

    SEMICOLON       reduce using rule 36 (FNVAR_LS2 -> COMMA FNVAR_LS .)


state 338

    (67) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART . STATEMENT_R BLOCKEND
    (47) STATEMENT_R -> . STATEMENT STATEMENT_R
    (48) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . RETURN
    (46) STATEMENT -> . FLOW
    (158) EMPTY -> .
    (73) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (74) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL RIGHT_ASSIGN ASSI_H_EXP_NEURAL
    (93) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (103) READ -> . READ_K LPAREN ID_LIST RPAREN
    (108) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (115) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
    (49) FLOW -> . DECISION
    (50) FLOW -> . LOOP
    (85) VAR -> . ID
    (86) VAR -> . ARRAY
    (79) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (62) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (51) LOOP -> . WHILE_LOOP
    (52) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (53) LOOP -> . FOR_LOOP
    (87) ARRAY -> . ID ARR_ID_NP DIM
    (57) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (54) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (61) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 158 (EMPTY -> .)
    ID              shift and go to state 77
    READ_K          shift and go to state 78
    WRITE_K         shift and go to state 79
    RETURN_K        shift and go to state 80
    IF_K            shift and go to state 83
    WHILE_K         shift and go to state 87
    DO_K            shift and go to state 88
    FOR_K           shift and go to state 89

    STATEMENT_R                    shift and go to state 339
    STATEMENT                      shift and go to state 207
    EMPTY                          shift and go to state 208
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    RETURN                         shift and go to state 73
    FLOW                           shift and go to state 74
    VAR                            shift and go to state 75
    ARR_AC                         shift and go to state 76
    DECISION                       shift and go to state 81
    LOOP                           shift and go to state 82
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 84
    DO_WHILE_LOOP                  shift and go to state 85
    FOR_LOOP                       shift and go to state 86

state 339

    (67) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 340


state 340

    (67) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 67 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 67 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 67 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 67 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 67 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 67 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    DO_K            reduce using rule 67 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 67 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 67 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 145 resolved as shift
WARNING: shift/reduce conflict for AND in state 145 resolved as shift
WARNING: reduce/reduce conflict in state 108 resolved using rule (ARR_ID_NP1 -> EMPTY)
WARNING: rejected rule (ARR_ID_NP -> EMPTY) in state 108
WARNING: reduce/reduce conflict in state 178 resolved using rule (CONSTANT_WRITE_N -> EMPTY)
WARNING: rejected rule (NEURAL_CNT_FACT -> EMPTY) in state 178
