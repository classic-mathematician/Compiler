Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK
Rule 2     neural_program_id -> EMPTY
Rule 3     BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
Rule 4     VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND
Rule 5     VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
Rule 6     VAR_DECL_R -> VAR_DECL
Rule 7     VAR_DECL_R -> EMPTY
Rule 8     VAR_LIST -> VAR VAR_LIST2
Rule 9     VAR_LIST2 -> COMMA VAR VAR_LIST2
Rule 10    VAR_LIST2 -> EMPTY
Rule 11    TYPE -> INT_K NEURAL_TYPE
Rule 12    TYPE -> FLOAT_K NEURAL_TYPE
Rule 13    TYPE -> STRING_K NEURAL_TYPE
Rule 14    NEURAL_TYPE -> EMPTY
Rule 15    PROC_BLOCK -> PROC_DECL
Rule 16    PROC_DECL -> PROC_DECL_RETURN
Rule 17    PROC_DECL -> PROC_DECL_VOID
Rule 18    PROC_DECL -> EMPTY
Rule 19    PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
Rule 20    neural_proc_void_id -> EMPTY
Rule 21    PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
Rule 22    POST_FUNC -> EMPTY
Rule 23    neural_proc_return_id -> EMPTY
Rule 24    neural_param_decl -> EMPTY
Rule 25    PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R
Rule 26    PARAM_DECL -> EMPTY
Rule 27    neuro -> EMPTY
Rule 28    PARAM_DECL_R -> COMMA PARAM_DECL
Rule 29    PARAM_DECL_R -> EMPTY
Rule 30    PROC_BODY -> STATEMENT PROC_BODY_R
Rule 31    FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND
Rule 32    LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
Rule 33    LS_VARDECL_R -> LS_VARDECL
Rule 34    LS_VARDECL_R -> EMPTY
Rule 35    FNVAR_LS -> VAR FNVAR_LS2
Rule 36    FNVAR_LS2 -> COMMA FNVAR_LS
Rule 37    FNVAR_LS2 -> EMPTY
Rule 38    PROC_BODY_R -> PROC_BODY
Rule 39    PROC_BODY_R -> EMPTY
Rule 40    STATEMENT -> ASSIGN SEMICOLON
Rule 41    STATEMENT -> ASSIGN1 SEMICOLON
Rule 42    STATEMENT -> FUNC_CALL SEMICOLON
Rule 43    STATEMENT -> READ SEMICOLON
Rule 44    STATEMENT -> WRITE SEMICOLON
Rule 45    STATEMENT -> FLOW
Rule 46    STATEMENT_R -> STATEMENT STATEMENT_R
Rule 47    STATEMENT_R -> EMPTY
Rule 48    FLOW -> DECISION
Rule 49    FLOW -> LOOP
Rule 50    LOOP -> WHILE_LOOP
Rule 51    LOOP -> DO_WHILE_LOOP SEMICOLON
Rule 52    LOOP -> FOR_LOOP
Rule 53    DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
Rule 54    DW_PREV_NEURAL -> EMPTY
Rule 55    DW_END_NEURAL -> EMPTY
Rule 56    WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
Rule 57    WHILE_PREV_NEURAL -> EMPTY
Rule 58    WHILE_POST_NEURAL -> EMPTY
Rule 59    WHILE_END_NEURAL -> EMPTY
Rule 60    FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 61    DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
Rule 62    EXP_RESULT_NEURAL -> EMPTY
Rule 63    DECISION_END_NEURAL -> EMPTY
Rule 64    DECISION_ALT -> ELSE
Rule 65    DECISION_ALT -> EMPTY
Rule 66    ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 67    ELSE_NEURAL -> EMPTY
Rule 68    ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
Rule 69    ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
Rule 70    N -> EMPTY
Rule 71    ASSI_H_EXP_NEURAL -> EMPTY
Rule 72    EQUALS_NEURAL -> EMPTY
Rule 73    ASSIGN_VAR_N -> EMPTY
Rule 74    ARR_AC -> ID ARR_ID_NP1 DIM_AC
Rule 75    ARR_ID_NP1 -> EMPTY
Rule 76    DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R
Rule 77    DIM_AC_PREV -> EMPTY
Rule 78    DIM_AC_R -> DIM_AC
Rule 79    DIM_AC_R -> EMPTY
Rule 80    VAR -> ID
Rule 81    VAR -> ARRAY
Rule 82    ARRAY -> ID ARR_ID_NP DIM
Rule 83    ARR_ID_NP -> EMPTY
Rule 84    DIM -> LBRACE INT LIM_NP RBRACE DIM_R
Rule 85    LIM_NP -> EMPTY
Rule 86    DIM_R -> DIM
Rule 87    DIM_R -> EMPTY
Rule 88    FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
Rule 89    POST_VERIFY -> EMPTY
Rule 90    PRE_VERIFY -> EMPTY
Rule 91    EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2
Rule 92    EXP_NEURAL -> EMPTY
Rule 93    EXP_LIST_2 -> COMMA EXP_LIST
Rule 94    EXP_LIST_2 -> EMPTY
Rule 95    CONSTANT -> INT
Rule 96    CONSTANT -> FLOAT
Rule 97    CONSTANT -> STRING
Rule 98    READ -> READ_K LPAREN ID_LIST RPAREN
Rule 99    ID_LIST -> ID READ_NEURAL ID_LIST_R
Rule 100   READ_NEURAL -> EMPTY
Rule 101   ID_LIST_R -> COMMA ID_LIST
Rule 102   ID_LIST_R -> EMPTY
Rule 103   WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN
Rule 104   WRITE_LIST -> H_EXPRESSION WRITE_LIST_R
Rule 105   WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
Rule 106   CONSTANT_WRITE_N -> EMPTY
Rule 107   WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST
Rule 108   WRITE_LIST_R -> WRITE_NEURAL EMPTY
Rule 109   WRITE_NEURAL -> EMPTY
Rule 110   RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
Rule 111   EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R
Rule 112   NEURAL_EXPRESSION -> EMPTY
Rule 113   EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION
Rule 114   EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION
Rule 115   EXPRESSION_R -> EMPTY
Rule 116   NEURAL_PLUS -> EMPTY
Rule 117   NEURAL_MINUS -> EMPTY
Rule 118   TERM -> FACTOR NEURAL_TERM TERM_R
Rule 119   NEURAL_TERM -> EMPTY
Rule 120   TERM_R -> TIMES NEURAL_TIMES TERM
Rule 121   TERM_R -> DIVIDE NEURAL_DIVIDE TERM
Rule 122   TERM_R -> EMPTY
Rule 123   NEURAL_TIMES -> EMPTY
Rule 124   NEURAL_DIVIDE -> EMPTY
Rule 125   FACTOR -> ID NEURAL_ID_FAC
Rule 126   FACTOR -> CONSTANT NEURAL_CNT_FACT
Rule 127   FACTOR -> LPAREN H_EXPRESSION RPAREN
Rule 128   NEURAL_ID_FAC -> EMPTY
Rule 129   NEURAL_CNT_FACT -> EMPTY
Rule 130   S_EXPRESSION -> EXPRESSION S_EXPRESSION_R
Rule 131   NEURAL_EXP -> EMPTY
Rule 132   S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP
Rule 133   S_EXPRESSION_R -> EMPTY
Rule 134   NEURAL_CONDI -> EMPTY
Rule 135   CONDI -> GT
Rule 136   CONDI -> LT
Rule 137   CONDI -> LTE
Rule 138   CONDI -> GTE
Rule 139   CONDI -> DOUBLEEQUAL
Rule 140   CONDI -> AND
Rule 141   CONDI -> OR
Rule 142   H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R
Rule 143   H_EXPRESSION_R -> OR H_EXPRESSION
Rule 144   H_EXPRESSION_R -> AND H_EXPRESSION
Rule 145   H_EXPRESSION_R -> EMPTY
Rule 146   PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
Rule 147   MAIN_NEURAL -> EMPTY
Rule 148   PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R
Rule 149   PRINCIPAL_BODY -> EMPTY
Rule 150   PRINCIPAL_BODY_R -> PRINCIPAL_BODY
Rule 151   EMPTY -> <empty>

Terminals, with rules where they appear

AND                  : 140 144
BLOCKEND             : 4 19 21 31 53 56 60 61 66 146
BLOCKSTART           : 4 19 21 31 53 56 60 61 66 146
COLON                : 5 32
COMMA                : 9 28 36 93 101 107
COMMENT              : 
DIVIDE               : 121
DOUBLEEQUAL          : 139
DO_K                 : 53 60
ELSE_K               : 66
EQUALS               : 60 68 69
FLOAT                : 96
FLOAT_K              : 12
FOR_K                : 60
FUNCTION_K           : 19 21
GT                   : 135
GTE                  : 138
ID                   : 1 19 21 60 74 80 82 88 99 125
IF_K                 : 61
INT                  : 60 60 84 95
INT_K                : 11
LBRACE               : 76 84
LPAREN               : 19 21 53 56 61 88 98 103 110 127 146
LT                   : 136
LTE                  : 137
MAIN_K               : 146
MINUS                : 114
OR                   : 141 143
PLUS                 : 113
PROGRAM_K            : 1
RBRACE               : 76 84
READ_K               : 98
RETURN_K             : 110
RPAREN               : 19 21 53 56 61 88 98 103 110 127 146
SEMICOLON            : 1 5 32 40 41 42 43 44 51 110
STRING               : 97
STRING_K             : 13
TIMES                : 120
TO_K                 : 60
VARS_K               : 4 31
VOID_K               : 19
WHILE_K              : 53 56
WRITE_K              : 103
error                : 

Nonterminals, with rules where they appear

ARRAY                : 81
ARR_AC               : 69
ARR_ID_NP            : 82
ARR_ID_NP1           : 74
ASSIGN               : 40
ASSIGN1              : 41
ASSIGN_VAR_N         : 68 69
ASSI_H_EXP_NEURAL    : 68 69
BLOCK                : 1
CONDI                : 132
CONSTANT             : 105 126
CONSTANT_WRITE_N     : 105
DECISION             : 48
DECISION_ALT         : 61
DECISION_END_NEURAL  : 61
DIM                  : 82 86
DIM_AC               : 74 78
DIM_AC_PREV          : 76
DIM_AC_R             : 76
DIM_R                : 84
DO_WHILE_LOOP        : 51
DW_END_NEURAL        : 53
DW_PREV_NEURAL       : 53
ELSE                 : 64
ELSE_NEURAL          : 66
EMPTY                : 2 7 10 14 18 20 22 23 24 26 27 29 34 37 39 47 54 55 57 58 59 62 63 65 67 70 71 72 73 75 77 79 83 85 87 89 90 92 94 100 102 106 108 109 112 115 116 117 119 122 123 124 128 129 131 133 134 145 147 149
EQUALS_NEURAL        : 68 69
EXPRESSION           : 113 114 130 132
EXPRESSION_R         : 111
EXP_LIST             : 88 93
EXP_LIST_2           : 91
EXP_NEURAL           : 91
EXP_RESULT_NEURAL    : 61
FACTOR               : 118
FLOW                 : 45
FNVAR_LS             : 32 36
FNVAR_LS2            : 35
FN_VARBLOCK          : 19 21
FOR_LOOP             : 52
FUNC_CALL            : 42
H_EXPRESSION         : 53 56 61 68 69 76 91 104 110 127 143 144
H_EXPRESSION_R       : 142
ID_LIST              : 98 101
ID_LIST_R            : 99
LIM_NP               : 84
LOOP                 : 49
LS_VARDECL           : 31 33
LS_VARDECL_R         : 32
MAIN_NEURAL          : 146
N                    : 
NEURAL_CNT_FACT      : 126
NEURAL_CONDI         : 132
NEURAL_DIVIDE        : 121
NEURAL_EXP           : 132
NEURAL_EXPRESSION    : 111
NEURAL_ID_FAC        : 125
NEURAL_MINUS         : 114
NEURAL_PLUS          : 113
NEURAL_TERM          : 118
NEURAL_TIMES         : 120
NEURAL_TYPE          : 11 12 13
PARAM_DECL           : 19 21 28
PARAM_DECL_R         : 25
POST_FUNC            : 19 21
POST_VERIFY          : 88
PRE_VERIFY           : 88
PRINCIPAL_BLOCK      : 3
PRINCIPAL_BODY       : 146 150
PRINCIPAL_BODY_R     : 148
PROC_BLOCK           : 3
PROC_BODY            : 19 21 38
PROC_BODY_R          : 30
PROC_DECL            : 15 19 21
PROC_DECL_RETURN     : 16
PROC_DECL_VOID       : 17
PROGRAM              : 0
READ                 : 43
READ_NEURAL          : 99
RETURN               : 21
STATEMENT            : 30 46 148
STATEMENT_R          : 46 53 56 60 61 66
S_EXPRESSION         : 142
S_EXPRESSION_R       : 130
TERM                 : 111 120 121
TERM_R               : 118
TYPE                 : 5 21 25 32
VAR                  : 8 9 25 35 68
VAR_BLOCK            : 3
VAR_DECL             : 4 6
VAR_DECL_R           : 5
VAR_LIST             : 5
VAR_LIST2            : 8 9
WHILE_END_NEURAL     : 56
WHILE_LOOP           : 50
WHILE_POST_NEURAL    : 56
WHILE_PREV_NEURAL    : 56
WRITE                : 44
WRITE_LIST           : 103 107
WRITE_LIST_R         : 104 105
WRITE_NEURAL         : 107 108
neural_param_decl    : 19 21
neural_proc_return_id : 21
neural_proc_void_id  : 19
neural_program_id    : 1
neuro                : 25

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROGRAM_K ID neural_program_id SEMICOLON BLOCK

    PROGRAM_K       shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROGRAM_K . ID neural_program_id SEMICOLON BLOCK

    ID              shift and go to state 3


state 3

    (1) PROGRAM -> PROGRAM_K ID . neural_program_id SEMICOLON BLOCK
    (2) neural_program_id -> . EMPTY
    (151) EMPTY -> .

    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    neural_program_id              shift and go to state 4
    EMPTY                          shift and go to state 5

state 4

    (1) PROGRAM -> PROGRAM_K ID neural_program_id . SEMICOLON BLOCK

    SEMICOLON       shift and go to state 6


state 5

    (2) neural_program_id -> EMPTY .

    SEMICOLON       reduce using rule 2 (neural_program_id -> EMPTY .)


state 6

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON . BLOCK
    (3) BLOCK -> . VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
    (4) VAR_BLOCK -> . VARS_K BLOCKSTART VAR_DECL BLOCKEND

    VARS_K          shift and go to state 9

    BLOCK                          shift and go to state 7
    VAR_BLOCK                      shift and go to state 8

state 7

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .

    $end            reduce using rule 1 (PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .)


state 8

    (3) BLOCK -> VAR_BLOCK . PROC_BLOCK PRINCIPAL_BLOCK
    (15) PROC_BLOCK -> . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (151) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 151 (EMPTY -> .)

    PROC_BLOCK                     shift and go to state 10
    PROC_DECL                      shift and go to state 11
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 9

    (4) VAR_BLOCK -> VARS_K . BLOCKSTART VAR_DECL BLOCKEND

    BLOCKSTART      shift and go to state 16


state 10

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK . PRINCIPAL_BLOCK
    (146) PRINCIPAL_BLOCK -> . MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    MAIN_K          shift and go to state 18

    PRINCIPAL_BLOCK                shift and go to state 17

state 11

    (15) PROC_BLOCK -> PROC_DECL .

    MAIN_K          reduce using rule 15 (PROC_BLOCK -> PROC_DECL .)


state 12

    (16) PROC_DECL -> PROC_DECL_RETURN .

    MAIN_K          reduce using rule 16 (PROC_DECL -> PROC_DECL_RETURN .)


state 13

    (17) PROC_DECL -> PROC_DECL_VOID .

    MAIN_K          reduce using rule 17 (PROC_DECL -> PROC_DECL_VOID .)


state 14

    (18) PROC_DECL -> EMPTY .

    MAIN_K          reduce using rule 18 (PROC_DECL -> EMPTY .)


state 15

    (21) PROC_DECL_RETURN -> FUNCTION_K . TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> FUNCTION_K . VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    VOID_K          shift and go to state 20
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 19

state 16

    (4) VAR_BLOCK -> VARS_K BLOCKSTART . VAR_DECL BLOCKEND
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    VAR_DECL                       shift and go to state 24
    TYPE                           shift and go to state 25

state 17

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .

    $end            reduce using rule 3 (BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .)


state 18

    (146) PRINCIPAL_BLOCK -> MAIN_K . MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
    (147) MAIN_NEURAL -> . EMPTY
    (151) EMPTY -> .

    LPAREN          reduce using rule 151 (EMPTY -> .)

    MAIN_NEURAL                    shift and go to state 26
    EMPTY                          shift and go to state 27

state 19

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE . ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    ID              shift and go to state 28


state 20

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K . ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    ID              shift and go to state 29


state 21

    (11) TYPE -> INT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    COLON           reduce using rule 151 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 30
    EMPTY                          shift and go to state 31

state 22

    (12) TYPE -> FLOAT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    COLON           reduce using rule 151 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 32
    EMPTY                          shift and go to state 31

state 23

    (13) TYPE -> STRING_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    COLON           reduce using rule 151 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 33
    EMPTY                          shift and go to state 31

state 24

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL . BLOCKEND

    BLOCKEND        shift and go to state 34


state 25

    (5) VAR_DECL -> TYPE . COLON VAR_LIST SEMICOLON VAR_DECL_R

    COLON           shift and go to state 35


state 26

    (146) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL . LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    LPAREN          shift and go to state 36


state 27

    (147) MAIN_NEURAL -> EMPTY .

    LPAREN          reduce using rule 147 (MAIN_NEURAL -> EMPTY .)


state 28

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID . neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (23) neural_proc_return_id -> . EMPTY
    (151) EMPTY -> .

    LPAREN          reduce using rule 151 (EMPTY -> .)

    neural_proc_return_id          shift and go to state 37
    EMPTY                          shift and go to state 38

state 29

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID . neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (20) neural_proc_void_id -> . EMPTY
    (151) EMPTY -> .

    LPAREN          reduce using rule 151 (EMPTY -> .)

    neural_proc_void_id            shift and go to state 39
    EMPTY                          shift and go to state 40

state 30

    (11) TYPE -> INT_K NEURAL_TYPE .

    ID              reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)
    COLON           reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)


state 31

    (14) NEURAL_TYPE -> EMPTY .

    ID              reduce using rule 14 (NEURAL_TYPE -> EMPTY .)
    COLON           reduce using rule 14 (NEURAL_TYPE -> EMPTY .)


state 32

    (12) TYPE -> FLOAT_K NEURAL_TYPE .

    ID              reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)
    COLON           reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)


state 33

    (13) TYPE -> STRING_K NEURAL_TYPE .

    ID              reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)
    COLON           reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)


state 34

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .

    FUNCTION_K      reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)
    MAIN_K          reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)


state 35

    (5) VAR_DECL -> TYPE COLON . VAR_LIST SEMICOLON VAR_DECL_R
    (8) VAR_LIST -> . VAR VAR_LIST2
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (82) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    VAR_LIST                       shift and go to state 41
    VAR                            shift and go to state 42
    ARRAY                          shift and go to state 44

state 36

    (146) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN . RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    RPAREN          shift and go to state 45


state 37

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    LPAREN          shift and go to state 46


state 38

    (23) neural_proc_return_id -> EMPTY .

    LPAREN          reduce using rule 23 (neural_proc_return_id -> EMPTY .)


state 39

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    LPAREN          shift and go to state 47


state 40

    (20) neural_proc_void_id -> EMPTY .

    LPAREN          reduce using rule 20 (neural_proc_void_id -> EMPTY .)


state 41

    (5) VAR_DECL -> TYPE COLON VAR_LIST . SEMICOLON VAR_DECL_R

    SEMICOLON       shift and go to state 48


state 42

    (8) VAR_LIST -> VAR . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA VAR VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (151) EMPTY -> .

    COMMA           shift and go to state 50
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 49
    EMPTY                          shift and go to state 51

state 43

    (80) VAR -> ID .
    (82) ARRAY -> ID . ARR_ID_NP DIM
    (83) ARR_ID_NP -> . EMPTY
    (151) EMPTY -> .

    COMMA           reduce using rule 80 (VAR -> ID .)
    SEMICOLON       reduce using rule 80 (VAR -> ID .)
    RPAREN          reduce using rule 80 (VAR -> ID .)
    LBRACE          reduce using rule 151 (EMPTY -> .)

    ARR_ID_NP                      shift and go to state 52
    EMPTY                          shift and go to state 53

state 44

    (81) VAR -> ARRAY .

    COMMA           reduce using rule 81 (VAR -> ARRAY .)
    SEMICOLON       reduce using rule 81 (VAR -> ARRAY .)
    EQUALS          reduce using rule 81 (VAR -> ARRAY .)
    RPAREN          reduce using rule 81 (VAR -> ARRAY .)


state 45

    (146) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN . BLOCKSTART PRINCIPAL_BODY BLOCKEND

    BLOCKSTART      shift and go to state 54


state 46

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (25) PARAM_DECL -> . TYPE VAR neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (151) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 151 (EMPTY -> .)

    TYPE                           shift and go to state 55
    PARAM_DECL                     shift and go to state 56
    EMPTY                          shift and go to state 57

state 47

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (25) PARAM_DECL -> . TYPE VAR neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (151) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 151 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 58
    TYPE                           shift and go to state 55
    EMPTY                          shift and go to state 57

state 48

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON . VAR_DECL_R
    (6) VAR_DECL_R -> . VAR_DECL
    (7) VAR_DECL_R -> . EMPTY
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (151) EMPTY -> .
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 25
    VAR_DECL_R                     shift and go to state 59
    VAR_DECL                       shift and go to state 60
    EMPTY                          shift and go to state 61

state 49

    (8) VAR_LIST -> VAR VAR_LIST2 .

    SEMICOLON       reduce using rule 8 (VAR_LIST -> VAR VAR_LIST2 .)


state 50

    (9) VAR_LIST2 -> COMMA . VAR VAR_LIST2
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (82) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    VAR                            shift and go to state 62
    ARRAY                          shift and go to state 44

state 51

    (10) VAR_LIST2 -> EMPTY .

    SEMICOLON       reduce using rule 10 (VAR_LIST2 -> EMPTY .)


state 52

    (82) ARRAY -> ID ARR_ID_NP . DIM
    (84) DIM -> . LBRACE INT LIM_NP RBRACE DIM_R

    LBRACE          shift and go to state 64

    DIM                            shift and go to state 63

state 53

    (83) ARR_ID_NP -> EMPTY .

    LBRACE          reduce using rule 83 (ARR_ID_NP -> EMPTY .)


state 54

    (146) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART . PRINCIPAL_BODY BLOCKEND
    (148) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (149) PRINCIPAL_BODY -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (151) EMPTY -> .
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    PRINCIPAL_BODY                 shift and go to state 65
    STATEMENT                      shift and go to state 66
    EMPTY                          shift and go to state 67
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 55

    (25) PARAM_DECL -> TYPE . VAR neuro PARAM_DECL_R
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (82) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    VAR                            shift and go to state 88
    ARRAY                          shift and go to state 44

state 56

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    RPAREN          shift and go to state 89


state 57

    (26) PARAM_DECL -> EMPTY .

    RPAREN          reduce using rule 26 (PARAM_DECL -> EMPTY .)


state 58

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    RPAREN          shift and go to state 90


state 59

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .

    BLOCKEND        reduce using rule 5 (VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .)


state 60

    (6) VAR_DECL_R -> VAR_DECL .

    BLOCKEND        reduce using rule 6 (VAR_DECL_R -> VAR_DECL .)


state 61

    (7) VAR_DECL_R -> EMPTY .

    BLOCKEND        reduce using rule 7 (VAR_DECL_R -> EMPTY .)


state 62

    (9) VAR_LIST2 -> COMMA VAR . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA VAR VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (151) EMPTY -> .

    COMMA           shift and go to state 50
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 91
    EMPTY                          shift and go to state 51

state 63

    (82) ARRAY -> ID ARR_ID_NP DIM .

    COMMA           reduce using rule 82 (ARRAY -> ID ARR_ID_NP DIM .)
    SEMICOLON       reduce using rule 82 (ARRAY -> ID ARR_ID_NP DIM .)
    EQUALS          reduce using rule 82 (ARRAY -> ID ARR_ID_NP DIM .)
    RPAREN          reduce using rule 82 (ARRAY -> ID ARR_ID_NP DIM .)


state 64

    (84) DIM -> LBRACE . INT LIM_NP RBRACE DIM_R

    INT             shift and go to state 92


state 65

    (146) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY . BLOCKEND

    BLOCKEND        shift and go to state 93


state 66

    (148) PRINCIPAL_BODY -> STATEMENT . PRINCIPAL_BODY_R
    (150) PRINCIPAL_BODY_R -> . PRINCIPAL_BODY
    (148) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (149) PRINCIPAL_BODY -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (151) EMPTY -> .
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    STATEMENT                      shift and go to state 66
    PRINCIPAL_BODY_R               shift and go to state 94
    PRINCIPAL_BODY                 shift and go to state 95
    EMPTY                          shift and go to state 67
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 67

    (149) PRINCIPAL_BODY -> EMPTY .

    BLOCKEND        reduce using rule 149 (PRINCIPAL_BODY -> EMPTY .)


state 68

    (40) STATEMENT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 96


state 69

    (41) STATEMENT -> ASSIGN1 . SEMICOLON

    SEMICOLON       shift and go to state 97


state 70

    (42) STATEMENT -> FUNC_CALL . SEMICOLON

    SEMICOLON       shift and go to state 98


state 71

    (43) STATEMENT -> READ . SEMICOLON

    SEMICOLON       shift and go to state 99


state 72

    (44) STATEMENT -> WRITE . SEMICOLON

    SEMICOLON       shift and go to state 100


state 73

    (45) STATEMENT -> FLOW .

    ID              reduce using rule 45 (STATEMENT -> FLOW .)
    READ_K          reduce using rule 45 (STATEMENT -> FLOW .)
    WRITE_K         reduce using rule 45 (STATEMENT -> FLOW .)
    IF_K            reduce using rule 45 (STATEMENT -> FLOW .)
    WHILE_K         reduce using rule 45 (STATEMENT -> FLOW .)
    DO_K            reduce using rule 45 (STATEMENT -> FLOW .)
    FOR_K           reduce using rule 45 (STATEMENT -> FLOW .)
    BLOCKEND        reduce using rule 45 (STATEMENT -> FLOW .)
    RETURN_K        reduce using rule 45 (STATEMENT -> FLOW .)


state 74

    (68) ASSIGN -> VAR . ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (73) ASSIGN_VAR_N -> . EMPTY
    (151) EMPTY -> .

    EQUALS          reduce using rule 151 (EMPTY -> .)

    ASSIGN_VAR_N                   shift and go to state 101
    EMPTY                          shift and go to state 102

state 75

    (69) ASSIGN1 -> ARR_AC . ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (73) ASSIGN_VAR_N -> . EMPTY
    (151) EMPTY -> .

    EQUALS          reduce using rule 151 (EMPTY -> .)

    ASSIGN_VAR_N                   shift and go to state 103
    EMPTY                          shift and go to state 102

state 76

    (88) FUNC_CALL -> ID . PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (80) VAR -> ID .
    (74) ARR_AC -> ID . ARR_ID_NP1 DIM_AC
    (82) ARRAY -> ID . ARR_ID_NP DIM
    (90) PRE_VERIFY -> . EMPTY
    (75) ARR_ID_NP1 -> . EMPTY
    (83) ARR_ID_NP -> . EMPTY
    (151) EMPTY -> .

    EQUALS          reduce using rule 80 (VAR -> ID .)
    LPAREN          reduce using rule 151 (EMPTY -> .)
    LBRACE          reduce using rule 151 (EMPTY -> .)

    PRE_VERIFY                     shift and go to state 104
    ARR_ID_NP1                     shift and go to state 105
    ARR_ID_NP                      shift and go to state 52
    EMPTY                          shift and go to state 106

state 77

    (98) READ -> READ_K . LPAREN ID_LIST RPAREN

    LPAREN          shift and go to state 107


state 78

    (103) WRITE -> WRITE_K . LPAREN WRITE_LIST RPAREN

    LPAREN          shift and go to state 108


state 79

    (48) FLOW -> DECISION .

    ID              reduce using rule 48 (FLOW -> DECISION .)
    READ_K          reduce using rule 48 (FLOW -> DECISION .)
    WRITE_K         reduce using rule 48 (FLOW -> DECISION .)
    IF_K            reduce using rule 48 (FLOW -> DECISION .)
    WHILE_K         reduce using rule 48 (FLOW -> DECISION .)
    DO_K            reduce using rule 48 (FLOW -> DECISION .)
    FOR_K           reduce using rule 48 (FLOW -> DECISION .)
    BLOCKEND        reduce using rule 48 (FLOW -> DECISION .)
    RETURN_K        reduce using rule 48 (FLOW -> DECISION .)


state 80

    (49) FLOW -> LOOP .

    ID              reduce using rule 49 (FLOW -> LOOP .)
    READ_K          reduce using rule 49 (FLOW -> LOOP .)
    WRITE_K         reduce using rule 49 (FLOW -> LOOP .)
    IF_K            reduce using rule 49 (FLOW -> LOOP .)
    WHILE_K         reduce using rule 49 (FLOW -> LOOP .)
    DO_K            reduce using rule 49 (FLOW -> LOOP .)
    FOR_K           reduce using rule 49 (FLOW -> LOOP .)
    BLOCKEND        reduce using rule 49 (FLOW -> LOOP .)
    RETURN_K        reduce using rule 49 (FLOW -> LOOP .)


state 81

    (61) DECISION -> IF_K . LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    LPAREN          shift and go to state 109


state 82

    (50) LOOP -> WHILE_LOOP .

    ID              reduce using rule 50 (LOOP -> WHILE_LOOP .)
    READ_K          reduce using rule 50 (LOOP -> WHILE_LOOP .)
    WRITE_K         reduce using rule 50 (LOOP -> WHILE_LOOP .)
    IF_K            reduce using rule 50 (LOOP -> WHILE_LOOP .)
    WHILE_K         reduce using rule 50 (LOOP -> WHILE_LOOP .)
    DO_K            reduce using rule 50 (LOOP -> WHILE_LOOP .)
    FOR_K           reduce using rule 50 (LOOP -> WHILE_LOOP .)
    BLOCKEND        reduce using rule 50 (LOOP -> WHILE_LOOP .)
    RETURN_K        reduce using rule 50 (LOOP -> WHILE_LOOP .)


state 83

    (51) LOOP -> DO_WHILE_LOOP . SEMICOLON

    SEMICOLON       shift and go to state 110


state 84

    (52) LOOP -> FOR_LOOP .

    ID              reduce using rule 52 (LOOP -> FOR_LOOP .)
    READ_K          reduce using rule 52 (LOOP -> FOR_LOOP .)
    WRITE_K         reduce using rule 52 (LOOP -> FOR_LOOP .)
    IF_K            reduce using rule 52 (LOOP -> FOR_LOOP .)
    WHILE_K         reduce using rule 52 (LOOP -> FOR_LOOP .)
    DO_K            reduce using rule 52 (LOOP -> FOR_LOOP .)
    FOR_K           reduce using rule 52 (LOOP -> FOR_LOOP .)
    BLOCKEND        reduce using rule 52 (LOOP -> FOR_LOOP .)
    RETURN_K        reduce using rule 52 (LOOP -> FOR_LOOP .)


state 85

    (56) WHILE_LOOP -> WHILE_K . WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (57) WHILE_PREV_NEURAL -> . EMPTY
    (151) EMPTY -> .

    LPAREN          reduce using rule 151 (EMPTY -> .)

    WHILE_PREV_NEURAL              shift and go to state 111
    EMPTY                          shift and go to state 112

state 86

    (53) DO_WHILE_LOOP -> DO_K . DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (54) DW_PREV_NEURAL -> . EMPTY
    (151) EMPTY -> .

    BLOCKSTART      reduce using rule 151 (EMPTY -> .)

    DW_PREV_NEURAL                 shift and go to state 113
    EMPTY                          shift and go to state 114

state 87

    (60) FOR_LOOP -> FOR_K . ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 115


state 88

    (25) PARAM_DECL -> TYPE VAR . neuro PARAM_DECL_R
    (27) neuro -> . EMPTY
    (151) EMPTY -> .

    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)

    neuro                          shift and go to state 116
    EMPTY                          shift and go to state 117

state 89

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (24) neural_param_decl -> . EMPTY
    (151) EMPTY -> .

    BLOCKSTART      reduce using rule 151 (EMPTY -> .)

    neural_param_decl              shift and go to state 118
    EMPTY                          shift and go to state 119

state 90

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (24) neural_param_decl -> . EMPTY
    (151) EMPTY -> .

    BLOCKSTART      reduce using rule 151 (EMPTY -> .)

    neural_param_decl              shift and go to state 120
    EMPTY                          shift and go to state 119

state 91

    (9) VAR_LIST2 -> COMMA VAR VAR_LIST2 .

    SEMICOLON       reduce using rule 9 (VAR_LIST2 -> COMMA VAR VAR_LIST2 .)


state 92

    (84) DIM -> LBRACE INT . LIM_NP RBRACE DIM_R
    (85) LIM_NP -> . EMPTY
    (151) EMPTY -> .

    RBRACE          reduce using rule 151 (EMPTY -> .)

    LIM_NP                         shift and go to state 121
    EMPTY                          shift and go to state 122

state 93

    (146) PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .

    $end            reduce using rule 146 (PRINCIPAL_BLOCK -> MAIN_K MAIN_NEURAL LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .)


state 94

    (148) PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .

    BLOCKEND        reduce using rule 148 (PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .)


state 95

    (150) PRINCIPAL_BODY_R -> PRINCIPAL_BODY .

    BLOCKEND        reduce using rule 150 (PRINCIPAL_BODY_R -> PRINCIPAL_BODY .)


state 96

    (40) STATEMENT -> ASSIGN SEMICOLON .

    ID              reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    READ_K          reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    WRITE_K         reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    IF_K            reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    WHILE_K         reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    DO_K            reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    FOR_K           reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    BLOCKEND        reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)
    RETURN_K        reduce using rule 40 (STATEMENT -> ASSIGN SEMICOLON .)


state 97

    (41) STATEMENT -> ASSIGN1 SEMICOLON .

    ID              reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    READ_K          reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    WRITE_K         reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    IF_K            reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    WHILE_K         reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    DO_K            reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    FOR_K           reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    BLOCKEND        reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)
    RETURN_K        reduce using rule 41 (STATEMENT -> ASSIGN1 SEMICOLON .)


state 98

    (42) STATEMENT -> FUNC_CALL SEMICOLON .

    ID              reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    READ_K          reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WRITE_K         reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    IF_K            reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WHILE_K         reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    DO_K            reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    FOR_K           reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    BLOCKEND        reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)
    RETURN_K        reduce using rule 42 (STATEMENT -> FUNC_CALL SEMICOLON .)


state 99

    (43) STATEMENT -> READ SEMICOLON .

    ID              reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    READ_K          reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    WRITE_K         reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    IF_K            reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    WHILE_K         reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    DO_K            reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    FOR_K           reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    BLOCKEND        reduce using rule 43 (STATEMENT -> READ SEMICOLON .)
    RETURN_K        reduce using rule 43 (STATEMENT -> READ SEMICOLON .)


state 100

    (44) STATEMENT -> WRITE SEMICOLON .

    ID              reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    READ_K          reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    WRITE_K         reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    IF_K            reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    WHILE_K         reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    DO_K            reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    FOR_K           reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    BLOCKEND        reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)
    RETURN_K        reduce using rule 44 (STATEMENT -> WRITE SEMICOLON .)


state 101

    (68) ASSIGN -> VAR ASSIGN_VAR_N . EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL

    EQUALS          shift and go to state 123


state 102

    (73) ASSIGN_VAR_N -> EMPTY .

    EQUALS          reduce using rule 73 (ASSIGN_VAR_N -> EMPTY .)


state 103

    (69) ASSIGN1 -> ARR_AC ASSIGN_VAR_N . EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL

    EQUALS          shift and go to state 124


state 104

    (88) FUNC_CALL -> ID PRE_VERIFY . LPAREN EXP_LIST POST_VERIFY RPAREN

    LPAREN          shift and go to state 125


state 105

    (74) ARR_AC -> ID ARR_ID_NP1 . DIM_AC
    (76) DIM_AC -> . LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R

    LBRACE          shift and go to state 127

    DIM_AC                         shift and go to state 126

state 106

    (90) PRE_VERIFY -> EMPTY .
    (75) ARR_ID_NP1 -> EMPTY .
    (83) ARR_ID_NP -> EMPTY .

  ! reduce/reduce conflict for LBRACE resolved using rule 75 (ARR_ID_NP1 -> EMPTY .)
    LPAREN          reduce using rule 90 (PRE_VERIFY -> EMPTY .)
    LBRACE          reduce using rule 75 (ARR_ID_NP1 -> EMPTY .)

  ! LBRACE          [ reduce using rule 83 (ARR_ID_NP -> EMPTY .) ]


state 107

    (98) READ -> READ_K LPAREN . ID_LIST RPAREN
    (99) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 129

    ID_LIST                        shift and go to state 128

state 108

    (103) WRITE -> WRITE_K LPAREN . WRITE_LIST RPAREN
    (104) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (105) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137
    ID              shift and go to state 141
    LPAREN          shift and go to state 130

    WRITE_LIST                     shift and go to state 131
    H_EXPRESSION                   shift and go to state 132
    CONSTANT                       shift and go to state 133
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140

state 109

    (61) DECISION -> IF_K LPAREN . H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    H_EXPRESSION                   shift and go to state 142
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 110

    (51) LOOP -> DO_WHILE_LOOP SEMICOLON .

    ID              reduce using rule 51 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    READ_K          reduce using rule 51 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    WRITE_K         reduce using rule 51 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    IF_K            reduce using rule 51 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    WHILE_K         reduce using rule 51 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    DO_K            reduce using rule 51 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    FOR_K           reduce using rule 51 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    BLOCKEND        reduce using rule 51 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    RETURN_K        reduce using rule 51 (LOOP -> DO_WHILE_LOOP SEMICOLON .)


state 111

    (56) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL . LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    LPAREN          shift and go to state 144


state 112

    (57) WHILE_PREV_NEURAL -> EMPTY .

    LPAREN          reduce using rule 57 (WHILE_PREV_NEURAL -> EMPTY .)


state 113

    (53) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    BLOCKSTART      shift and go to state 145


state 114

    (54) DW_PREV_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 54 (DW_PREV_NEURAL -> EMPTY .)


state 115

    (60) FOR_LOOP -> FOR_K ID . EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    EQUALS          shift and go to state 146


state 116

    (25) PARAM_DECL -> TYPE VAR neuro . PARAM_DECL_R
    (28) PARAM_DECL_R -> . COMMA PARAM_DECL
    (29) PARAM_DECL_R -> . EMPTY
    (151) EMPTY -> .

    COMMA           shift and go to state 148
    RPAREN          reduce using rule 151 (EMPTY -> .)

    PARAM_DECL_R                   shift and go to state 147
    EMPTY                          shift and go to state 149

state 117

    (27) neuro -> EMPTY .

    COMMA           reduce using rule 27 (neuro -> EMPTY .)
    RPAREN          reduce using rule 27 (neuro -> EMPTY .)


state 118

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL

    BLOCKSTART      shift and go to state 150


state 119

    (24) neural_param_decl -> EMPTY .

    BLOCKSTART      reduce using rule 24 (neural_param_decl -> EMPTY .)


state 120

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL

    BLOCKSTART      shift and go to state 151


state 121

    (84) DIM -> LBRACE INT LIM_NP . RBRACE DIM_R

    RBRACE          shift and go to state 152


state 122

    (85) LIM_NP -> EMPTY .

    RBRACE          reduce using rule 85 (LIM_NP -> EMPTY .)


state 123

    (68) ASSIGN -> VAR ASSIGN_VAR_N EQUALS . EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (72) EQUALS_NEURAL -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    LPAREN          reduce using rule 151 (EMPTY -> .)
    INT             reduce using rule 151 (EMPTY -> .)
    FLOAT           reduce using rule 151 (EMPTY -> .)
    STRING          reduce using rule 151 (EMPTY -> .)

    EQUALS_NEURAL                  shift and go to state 153
    EMPTY                          shift and go to state 154

state 124

    (69) ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS . EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (72) EQUALS_NEURAL -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    LPAREN          reduce using rule 151 (EMPTY -> .)
    INT             reduce using rule 151 (EMPTY -> .)
    FLOAT           reduce using rule 151 (EMPTY -> .)
    STRING          reduce using rule 151 (EMPTY -> .)

    EQUALS_NEURAL                  shift and go to state 155
    EMPTY                          shift and go to state 154

state 125

    (88) FUNC_CALL -> ID PRE_VERIFY LPAREN . EXP_LIST POST_VERIFY RPAREN
    (91) EXP_LIST -> . H_EXPRESSION EXP_NEURAL EXP_LIST_2
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    EXP_LIST                       shift and go to state 156
    H_EXPRESSION                   shift and go to state 157
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 126

    (74) ARR_AC -> ID ARR_ID_NP1 DIM_AC .

    EQUALS          reduce using rule 74 (ARR_AC -> ID ARR_ID_NP1 DIM_AC .)


state 127

    (76) DIM_AC -> LBRACE . H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    H_EXPRESSION                   shift and go to state 158
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 128

    (98) READ -> READ_K LPAREN ID_LIST . RPAREN

    RPAREN          shift and go to state 159


state 129

    (99) ID_LIST -> ID . READ_NEURAL ID_LIST_R
    (100) READ_NEURAL -> . EMPTY
    (151) EMPTY -> .

    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)

    READ_NEURAL                    shift and go to state 160
    EMPTY                          shift and go to state 161

state 130

    (127) FACTOR -> LPAREN . H_EXPRESSION RPAREN
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    H_EXPRESSION                   shift and go to state 162
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 131

    (103) WRITE -> WRITE_K LPAREN WRITE_LIST . RPAREN

    RPAREN          shift and go to state 163


state 132

    (104) WRITE_LIST -> H_EXPRESSION . WRITE_LIST_R
    (107) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (108) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (109) WRITE_NEURAL -> . EMPTY
    (151) EMPTY -> .

    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 164
    WRITE_NEURAL                   shift and go to state 165
    EMPTY                          shift and go to state 166

state 133

    (105) WRITE_LIST -> CONSTANT . CONSTANT_WRITE_N WRITE_LIST_R
    (126) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (106) CONSTANT_WRITE_N -> . EMPTY
    (129) NEURAL_CNT_FACT -> . EMPTY
    (151) EMPTY -> .

    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)
    TIMES           reduce using rule 151 (EMPTY -> .)
    DIVIDE          reduce using rule 151 (EMPTY -> .)
    PLUS            reduce using rule 151 (EMPTY -> .)
    MINUS           reduce using rule 151 (EMPTY -> .)
    GT              reduce using rule 151 (EMPTY -> .)
    LT              reduce using rule 151 (EMPTY -> .)
    LTE             reduce using rule 151 (EMPTY -> .)
    GTE             reduce using rule 151 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 151 (EMPTY -> .)
    AND             reduce using rule 151 (EMPTY -> .)
    OR              reduce using rule 151 (EMPTY -> .)

    CONSTANT_WRITE_N               shift and go to state 167
    NEURAL_CNT_FACT                shift and go to state 168
    EMPTY                          shift and go to state 169

state 134

    (142) H_EXPRESSION -> S_EXPRESSION . H_EXPRESSION_R
    (143) H_EXPRESSION_R -> . OR H_EXPRESSION
    (144) H_EXPRESSION_R -> . AND H_EXPRESSION
    (145) H_EXPRESSION_R -> . EMPTY
    (151) EMPTY -> .

    OR              shift and go to state 171
    AND             shift and go to state 172
    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)
    RBRACE          reduce using rule 151 (EMPTY -> .)
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    H_EXPRESSION_R                 shift and go to state 170
    EMPTY                          shift and go to state 173

state 135

    (95) CONSTANT -> INT .

    COMMA           reduce using rule 95 (CONSTANT -> INT .)
    RPAREN          reduce using rule 95 (CONSTANT -> INT .)
    TIMES           reduce using rule 95 (CONSTANT -> INT .)
    DIVIDE          reduce using rule 95 (CONSTANT -> INT .)
    PLUS            reduce using rule 95 (CONSTANT -> INT .)
    MINUS           reduce using rule 95 (CONSTANT -> INT .)
    GT              reduce using rule 95 (CONSTANT -> INT .)
    LT              reduce using rule 95 (CONSTANT -> INT .)
    LTE             reduce using rule 95 (CONSTANT -> INT .)
    GTE             reduce using rule 95 (CONSTANT -> INT .)
    DOUBLEEQUAL     reduce using rule 95 (CONSTANT -> INT .)
    AND             reduce using rule 95 (CONSTANT -> INT .)
    OR              reduce using rule 95 (CONSTANT -> INT .)
    RBRACE          reduce using rule 95 (CONSTANT -> INT .)
    SEMICOLON       reduce using rule 95 (CONSTANT -> INT .)


state 136

    (96) CONSTANT -> FLOAT .

    COMMA           reduce using rule 96 (CONSTANT -> FLOAT .)
    RPAREN          reduce using rule 96 (CONSTANT -> FLOAT .)
    TIMES           reduce using rule 96 (CONSTANT -> FLOAT .)
    DIVIDE          reduce using rule 96 (CONSTANT -> FLOAT .)
    PLUS            reduce using rule 96 (CONSTANT -> FLOAT .)
    MINUS           reduce using rule 96 (CONSTANT -> FLOAT .)
    GT              reduce using rule 96 (CONSTANT -> FLOAT .)
    LT              reduce using rule 96 (CONSTANT -> FLOAT .)
    LTE             reduce using rule 96 (CONSTANT -> FLOAT .)
    GTE             reduce using rule 96 (CONSTANT -> FLOAT .)
    DOUBLEEQUAL     reduce using rule 96 (CONSTANT -> FLOAT .)
    AND             reduce using rule 96 (CONSTANT -> FLOAT .)
    OR              reduce using rule 96 (CONSTANT -> FLOAT .)
    RBRACE          reduce using rule 96 (CONSTANT -> FLOAT .)
    SEMICOLON       reduce using rule 96 (CONSTANT -> FLOAT .)


state 137

    (97) CONSTANT -> STRING .

    COMMA           reduce using rule 97 (CONSTANT -> STRING .)
    RPAREN          reduce using rule 97 (CONSTANT -> STRING .)
    TIMES           reduce using rule 97 (CONSTANT -> STRING .)
    DIVIDE          reduce using rule 97 (CONSTANT -> STRING .)
    PLUS            reduce using rule 97 (CONSTANT -> STRING .)
    MINUS           reduce using rule 97 (CONSTANT -> STRING .)
    GT              reduce using rule 97 (CONSTANT -> STRING .)
    LT              reduce using rule 97 (CONSTANT -> STRING .)
    LTE             reduce using rule 97 (CONSTANT -> STRING .)
    GTE             reduce using rule 97 (CONSTANT -> STRING .)
    DOUBLEEQUAL     reduce using rule 97 (CONSTANT -> STRING .)
    AND             reduce using rule 97 (CONSTANT -> STRING .)
    OR              reduce using rule 97 (CONSTANT -> STRING .)
    RBRACE          reduce using rule 97 (CONSTANT -> STRING .)
    SEMICOLON       reduce using rule 97 (CONSTANT -> STRING .)


state 138

    (130) S_EXPRESSION -> EXPRESSION . S_EXPRESSION_R
    (132) S_EXPRESSION_R -> . CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP
    (133) S_EXPRESSION_R -> . EMPTY
    (135) CONDI -> . GT
    (136) CONDI -> . LT
    (137) CONDI -> . LTE
    (138) CONDI -> . GTE
    (139) CONDI -> . DOUBLEEQUAL
    (140) CONDI -> . AND
    (141) CONDI -> . OR
    (151) EMPTY -> .

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    GT              shift and go to state 177
    LT              shift and go to state 178
    LTE             shift and go to state 179
    GTE             shift and go to state 180
    DOUBLEEQUAL     shift and go to state 181
    AND             shift and go to state 182
    OR              shift and go to state 183
    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)
    RBRACE          reduce using rule 151 (EMPTY -> .)
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

  ! OR              [ reduce using rule 151 (EMPTY -> .) ]
  ! AND             [ reduce using rule 151 (EMPTY -> .) ]

    S_EXPRESSION_R                 shift and go to state 174
    CONDI                          shift and go to state 175
    EMPTY                          shift and go to state 176

state 139

    (111) EXPRESSION -> TERM . NEURAL_EXPRESSION EXPRESSION_R
    (112) NEURAL_EXPRESSION -> . EMPTY
    (151) EMPTY -> .

    PLUS            reduce using rule 151 (EMPTY -> .)
    MINUS           reduce using rule 151 (EMPTY -> .)
    GT              reduce using rule 151 (EMPTY -> .)
    LT              reduce using rule 151 (EMPTY -> .)
    LTE             reduce using rule 151 (EMPTY -> .)
    GTE             reduce using rule 151 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 151 (EMPTY -> .)
    AND             reduce using rule 151 (EMPTY -> .)
    OR              reduce using rule 151 (EMPTY -> .)
    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)
    RBRACE          reduce using rule 151 (EMPTY -> .)
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    NEURAL_EXPRESSION              shift and go to state 184
    EMPTY                          shift and go to state 185

state 140

    (118) TERM -> FACTOR . NEURAL_TERM TERM_R
    (119) NEURAL_TERM -> . EMPTY
    (151) EMPTY -> .

    TIMES           reduce using rule 151 (EMPTY -> .)
    DIVIDE          reduce using rule 151 (EMPTY -> .)
    PLUS            reduce using rule 151 (EMPTY -> .)
    MINUS           reduce using rule 151 (EMPTY -> .)
    GT              reduce using rule 151 (EMPTY -> .)
    LT              reduce using rule 151 (EMPTY -> .)
    LTE             reduce using rule 151 (EMPTY -> .)
    GTE             reduce using rule 151 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 151 (EMPTY -> .)
    AND             reduce using rule 151 (EMPTY -> .)
    OR              reduce using rule 151 (EMPTY -> .)
    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)
    RBRACE          reduce using rule 151 (EMPTY -> .)
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    NEURAL_TERM                    shift and go to state 186
    EMPTY                          shift and go to state 187

state 141

    (125) FACTOR -> ID . NEURAL_ID_FAC
    (128) NEURAL_ID_FAC -> . EMPTY
    (151) EMPTY -> .

    TIMES           reduce using rule 151 (EMPTY -> .)
    DIVIDE          reduce using rule 151 (EMPTY -> .)
    PLUS            reduce using rule 151 (EMPTY -> .)
    MINUS           reduce using rule 151 (EMPTY -> .)
    GT              reduce using rule 151 (EMPTY -> .)
    LT              reduce using rule 151 (EMPTY -> .)
    LTE             reduce using rule 151 (EMPTY -> .)
    GTE             reduce using rule 151 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 151 (EMPTY -> .)
    AND             reduce using rule 151 (EMPTY -> .)
    OR              reduce using rule 151 (EMPTY -> .)
    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)
    RBRACE          reduce using rule 151 (EMPTY -> .)
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    NEURAL_ID_FAC                  shift and go to state 188
    EMPTY                          shift and go to state 189

state 142

    (61) DECISION -> IF_K LPAREN H_EXPRESSION . RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    RPAREN          shift and go to state 190


state 143

    (126) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (129) NEURAL_CNT_FACT -> . EMPTY
    (151) EMPTY -> .

    TIMES           reduce using rule 151 (EMPTY -> .)
    DIVIDE          reduce using rule 151 (EMPTY -> .)
    PLUS            reduce using rule 151 (EMPTY -> .)
    MINUS           reduce using rule 151 (EMPTY -> .)
    GT              reduce using rule 151 (EMPTY -> .)
    LT              reduce using rule 151 (EMPTY -> .)
    LTE             reduce using rule 151 (EMPTY -> .)
    GTE             reduce using rule 151 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 151 (EMPTY -> .)
    AND             reduce using rule 151 (EMPTY -> .)
    OR              reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)
    COMMA           reduce using rule 151 (EMPTY -> .)
    RBRACE          reduce using rule 151 (EMPTY -> .)
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    NEURAL_CNT_FACT                shift and go to state 168
    EMPTY                          shift and go to state 191

state 144

    (56) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN . H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    H_EXPRESSION                   shift and go to state 192
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 145

    (53) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (46) STATEMENT_R -> . STATEMENT STATEMENT_R
    (47) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (151) EMPTY -> .
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    STATEMENT_R                    shift and go to state 193
    STATEMENT                      shift and go to state 194
    EMPTY                          shift and go to state 195
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 146

    (60) FOR_LOOP -> FOR_K ID EQUALS . INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 196


state 147

    (25) PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R .

    RPAREN          reduce using rule 25 (PARAM_DECL -> TYPE VAR neuro PARAM_DECL_R .)


state 148

    (28) PARAM_DECL_R -> COMMA . PARAM_DECL
    (25) PARAM_DECL -> . TYPE VAR neuro PARAM_DECL_R
    (26) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (151) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 151 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 197
    TYPE                           shift and go to state 55
    EMPTY                          shift and go to state 57

state 149

    (29) PARAM_DECL_R -> EMPTY .

    RPAREN          reduce using rule 29 (PARAM_DECL_R -> EMPTY .)


state 150

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (31) FN_VARBLOCK -> . VARS_K BLOCKSTART LS_VARDECL BLOCKEND

    VARS_K          shift and go to state 199

    FN_VARBLOCK                    shift and go to state 198

state 151

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (31) FN_VARBLOCK -> . VARS_K BLOCKSTART LS_VARDECL BLOCKEND

    VARS_K          shift and go to state 199

    FN_VARBLOCK                    shift and go to state 200

state 152

    (84) DIM -> LBRACE INT LIM_NP RBRACE . DIM_R
    (86) DIM_R -> . DIM
    (87) DIM_R -> . EMPTY
    (84) DIM -> . LBRACE INT LIM_NP RBRACE DIM_R
    (151) EMPTY -> .

    LBRACE          shift and go to state 64
    COMMA           reduce using rule 151 (EMPTY -> .)
    SEMICOLON       reduce using rule 151 (EMPTY -> .)
    EQUALS          reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)

    DIM_R                          shift and go to state 201
    DIM                            shift and go to state 202
    EMPTY                          shift and go to state 203

state 153

    (68) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL . H_EXPRESSION ASSI_H_EXP_NEURAL
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    H_EXPRESSION                   shift and go to state 204
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 154

    (72) EQUALS_NEURAL -> EMPTY .

    ID              reduce using rule 72 (EQUALS_NEURAL -> EMPTY .)
    LPAREN          reduce using rule 72 (EQUALS_NEURAL -> EMPTY .)
    INT             reduce using rule 72 (EQUALS_NEURAL -> EMPTY .)
    FLOAT           reduce using rule 72 (EQUALS_NEURAL -> EMPTY .)
    STRING          reduce using rule 72 (EQUALS_NEURAL -> EMPTY .)


state 155

    (69) ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL . H_EXPRESSION ASSI_H_EXP_NEURAL
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    H_EXPRESSION                   shift and go to state 205
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 156

    (88) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST . POST_VERIFY RPAREN
    (89) POST_VERIFY -> . EMPTY
    (151) EMPTY -> .

    RPAREN          reduce using rule 151 (EMPTY -> .)

    POST_VERIFY                    shift and go to state 206
    EMPTY                          shift and go to state 207

state 157

    (91) EXP_LIST -> H_EXPRESSION . EXP_NEURAL EXP_LIST_2
    (92) EXP_NEURAL -> . EMPTY
    (151) EMPTY -> .

    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)

    EXP_NEURAL                     shift and go to state 208
    EMPTY                          shift and go to state 209

state 158

    (76) DIM_AC -> LBRACE H_EXPRESSION . DIM_AC_PREV RBRACE DIM_AC_R
    (77) DIM_AC_PREV -> . EMPTY
    (151) EMPTY -> .

    RBRACE          reduce using rule 151 (EMPTY -> .)

    DIM_AC_PREV                    shift and go to state 210
    EMPTY                          shift and go to state 211

state 159

    (98) READ -> READ_K LPAREN ID_LIST RPAREN .

    SEMICOLON       reduce using rule 98 (READ -> READ_K LPAREN ID_LIST RPAREN .)


state 160

    (99) ID_LIST -> ID READ_NEURAL . ID_LIST_R
    (101) ID_LIST_R -> . COMMA ID_LIST
    (102) ID_LIST_R -> . EMPTY
    (151) EMPTY -> .

    COMMA           shift and go to state 213
    RPAREN          reduce using rule 151 (EMPTY -> .)

    ID_LIST_R                      shift and go to state 212
    EMPTY                          shift and go to state 214

state 161

    (100) READ_NEURAL -> EMPTY .

    COMMA           reduce using rule 100 (READ_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 100 (READ_NEURAL -> EMPTY .)


state 162

    (127) FACTOR -> LPAREN H_EXPRESSION . RPAREN

    RPAREN          shift and go to state 215


state 163

    (103) WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .

    SEMICOLON       reduce using rule 103 (WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .)


state 164

    (104) WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .

    RPAREN          reduce using rule 104 (WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .)


state 165

    (107) WRITE_LIST_R -> WRITE_NEURAL . COMMA WRITE_LIST
    (108) WRITE_LIST_R -> WRITE_NEURAL . EMPTY
    (151) EMPTY -> .

    COMMA           shift and go to state 216
    RPAREN          reduce using rule 151 (EMPTY -> .)

    EMPTY                          shift and go to state 217

state 166

    (109) WRITE_NEURAL -> EMPTY .

    COMMA           reduce using rule 109 (WRITE_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 109 (WRITE_NEURAL -> EMPTY .)


state 167

    (105) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N . WRITE_LIST_R
    (107) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (108) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (109) WRITE_NEURAL -> . EMPTY
    (151) EMPTY -> .

    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 218
    WRITE_NEURAL                   shift and go to state 165
    EMPTY                          shift and go to state 166

state 168

    (126) FACTOR -> CONSTANT NEURAL_CNT_FACT .

    TIMES           reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DIVIDE          reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    PLUS            reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    MINUS           reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GT              reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LT              reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LTE             reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GTE             reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DOUBLEEQUAL     reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    AND             reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    OR              reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    COMMA           reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    RPAREN          reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    RBRACE          reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    SEMICOLON       reduce using rule 126 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)


state 169

    (106) CONSTANT_WRITE_N -> EMPTY .
    (129) NEURAL_CNT_FACT -> EMPTY .

  ! reduce/reduce conflict for COMMA resolved using rule 106 (CONSTANT_WRITE_N -> EMPTY .)
  ! reduce/reduce conflict for RPAREN resolved using rule 106 (CONSTANT_WRITE_N -> EMPTY .)
    COMMA           reduce using rule 106 (CONSTANT_WRITE_N -> EMPTY .)
    RPAREN          reduce using rule 106 (CONSTANT_WRITE_N -> EMPTY .)
    TIMES           reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)

  ! COMMA           [ reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .) ]
  ! RPAREN          [ reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .) ]


state 170

    (142) H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .

    COMMA           reduce using rule 142 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    RPAREN          reduce using rule 142 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    RBRACE          reduce using rule 142 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    SEMICOLON       reduce using rule 142 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)


state 171

    (143) H_EXPRESSION_R -> OR . H_EXPRESSION
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    H_EXPRESSION                   shift and go to state 219
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 172

    (144) H_EXPRESSION_R -> AND . H_EXPRESSION
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    H_EXPRESSION                   shift and go to state 220
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 173

    (145) H_EXPRESSION_R -> EMPTY .

    COMMA           reduce using rule 145 (H_EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 145 (H_EXPRESSION_R -> EMPTY .)
    RBRACE          reduce using rule 145 (H_EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 145 (H_EXPRESSION_R -> EMPTY .)


state 174

    (130) S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .

    OR              reduce using rule 130 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    AND             reduce using rule 130 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    COMMA           reduce using rule 130 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    RPAREN          reduce using rule 130 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    RBRACE          reduce using rule 130 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)
    SEMICOLON       reduce using rule 130 (S_EXPRESSION -> EXPRESSION S_EXPRESSION_R .)


state 175

    (132) S_EXPRESSION_R -> CONDI . NEURAL_CONDI EXPRESSION NEURAL_EXP
    (134) NEURAL_CONDI -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    LPAREN          reduce using rule 151 (EMPTY -> .)
    INT             reduce using rule 151 (EMPTY -> .)
    FLOAT           reduce using rule 151 (EMPTY -> .)
    STRING          reduce using rule 151 (EMPTY -> .)

    NEURAL_CONDI                   shift and go to state 221
    EMPTY                          shift and go to state 222

state 176

    (133) S_EXPRESSION_R -> EMPTY .

    OR              reduce using rule 133 (S_EXPRESSION_R -> EMPTY .)
    AND             reduce using rule 133 (S_EXPRESSION_R -> EMPTY .)
    COMMA           reduce using rule 133 (S_EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 133 (S_EXPRESSION_R -> EMPTY .)
    RBRACE          reduce using rule 133 (S_EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 133 (S_EXPRESSION_R -> EMPTY .)


state 177

    (135) CONDI -> GT .

    ID              reduce using rule 135 (CONDI -> GT .)
    LPAREN          reduce using rule 135 (CONDI -> GT .)
    INT             reduce using rule 135 (CONDI -> GT .)
    FLOAT           reduce using rule 135 (CONDI -> GT .)
    STRING          reduce using rule 135 (CONDI -> GT .)


state 178

    (136) CONDI -> LT .

    ID              reduce using rule 136 (CONDI -> LT .)
    LPAREN          reduce using rule 136 (CONDI -> LT .)
    INT             reduce using rule 136 (CONDI -> LT .)
    FLOAT           reduce using rule 136 (CONDI -> LT .)
    STRING          reduce using rule 136 (CONDI -> LT .)


state 179

    (137) CONDI -> LTE .

    ID              reduce using rule 137 (CONDI -> LTE .)
    LPAREN          reduce using rule 137 (CONDI -> LTE .)
    INT             reduce using rule 137 (CONDI -> LTE .)
    FLOAT           reduce using rule 137 (CONDI -> LTE .)
    STRING          reduce using rule 137 (CONDI -> LTE .)


state 180

    (138) CONDI -> GTE .

    ID              reduce using rule 138 (CONDI -> GTE .)
    LPAREN          reduce using rule 138 (CONDI -> GTE .)
    INT             reduce using rule 138 (CONDI -> GTE .)
    FLOAT           reduce using rule 138 (CONDI -> GTE .)
    STRING          reduce using rule 138 (CONDI -> GTE .)


state 181

    (139) CONDI -> DOUBLEEQUAL .

    ID              reduce using rule 139 (CONDI -> DOUBLEEQUAL .)
    LPAREN          reduce using rule 139 (CONDI -> DOUBLEEQUAL .)
    INT             reduce using rule 139 (CONDI -> DOUBLEEQUAL .)
    FLOAT           reduce using rule 139 (CONDI -> DOUBLEEQUAL .)
    STRING          reduce using rule 139 (CONDI -> DOUBLEEQUAL .)


state 182

    (140) CONDI -> AND .

    ID              reduce using rule 140 (CONDI -> AND .)
    LPAREN          reduce using rule 140 (CONDI -> AND .)
    INT             reduce using rule 140 (CONDI -> AND .)
    FLOAT           reduce using rule 140 (CONDI -> AND .)
    STRING          reduce using rule 140 (CONDI -> AND .)


state 183

    (141) CONDI -> OR .

    ID              reduce using rule 141 (CONDI -> OR .)
    LPAREN          reduce using rule 141 (CONDI -> OR .)
    INT             reduce using rule 141 (CONDI -> OR .)
    FLOAT           reduce using rule 141 (CONDI -> OR .)
    STRING          reduce using rule 141 (CONDI -> OR .)


state 184

    (111) EXPRESSION -> TERM NEURAL_EXPRESSION . EXPRESSION_R
    (113) EXPRESSION_R -> . PLUS NEURAL_PLUS EXPRESSION
    (114) EXPRESSION_R -> . MINUS NEURAL_MINUS EXPRESSION
    (115) EXPRESSION_R -> . EMPTY
    (151) EMPTY -> .

    PLUS            shift and go to state 224
    MINUS           shift and go to state 225
    GT              reduce using rule 151 (EMPTY -> .)
    LT              reduce using rule 151 (EMPTY -> .)
    LTE             reduce using rule 151 (EMPTY -> .)
    GTE             reduce using rule 151 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 151 (EMPTY -> .)
    AND             reduce using rule 151 (EMPTY -> .)
    OR              reduce using rule 151 (EMPTY -> .)
    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)
    RBRACE          reduce using rule 151 (EMPTY -> .)
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    EXPRESSION_R                   shift and go to state 223
    EMPTY                          shift and go to state 226

state 185

    (112) NEURAL_EXPRESSION -> EMPTY .

    PLUS            reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    MINUS           reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    GT              reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    LT              reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    LTE             reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    GTE             reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    AND             reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    OR              reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    COMMA           reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    RPAREN          reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    RBRACE          reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)
    SEMICOLON       reduce using rule 112 (NEURAL_EXPRESSION -> EMPTY .)


state 186

    (118) TERM -> FACTOR NEURAL_TERM . TERM_R
    (120) TERM_R -> . TIMES NEURAL_TIMES TERM
    (121) TERM_R -> . DIVIDE NEURAL_DIVIDE TERM
    (122) TERM_R -> . EMPTY
    (151) EMPTY -> .

    TIMES           shift and go to state 228
    DIVIDE          shift and go to state 229
    PLUS            reduce using rule 151 (EMPTY -> .)
    MINUS           reduce using rule 151 (EMPTY -> .)
    GT              reduce using rule 151 (EMPTY -> .)
    LT              reduce using rule 151 (EMPTY -> .)
    LTE             reduce using rule 151 (EMPTY -> .)
    GTE             reduce using rule 151 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 151 (EMPTY -> .)
    AND             reduce using rule 151 (EMPTY -> .)
    OR              reduce using rule 151 (EMPTY -> .)
    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)
    RBRACE          reduce using rule 151 (EMPTY -> .)
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    TERM_R                         shift and go to state 227
    EMPTY                          shift and go to state 230

state 187

    (119) NEURAL_TERM -> EMPTY .

    TIMES           reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    DIVIDE          reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    PLUS            reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    MINUS           reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    GT              reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    LT              reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    LTE             reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    GTE             reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    AND             reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    OR              reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    COMMA           reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    RPAREN          reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    RBRACE          reduce using rule 119 (NEURAL_TERM -> EMPTY .)
    SEMICOLON       reduce using rule 119 (NEURAL_TERM -> EMPTY .)


state 188

    (125) FACTOR -> ID NEURAL_ID_FAC .

    TIMES           reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    DIVIDE          reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    PLUS            reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    MINUS           reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    GT              reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    LT              reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    LTE             reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    GTE             reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    DOUBLEEQUAL     reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    AND             reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    OR              reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    COMMA           reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    RPAREN          reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    RBRACE          reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)
    SEMICOLON       reduce using rule 125 (FACTOR -> ID NEURAL_ID_FAC .)


state 189

    (128) NEURAL_ID_FAC -> EMPTY .

    TIMES           reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    DIVIDE          reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    PLUS            reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    MINUS           reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    GT              reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    LT              reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    LTE             reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    GTE             reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    AND             reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    OR              reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    COMMA           reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    RPAREN          reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    RBRACE          reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)
    SEMICOLON       reduce using rule 128 (NEURAL_ID_FAC -> EMPTY .)


state 190

    (61) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN . EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (62) EXP_RESULT_NEURAL -> . EMPTY
    (151) EMPTY -> .

    BLOCKSTART      reduce using rule 151 (EMPTY -> .)

    EXP_RESULT_NEURAL              shift and go to state 231
    EMPTY                          shift and go to state 232

state 191

    (129) NEURAL_CNT_FACT -> EMPTY .

    TIMES           reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    RPAREN          reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    COMMA           reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    RBRACE          reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)
    SEMICOLON       reduce using rule 129 (NEURAL_CNT_FACT -> EMPTY .)


state 192

    (56) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION . RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    RPAREN          shift and go to state 233


state 193

    (53) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    BLOCKEND        shift and go to state 234


state 194

    (46) STATEMENT_R -> STATEMENT . STATEMENT_R
    (46) STATEMENT_R -> . STATEMENT STATEMENT_R
    (47) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (151) EMPTY -> .
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    STATEMENT                      shift and go to state 194
    STATEMENT_R                    shift and go to state 235
    EMPTY                          shift and go to state 195
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 195

    (47) STATEMENT_R -> EMPTY .

    BLOCKEND        reduce using rule 47 (STATEMENT_R -> EMPTY .)


state 196

    (60) FOR_LOOP -> FOR_K ID EQUALS INT . TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    TO_K            shift and go to state 236


state 197

    (28) PARAM_DECL_R -> COMMA PARAM_DECL .

    RPAREN          reduce using rule 28 (PARAM_DECL_R -> COMMA PARAM_DECL .)


state 198

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK . PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    PROC_BODY                      shift and go to state 237
    STATEMENT                      shift and go to state 238
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 199

    (31) FN_VARBLOCK -> VARS_K . BLOCKSTART LS_VARDECL BLOCKEND

    BLOCKSTART      shift and go to state 239


state 200

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK . PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    PROC_BODY                      shift and go to state 240
    STATEMENT                      shift and go to state 238
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 201

    (84) DIM -> LBRACE INT LIM_NP RBRACE DIM_R .

    COMMA           reduce using rule 84 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)
    SEMICOLON       reduce using rule 84 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)
    EQUALS          reduce using rule 84 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)
    RPAREN          reduce using rule 84 (DIM -> LBRACE INT LIM_NP RBRACE DIM_R .)


state 202

    (86) DIM_R -> DIM .

    COMMA           reduce using rule 86 (DIM_R -> DIM .)
    SEMICOLON       reduce using rule 86 (DIM_R -> DIM .)
    EQUALS          reduce using rule 86 (DIM_R -> DIM .)
    RPAREN          reduce using rule 86 (DIM_R -> DIM .)


state 203

    (87) DIM_R -> EMPTY .

    COMMA           reduce using rule 87 (DIM_R -> EMPTY .)
    SEMICOLON       reduce using rule 87 (DIM_R -> EMPTY .)
    EQUALS          reduce using rule 87 (DIM_R -> EMPTY .)
    RPAREN          reduce using rule 87 (DIM_R -> EMPTY .)


state 204

    (68) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION . ASSI_H_EXP_NEURAL
    (71) ASSI_H_EXP_NEURAL -> . EMPTY
    (151) EMPTY -> .

    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    ASSI_H_EXP_NEURAL              shift and go to state 241
    EMPTY                          shift and go to state 242

state 205

    (69) ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION . ASSI_H_EXP_NEURAL
    (71) ASSI_H_EXP_NEURAL -> . EMPTY
    (151) EMPTY -> .

    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    ASSI_H_EXP_NEURAL              shift and go to state 243
    EMPTY                          shift and go to state 242

state 206

    (88) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY . RPAREN

    RPAREN          shift and go to state 244


state 207

    (89) POST_VERIFY -> EMPTY .

    RPAREN          reduce using rule 89 (POST_VERIFY -> EMPTY .)


state 208

    (91) EXP_LIST -> H_EXPRESSION EXP_NEURAL . EXP_LIST_2
    (93) EXP_LIST_2 -> . COMMA EXP_LIST
    (94) EXP_LIST_2 -> . EMPTY
    (151) EMPTY -> .

    COMMA           shift and go to state 246
    RPAREN          reduce using rule 151 (EMPTY -> .)

    EXP_LIST_2                     shift and go to state 245
    EMPTY                          shift and go to state 247

state 209

    (92) EXP_NEURAL -> EMPTY .

    COMMA           reduce using rule 92 (EXP_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 92 (EXP_NEURAL -> EMPTY .)


state 210

    (76) DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV . RBRACE DIM_AC_R

    RBRACE          shift and go to state 248


state 211

    (77) DIM_AC_PREV -> EMPTY .

    RBRACE          reduce using rule 77 (DIM_AC_PREV -> EMPTY .)


state 212

    (99) ID_LIST -> ID READ_NEURAL ID_LIST_R .

    RPAREN          reduce using rule 99 (ID_LIST -> ID READ_NEURAL ID_LIST_R .)


state 213

    (101) ID_LIST_R -> COMMA . ID_LIST
    (99) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 129

    ID_LIST                        shift and go to state 249

state 214

    (102) ID_LIST_R -> EMPTY .

    RPAREN          reduce using rule 102 (ID_LIST_R -> EMPTY .)


state 215

    (127) FACTOR -> LPAREN H_EXPRESSION RPAREN .

    TIMES           reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DIVIDE          reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    PLUS            reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    MINUS           reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GT              reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LT              reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LTE             reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GTE             reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DOUBLEEQUAL     reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    AND             reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    OR              reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    COMMA           reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    RPAREN          reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    RBRACE          reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    SEMICOLON       reduce using rule 127 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)


state 216

    (107) WRITE_LIST_R -> WRITE_NEURAL COMMA . WRITE_LIST
    (104) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (105) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137
    ID              shift and go to state 141
    LPAREN          shift and go to state 130

    WRITE_LIST                     shift and go to state 250
    H_EXPRESSION                   shift and go to state 132
    CONSTANT                       shift and go to state 133
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140

state 217

    (108) WRITE_LIST_R -> WRITE_NEURAL EMPTY .

    RPAREN          reduce using rule 108 (WRITE_LIST_R -> WRITE_NEURAL EMPTY .)


state 218

    (105) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .

    RPAREN          reduce using rule 105 (WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .)


state 219

    (143) H_EXPRESSION_R -> OR H_EXPRESSION .

    COMMA           reduce using rule 143 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    RPAREN          reduce using rule 143 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    RBRACE          reduce using rule 143 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    SEMICOLON       reduce using rule 143 (H_EXPRESSION_R -> OR H_EXPRESSION .)


state 220

    (144) H_EXPRESSION_R -> AND H_EXPRESSION .

    COMMA           reduce using rule 144 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    RPAREN          reduce using rule 144 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    RBRACE          reduce using rule 144 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    SEMICOLON       reduce using rule 144 (H_EXPRESSION_R -> AND H_EXPRESSION .)


state 221

    (132) S_EXPRESSION_R -> CONDI NEURAL_CONDI . EXPRESSION NEURAL_EXP
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    EXPRESSION                     shift and go to state 251
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 222

    (134) NEURAL_CONDI -> EMPTY .

    ID              reduce using rule 134 (NEURAL_CONDI -> EMPTY .)
    LPAREN          reduce using rule 134 (NEURAL_CONDI -> EMPTY .)
    INT             reduce using rule 134 (NEURAL_CONDI -> EMPTY .)
    FLOAT           reduce using rule 134 (NEURAL_CONDI -> EMPTY .)
    STRING          reduce using rule 134 (NEURAL_CONDI -> EMPTY .)


state 223

    (111) EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .

    GT              reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LT              reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LTE             reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    GTE             reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    DOUBLEEQUAL     reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    AND             reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    OR              reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    COMMA           reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    RPAREN          reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    RBRACE          reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    SEMICOLON       reduce using rule 111 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)


state 224

    (113) EXPRESSION_R -> PLUS . NEURAL_PLUS EXPRESSION
    (116) NEURAL_PLUS -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    LPAREN          reduce using rule 151 (EMPTY -> .)
    INT             reduce using rule 151 (EMPTY -> .)
    FLOAT           reduce using rule 151 (EMPTY -> .)
    STRING          reduce using rule 151 (EMPTY -> .)

    NEURAL_PLUS                    shift and go to state 252
    EMPTY                          shift and go to state 253

state 225

    (114) EXPRESSION_R -> MINUS . NEURAL_MINUS EXPRESSION
    (117) NEURAL_MINUS -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    LPAREN          reduce using rule 151 (EMPTY -> .)
    INT             reduce using rule 151 (EMPTY -> .)
    FLOAT           reduce using rule 151 (EMPTY -> .)
    STRING          reduce using rule 151 (EMPTY -> .)

    NEURAL_MINUS                   shift and go to state 254
    EMPTY                          shift and go to state 255

state 226

    (115) EXPRESSION_R -> EMPTY .

    GT              reduce using rule 115 (EXPRESSION_R -> EMPTY .)
    LT              reduce using rule 115 (EXPRESSION_R -> EMPTY .)
    LTE             reduce using rule 115 (EXPRESSION_R -> EMPTY .)
    GTE             reduce using rule 115 (EXPRESSION_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 115 (EXPRESSION_R -> EMPTY .)
    AND             reduce using rule 115 (EXPRESSION_R -> EMPTY .)
    OR              reduce using rule 115 (EXPRESSION_R -> EMPTY .)
    COMMA           reduce using rule 115 (EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 115 (EXPRESSION_R -> EMPTY .)
    RBRACE          reduce using rule 115 (EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 115 (EXPRESSION_R -> EMPTY .)


state 227

    (118) TERM -> FACTOR NEURAL_TERM TERM_R .

    PLUS            reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    MINUS           reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GT              reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LT              reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LTE             reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GTE             reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    DOUBLEEQUAL     reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    AND             reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    OR              reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    COMMA           reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    RPAREN          reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    RBRACE          reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    SEMICOLON       reduce using rule 118 (TERM -> FACTOR NEURAL_TERM TERM_R .)


state 228

    (120) TERM_R -> TIMES . NEURAL_TIMES TERM
    (123) NEURAL_TIMES -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    LPAREN          reduce using rule 151 (EMPTY -> .)
    INT             reduce using rule 151 (EMPTY -> .)
    FLOAT           reduce using rule 151 (EMPTY -> .)
    STRING          reduce using rule 151 (EMPTY -> .)

    NEURAL_TIMES                   shift and go to state 256
    EMPTY                          shift and go to state 257

state 229

    (121) TERM_R -> DIVIDE . NEURAL_DIVIDE TERM
    (124) NEURAL_DIVIDE -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    LPAREN          reduce using rule 151 (EMPTY -> .)
    INT             reduce using rule 151 (EMPTY -> .)
    FLOAT           reduce using rule 151 (EMPTY -> .)
    STRING          reduce using rule 151 (EMPTY -> .)

    NEURAL_DIVIDE                  shift and go to state 258
    EMPTY                          shift and go to state 259

state 230

    (122) TERM_R -> EMPTY .

    PLUS            reduce using rule 122 (TERM_R -> EMPTY .)
    MINUS           reduce using rule 122 (TERM_R -> EMPTY .)
    GT              reduce using rule 122 (TERM_R -> EMPTY .)
    LT              reduce using rule 122 (TERM_R -> EMPTY .)
    LTE             reduce using rule 122 (TERM_R -> EMPTY .)
    GTE             reduce using rule 122 (TERM_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 122 (TERM_R -> EMPTY .)
    AND             reduce using rule 122 (TERM_R -> EMPTY .)
    OR              reduce using rule 122 (TERM_R -> EMPTY .)
    COMMA           reduce using rule 122 (TERM_R -> EMPTY .)
    RPAREN          reduce using rule 122 (TERM_R -> EMPTY .)
    RBRACE          reduce using rule 122 (TERM_R -> EMPTY .)
    SEMICOLON       reduce using rule 122 (TERM_R -> EMPTY .)


state 231

    (61) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKSTART      shift and go to state 260


state 232

    (62) EXP_RESULT_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 62 (EXP_RESULT_NEURAL -> EMPTY .)


state 233

    (56) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN . WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (58) WHILE_POST_NEURAL -> . EMPTY
    (151) EMPTY -> .

    BLOCKSTART      reduce using rule 151 (EMPTY -> .)

    WHILE_POST_NEURAL              shift and go to state 261
    EMPTY                          shift and go to state 262

state 234

    (53) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    WHILE_K         shift and go to state 263


state 235

    (46) STATEMENT_R -> STATEMENT STATEMENT_R .

    BLOCKEND        reduce using rule 46 (STATEMENT_R -> STATEMENT STATEMENT_R .)


state 236

    (60) FOR_LOOP -> FOR_K ID EQUALS INT TO_K . INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 264


state 237

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY . RETURN BLOCKEND POST_FUNC PROC_DECL
    (110) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON

    RETURN_K        shift and go to state 266

    RETURN                         shift and go to state 265

state 238

    (30) PROC_BODY -> STATEMENT . PROC_BODY_R
    (38) PROC_BODY_R -> . PROC_BODY
    (39) PROC_BODY_R -> . EMPTY
    (30) PROC_BODY -> . STATEMENT PROC_BODY_R
    (151) EMPTY -> .
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    RETURN_K        reduce using rule 151 (EMPTY -> .)
    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    STATEMENT                      shift and go to state 238
    PROC_BODY_R                    shift and go to state 267
    PROC_BODY                      shift and go to state 268
    EMPTY                          shift and go to state 269
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 239

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART . LS_VARDECL BLOCKEND
    (32) LS_VARDECL -> . TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    LS_VARDECL                     shift and go to state 270
    TYPE                           shift and go to state 271

state 240

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY . BLOCKEND POST_FUNC PROC_DECL

    BLOCKEND        shift and go to state 272


state 241

    (68) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .

    SEMICOLON       reduce using rule 68 (ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .)


state 242

    (71) ASSI_H_EXP_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 71 (ASSI_H_EXP_NEURAL -> EMPTY .)


state 243

    (69) ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .

    SEMICOLON       reduce using rule 69 (ASSIGN1 -> ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .)


state 244

    (88) FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN .

    SEMICOLON       reduce using rule 88 (FUNC_CALL -> ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN .)


state 245

    (91) EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2 .

    RPAREN          reduce using rule 91 (EXP_LIST -> H_EXPRESSION EXP_NEURAL EXP_LIST_2 .)


state 246

    (93) EXP_LIST_2 -> COMMA . EXP_LIST
    (91) EXP_LIST -> . H_EXPRESSION EXP_NEURAL EXP_LIST_2
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    EXP_LIST                       shift and go to state 273
    H_EXPRESSION                   shift and go to state 157
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 247

    (94) EXP_LIST_2 -> EMPTY .

    RPAREN          reduce using rule 94 (EXP_LIST_2 -> EMPTY .)


state 248

    (76) DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE . DIM_AC_R
    (78) DIM_AC_R -> . DIM_AC
    (79) DIM_AC_R -> . EMPTY
    (76) DIM_AC -> . LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R
    (151) EMPTY -> .

    LBRACE          shift and go to state 127
    EQUALS          reduce using rule 151 (EMPTY -> .)

    DIM_AC_R                       shift and go to state 274
    DIM_AC                         shift and go to state 275
    EMPTY                          shift and go to state 276

state 249

    (101) ID_LIST_R -> COMMA ID_LIST .

    RPAREN          reduce using rule 101 (ID_LIST_R -> COMMA ID_LIST .)


state 250

    (107) WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .

    RPAREN          reduce using rule 107 (WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .)


state 251

    (132) S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION . NEURAL_EXP
    (131) NEURAL_EXP -> . EMPTY
    (151) EMPTY -> .

    OR              reduce using rule 151 (EMPTY -> .)
    AND             reduce using rule 151 (EMPTY -> .)
    COMMA           reduce using rule 151 (EMPTY -> .)
    RPAREN          reduce using rule 151 (EMPTY -> .)
    RBRACE          reduce using rule 151 (EMPTY -> .)
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    NEURAL_EXP                     shift and go to state 277
    EMPTY                          shift and go to state 278

state 252

    (113) EXPRESSION_R -> PLUS NEURAL_PLUS . EXPRESSION
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    EXPRESSION                     shift and go to state 279
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 253

    (116) NEURAL_PLUS -> EMPTY .

    ID              reduce using rule 116 (NEURAL_PLUS -> EMPTY .)
    LPAREN          reduce using rule 116 (NEURAL_PLUS -> EMPTY .)
    INT             reduce using rule 116 (NEURAL_PLUS -> EMPTY .)
    FLOAT           reduce using rule 116 (NEURAL_PLUS -> EMPTY .)
    STRING          reduce using rule 116 (NEURAL_PLUS -> EMPTY .)


state 254

    (114) EXPRESSION_R -> MINUS NEURAL_MINUS . EXPRESSION
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    EXPRESSION                     shift and go to state 280
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 255

    (117) NEURAL_MINUS -> EMPTY .

    ID              reduce using rule 117 (NEURAL_MINUS -> EMPTY .)
    LPAREN          reduce using rule 117 (NEURAL_MINUS -> EMPTY .)
    INT             reduce using rule 117 (NEURAL_MINUS -> EMPTY .)
    FLOAT           reduce using rule 117 (NEURAL_MINUS -> EMPTY .)
    STRING          reduce using rule 117 (NEURAL_MINUS -> EMPTY .)


state 256

    (120) TERM_R -> TIMES NEURAL_TIMES . TERM
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    TERM                           shift and go to state 281
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 257

    (123) NEURAL_TIMES -> EMPTY .

    ID              reduce using rule 123 (NEURAL_TIMES -> EMPTY .)
    LPAREN          reduce using rule 123 (NEURAL_TIMES -> EMPTY .)
    INT             reduce using rule 123 (NEURAL_TIMES -> EMPTY .)
    FLOAT           reduce using rule 123 (NEURAL_TIMES -> EMPTY .)
    STRING          reduce using rule 123 (NEURAL_TIMES -> EMPTY .)


state 258

    (121) TERM_R -> DIVIDE NEURAL_DIVIDE . TERM
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    TERM                           shift and go to state 282
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 259

    (124) NEURAL_DIVIDE -> EMPTY .

    ID              reduce using rule 124 (NEURAL_DIVIDE -> EMPTY .)
    LPAREN          reduce using rule 124 (NEURAL_DIVIDE -> EMPTY .)
    INT             reduce using rule 124 (NEURAL_DIVIDE -> EMPTY .)
    FLOAT           reduce using rule 124 (NEURAL_DIVIDE -> EMPTY .)
    STRING          reduce using rule 124 (NEURAL_DIVIDE -> EMPTY .)


state 260

    (61) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (46) STATEMENT_R -> . STATEMENT STATEMENT_R
    (47) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (151) EMPTY -> .
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    STATEMENT_R                    shift and go to state 283
    STATEMENT                      shift and go to state 194
    EMPTY                          shift and go to state 195
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 261

    (56) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    BLOCKSTART      shift and go to state 284


state 262

    (58) WHILE_POST_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 58 (WHILE_POST_NEURAL -> EMPTY .)


state 263

    (53) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K . LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    LPAREN          shift and go to state 285


state 264

    (60) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT . DO_K BLOCKSTART STATEMENT_R BLOCKEND

    DO_K            shift and go to state 286


state 265

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN . BLOCKEND POST_FUNC PROC_DECL

    BLOCKEND        shift and go to state 287


state 266

    (110) RETURN -> RETURN_K . LPAREN H_EXPRESSION RPAREN SEMICOLON

    LPAREN          shift and go to state 288


state 267

    (30) PROC_BODY -> STATEMENT PROC_BODY_R .

    RETURN_K        reduce using rule 30 (PROC_BODY -> STATEMENT PROC_BODY_R .)
    BLOCKEND        reduce using rule 30 (PROC_BODY -> STATEMENT PROC_BODY_R .)


state 268

    (38) PROC_BODY_R -> PROC_BODY .

    RETURN_K        reduce using rule 38 (PROC_BODY_R -> PROC_BODY .)
    BLOCKEND        reduce using rule 38 (PROC_BODY_R -> PROC_BODY .)


state 269

    (39) PROC_BODY_R -> EMPTY .

    RETURN_K        reduce using rule 39 (PROC_BODY_R -> EMPTY .)
    BLOCKEND        reduce using rule 39 (PROC_BODY_R -> EMPTY .)


state 270

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL . BLOCKEND

    BLOCKEND        shift and go to state 289


state 271

    (32) LS_VARDECL -> TYPE . COLON FNVAR_LS SEMICOLON LS_VARDECL_R

    COLON           shift and go to state 290


state 272

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND . POST_FUNC PROC_DECL
    (22) POST_FUNC -> . EMPTY
    (151) EMPTY -> .

    FUNCTION_K      reduce using rule 151 (EMPTY -> .)
    MAIN_K          reduce using rule 151 (EMPTY -> .)

    POST_FUNC                      shift and go to state 291
    EMPTY                          shift and go to state 292

state 273

    (93) EXP_LIST_2 -> COMMA EXP_LIST .

    RPAREN          reduce using rule 93 (EXP_LIST_2 -> COMMA EXP_LIST .)


state 274

    (76) DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R .

    EQUALS          reduce using rule 76 (DIM_AC -> LBRACE H_EXPRESSION DIM_AC_PREV RBRACE DIM_AC_R .)


state 275

    (78) DIM_AC_R -> DIM_AC .

    EQUALS          reduce using rule 78 (DIM_AC_R -> DIM_AC .)


state 276

    (79) DIM_AC_R -> EMPTY .

    EQUALS          reduce using rule 79 (DIM_AC_R -> EMPTY .)


state 277

    (132) S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .

    OR              reduce using rule 132 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    AND             reduce using rule 132 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    COMMA           reduce using rule 132 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    RPAREN          reduce using rule 132 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    RBRACE          reduce using rule 132 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)
    SEMICOLON       reduce using rule 132 (S_EXPRESSION_R -> CONDI NEURAL_CONDI EXPRESSION NEURAL_EXP .)


state 278

    (131) NEURAL_EXP -> EMPTY .

    OR              reduce using rule 131 (NEURAL_EXP -> EMPTY .)
    AND             reduce using rule 131 (NEURAL_EXP -> EMPTY .)
    COMMA           reduce using rule 131 (NEURAL_EXP -> EMPTY .)
    RPAREN          reduce using rule 131 (NEURAL_EXP -> EMPTY .)
    RBRACE          reduce using rule 131 (NEURAL_EXP -> EMPTY .)
    SEMICOLON       reduce using rule 131 (NEURAL_EXP -> EMPTY .)


state 279

    (113) EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .

    GT              reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LT              reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LTE             reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    GTE             reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    AND             reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    OR              reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    COMMA           reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    RPAREN          reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    RBRACE          reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    SEMICOLON       reduce using rule 113 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)


state 280

    (114) EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .

    GT              reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LT              reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LTE             reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    GTE             reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    AND             reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    OR              reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    COMMA           reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    RPAREN          reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    RBRACE          reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    SEMICOLON       reduce using rule 114 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)


state 281

    (120) TERM_R -> TIMES NEURAL_TIMES TERM .

    PLUS            reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    MINUS           reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GT              reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LT              reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LTE             reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GTE             reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    DOUBLEEQUAL     reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    AND             reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    OR              reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    COMMA           reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    RPAREN          reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    RBRACE          reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    SEMICOLON       reduce using rule 120 (TERM_R -> TIMES NEURAL_TIMES TERM .)


state 282

    (121) TERM_R -> DIVIDE NEURAL_DIVIDE TERM .

    PLUS            reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    MINUS           reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GT              reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LT              reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LTE             reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GTE             reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    DOUBLEEQUAL     reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    AND             reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    OR              reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    COMMA           reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    RPAREN          reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    RBRACE          reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    SEMICOLON       reduce using rule 121 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)


state 283

    (61) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKEND        shift and go to state 293


state 284

    (56) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (46) STATEMENT_R -> . STATEMENT STATEMENT_R
    (47) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (151) EMPTY -> .
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    STATEMENT_R                    shift and go to state 294
    STATEMENT                      shift and go to state 194
    EMPTY                          shift and go to state 195
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 285

    (53) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN . H_EXPRESSION RPAREN DW_END_NEURAL
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    H_EXPRESSION                   shift and go to state 295
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 286

    (60) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 296


state 287

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND . POST_FUNC PROC_DECL
    (22) POST_FUNC -> . EMPTY
    (151) EMPTY -> .

    FUNCTION_K      reduce using rule 151 (EMPTY -> .)
    MAIN_K          reduce using rule 151 (EMPTY -> .)

    POST_FUNC                      shift and go to state 297
    EMPTY                          shift and go to state 292

state 288

    (110) RETURN -> RETURN_K LPAREN . H_EXPRESSION RPAREN SEMICOLON
    (142) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (130) S_EXPRESSION -> . EXPRESSION S_EXPRESSION_R
    (111) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (118) TERM -> . FACTOR NEURAL_TERM TERM_R
    (125) FACTOR -> . ID NEURAL_ID_FAC
    (126) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (127) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (95) CONSTANT -> . INT
    (96) CONSTANT -> . FLOAT
    (97) CONSTANT -> . STRING

    ID              shift and go to state 141
    LPAREN          shift and go to state 130
    INT             shift and go to state 135
    FLOAT           shift and go to state 136
    STRING          shift and go to state 137

    H_EXPRESSION                   shift and go to state 298
    S_EXPRESSION                   shift and go to state 134
    EXPRESSION                     shift and go to state 138
    TERM                           shift and go to state 139
    FACTOR                         shift and go to state 140
    CONSTANT                       shift and go to state 143

state 289

    (31) FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .

    ID              reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    READ_K          reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    WRITE_K         reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    IF_K            reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    WHILE_K         reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    DO_K            reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)
    FOR_K           reduce using rule 31 (FN_VARBLOCK -> VARS_K BLOCKSTART LS_VARDECL BLOCKEND .)


state 290

    (32) LS_VARDECL -> TYPE COLON . FNVAR_LS SEMICOLON LS_VARDECL_R
    (35) FNVAR_LS -> . VAR FNVAR_LS2
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (82) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    FNVAR_LS                       shift and go to state 299
    VAR                            shift and go to state 300
    ARRAY                          shift and go to state 44

state 291

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (151) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 151 (EMPTY -> .)

    PROC_DECL                      shift and go to state 301
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 292

    (22) POST_FUNC -> EMPTY .

    FUNCTION_K      reduce using rule 22 (POST_FUNC -> EMPTY .)
    MAIN_K          reduce using rule 22 (POST_FUNC -> EMPTY .)


state 293

    (61) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . DECISION_ALT DECISION_END_NEURAL
    (64) DECISION_ALT -> . ELSE
    (65) DECISION_ALT -> . EMPTY
    (66) ELSE -> . ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
    (151) EMPTY -> .
    (67) ELSE_NEURAL -> . EMPTY

    ID              reduce using rule 151 (EMPTY -> .)
    READ_K          reduce using rule 151 (EMPTY -> .)
    WRITE_K         reduce using rule 151 (EMPTY -> .)
    IF_K            reduce using rule 151 (EMPTY -> .)
    WHILE_K         reduce using rule 151 (EMPTY -> .)
    DO_K            reduce using rule 151 (EMPTY -> .)
    FOR_K           reduce using rule 151 (EMPTY -> .)
    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    RETURN_K        reduce using rule 151 (EMPTY -> .)
    ELSE_K          reduce using rule 151 (EMPTY -> .)

    DECISION_ALT                   shift and go to state 302
    ELSE                           shift and go to state 303
    EMPTY                          shift and go to state 304
    ELSE_NEURAL                    shift and go to state 305

state 294

    (56) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND WHILE_END_NEURAL

    BLOCKEND        shift and go to state 306


state 295

    (53) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION . RPAREN DW_END_NEURAL

    RPAREN          shift and go to state 307


state 296

    (60) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART . STATEMENT_R BLOCKEND
    (46) STATEMENT_R -> . STATEMENT STATEMENT_R
    (47) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (151) EMPTY -> .
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    STATEMENT_R                    shift and go to state 308
    STATEMENT                      shift and go to state 194
    EMPTY                          shift and go to state 195
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 297

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL
    (151) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 151 (EMPTY -> .)

    PROC_DECL                      shift and go to state 309
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 298

    (110) RETURN -> RETURN_K LPAREN H_EXPRESSION . RPAREN SEMICOLON

    RPAREN          shift and go to state 310


state 299

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS . SEMICOLON LS_VARDECL_R

    SEMICOLON       shift and go to state 311


state 300

    (35) FNVAR_LS -> VAR . FNVAR_LS2
    (36) FNVAR_LS2 -> . COMMA FNVAR_LS
    (37) FNVAR_LS2 -> . EMPTY
    (151) EMPTY -> .

    COMMA           shift and go to state 313
    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    FNVAR_LS2                      shift and go to state 312
    EMPTY                          shift and go to state 314

state 301

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL .

    MAIN_K          reduce using rule 19 (PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY BLOCKEND POST_FUNC PROC_DECL .)


state 302

    (61) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT . DECISION_END_NEURAL
    (63) DECISION_END_NEURAL -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    READ_K          reduce using rule 151 (EMPTY -> .)
    WRITE_K         reduce using rule 151 (EMPTY -> .)
    IF_K            reduce using rule 151 (EMPTY -> .)
    WHILE_K         reduce using rule 151 (EMPTY -> .)
    DO_K            reduce using rule 151 (EMPTY -> .)
    FOR_K           reduce using rule 151 (EMPTY -> .)
    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    RETURN_K        reduce using rule 151 (EMPTY -> .)

    DECISION_END_NEURAL            shift and go to state 315
    EMPTY                          shift and go to state 316

state 303

    (64) DECISION_ALT -> ELSE .

    ID              reduce using rule 64 (DECISION_ALT -> ELSE .)
    READ_K          reduce using rule 64 (DECISION_ALT -> ELSE .)
    WRITE_K         reduce using rule 64 (DECISION_ALT -> ELSE .)
    IF_K            reduce using rule 64 (DECISION_ALT -> ELSE .)
    WHILE_K         reduce using rule 64 (DECISION_ALT -> ELSE .)
    DO_K            reduce using rule 64 (DECISION_ALT -> ELSE .)
    FOR_K           reduce using rule 64 (DECISION_ALT -> ELSE .)
    BLOCKEND        reduce using rule 64 (DECISION_ALT -> ELSE .)
    RETURN_K        reduce using rule 64 (DECISION_ALT -> ELSE .)


state 304

    (65) DECISION_ALT -> EMPTY .
    (67) ELSE_NEURAL -> EMPTY .

    ID              reduce using rule 65 (DECISION_ALT -> EMPTY .)
    READ_K          reduce using rule 65 (DECISION_ALT -> EMPTY .)
    WRITE_K         reduce using rule 65 (DECISION_ALT -> EMPTY .)
    IF_K            reduce using rule 65 (DECISION_ALT -> EMPTY .)
    WHILE_K         reduce using rule 65 (DECISION_ALT -> EMPTY .)
    DO_K            reduce using rule 65 (DECISION_ALT -> EMPTY .)
    FOR_K           reduce using rule 65 (DECISION_ALT -> EMPTY .)
    BLOCKEND        reduce using rule 65 (DECISION_ALT -> EMPTY .)
    RETURN_K        reduce using rule 65 (DECISION_ALT -> EMPTY .)
    ELSE_K          reduce using rule 67 (ELSE_NEURAL -> EMPTY .)


state 305

    (66) ELSE -> ELSE_NEURAL . ELSE_K BLOCKSTART STATEMENT_R BLOCKEND

    ELSE_K          shift and go to state 317


state 306

    (56) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . WHILE_END_NEURAL
    (59) WHILE_END_NEURAL -> . EMPTY
    (151) EMPTY -> .

    ID              reduce using rule 151 (EMPTY -> .)
    READ_K          reduce using rule 151 (EMPTY -> .)
    WRITE_K         reduce using rule 151 (EMPTY -> .)
    IF_K            reduce using rule 151 (EMPTY -> .)
    WHILE_K         reduce using rule 151 (EMPTY -> .)
    DO_K            reduce using rule 151 (EMPTY -> .)
    FOR_K           reduce using rule 151 (EMPTY -> .)
    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    RETURN_K        reduce using rule 151 (EMPTY -> .)

    WHILE_END_NEURAL               shift and go to state 318
    EMPTY                          shift and go to state 319

state 307

    (53) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN . DW_END_NEURAL
    (55) DW_END_NEURAL -> . EMPTY
    (151) EMPTY -> .

    SEMICOLON       reduce using rule 151 (EMPTY -> .)

    DW_END_NEURAL                  shift and go to state 320
    EMPTY                          shift and go to state 321

state 308

    (60) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 322


state 309

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL .

    MAIN_K          reduce using rule 21 (PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART FN_VARBLOCK PROC_BODY RETURN BLOCKEND POST_FUNC PROC_DECL .)


state 310

    (110) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 323


state 311

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON . LS_VARDECL_R
    (33) LS_VARDECL_R -> . LS_VARDECL
    (34) LS_VARDECL_R -> . EMPTY
    (32) LS_VARDECL -> . TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R
    (151) EMPTY -> .
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 271
    LS_VARDECL_R                   shift and go to state 324
    LS_VARDECL                     shift and go to state 325
    EMPTY                          shift and go to state 326

state 312

    (35) FNVAR_LS -> VAR FNVAR_LS2 .

    SEMICOLON       reduce using rule 35 (FNVAR_LS -> VAR FNVAR_LS2 .)


state 313

    (36) FNVAR_LS2 -> COMMA . FNVAR_LS
    (35) FNVAR_LS -> . VAR FNVAR_LS2
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (82) ARRAY -> . ID ARR_ID_NP DIM

    ID              shift and go to state 43

    FNVAR_LS                       shift and go to state 327
    VAR                            shift and go to state 300
    ARRAY                          shift and go to state 44

state 314

    (37) FNVAR_LS2 -> EMPTY .

    SEMICOLON       reduce using rule 37 (FNVAR_LS2 -> EMPTY .)


state 315

    (61) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .

    ID              reduce using rule 61 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    READ_K          reduce using rule 61 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WRITE_K         reduce using rule 61 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    IF_K            reduce using rule 61 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WHILE_K         reduce using rule 61 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    DO_K            reduce using rule 61 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    FOR_K           reduce using rule 61 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    BLOCKEND        reduce using rule 61 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    RETURN_K        reduce using rule 61 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)


state 316

    (63) DECISION_END_NEURAL -> EMPTY .

    ID              reduce using rule 63 (DECISION_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 63 (DECISION_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 63 (DECISION_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 63 (DECISION_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 63 (DECISION_END_NEURAL -> EMPTY .)
    DO_K            reduce using rule 63 (DECISION_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 63 (DECISION_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 63 (DECISION_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 63 (DECISION_END_NEURAL -> EMPTY .)


state 317

    (66) ELSE -> ELSE_NEURAL ELSE_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 328


state 318

    (56) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .

    ID              reduce using rule 56 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    READ_K          reduce using rule 56 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    WRITE_K         reduce using rule 56 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    IF_K            reduce using rule 56 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    WHILE_K         reduce using rule 56 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    DO_K            reduce using rule 56 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    FOR_K           reduce using rule 56 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    BLOCKEND        reduce using rule 56 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    RETURN_K        reduce using rule 56 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)


state 319

    (59) WHILE_END_NEURAL -> EMPTY .

    ID              reduce using rule 59 (WHILE_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 59 (WHILE_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 59 (WHILE_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 59 (WHILE_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 59 (WHILE_END_NEURAL -> EMPTY .)
    DO_K            reduce using rule 59 (WHILE_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 59 (WHILE_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 59 (WHILE_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 59 (WHILE_END_NEURAL -> EMPTY .)


state 320

    (53) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL .

    SEMICOLON       reduce using rule 53 (DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL .)


state 321

    (55) DW_END_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 55 (DW_END_NEURAL -> EMPTY .)


state 322

    (60) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 60 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 60 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 60 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 60 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 60 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    DO_K            reduce using rule 60 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 60 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 60 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 60 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)


state 323

    (110) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .

    BLOCKEND        reduce using rule 110 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)


state 324

    (32) LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R .

    BLOCKEND        reduce using rule 32 (LS_VARDECL -> TYPE COLON FNVAR_LS SEMICOLON LS_VARDECL_R .)


state 325

    (33) LS_VARDECL_R -> LS_VARDECL .

    BLOCKEND        reduce using rule 33 (LS_VARDECL_R -> LS_VARDECL .)


state 326

    (34) LS_VARDECL_R -> EMPTY .

    BLOCKEND        reduce using rule 34 (LS_VARDECL_R -> EMPTY .)


state 327

    (36) FNVAR_LS2 -> COMMA FNVAR_LS .

    SEMICOLON       reduce using rule 36 (FNVAR_LS2 -> COMMA FNVAR_LS .)


state 328

    (66) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART . STATEMENT_R BLOCKEND
    (46) STATEMENT_R -> . STATEMENT STATEMENT_R
    (47) STATEMENT_R -> . EMPTY
    (40) STATEMENT -> . ASSIGN SEMICOLON
    (41) STATEMENT -> . ASSIGN1 SEMICOLON
    (42) STATEMENT -> . FUNC_CALL SEMICOLON
    (43) STATEMENT -> . READ SEMICOLON
    (44) STATEMENT -> . WRITE SEMICOLON
    (45) STATEMENT -> . FLOW
    (151) EMPTY -> .
    (68) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (69) ASSIGN1 -> . ARR_AC ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (88) FUNC_CALL -> . ID PRE_VERIFY LPAREN EXP_LIST POST_VERIFY RPAREN
    (98) READ -> . READ_K LPAREN ID_LIST RPAREN
    (103) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (48) FLOW -> . DECISION
    (49) FLOW -> . LOOP
    (80) VAR -> . ID
    (81) VAR -> . ARRAY
    (74) ARR_AC -> . ID ARR_ID_NP1 DIM_AC
    (61) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (50) LOOP -> . WHILE_LOOP
    (51) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (52) LOOP -> . FOR_LOOP
    (82) ARRAY -> . ID ARR_ID_NP DIM
    (56) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (53) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (60) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 151 (EMPTY -> .)
    ID              shift and go to state 76
    READ_K          shift and go to state 77
    WRITE_K         shift and go to state 78
    IF_K            shift and go to state 81
    WHILE_K         shift and go to state 85
    DO_K            shift and go to state 86
    FOR_K           shift and go to state 87

    STATEMENT_R                    shift and go to state 329
    STATEMENT                      shift and go to state 194
    EMPTY                          shift and go to state 195
    ASSIGN                         shift and go to state 68
    ASSIGN1                        shift and go to state 69
    FUNC_CALL                      shift and go to state 70
    READ                           shift and go to state 71
    WRITE                          shift and go to state 72
    FLOW                           shift and go to state 73
    VAR                            shift and go to state 74
    ARR_AC                         shift and go to state 75
    DECISION                       shift and go to state 79
    LOOP                           shift and go to state 80
    ARRAY                          shift and go to state 44
    WHILE_LOOP                     shift and go to state 82
    DO_WHILE_LOOP                  shift and go to state 83
    FOR_LOOP                       shift and go to state 84

state 329

    (66) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 330


state 330

    (66) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 66 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 66 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 66 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 66 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 66 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    DO_K            reduce using rule 66 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 66 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 66 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 66 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: reduce/reduce conflict in state 106 resolved using rule (ARR_ID_NP1 -> EMPTY)
WARNING: rejected rule (ARR_ID_NP -> EMPTY) in state 106
WARNING: reduce/reduce conflict in state 169 resolved using rule (CONSTANT_WRITE_N -> EMPTY)
WARNING: rejected rule (NEURAL_CNT_FACT -> EMPTY) in state 169
