Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK
Rule 2     neural_program_id -> EMPTY
Rule 3     BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
Rule 4     VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND
Rule 5     VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
Rule 6     VAR_DECL_R -> VAR_DECL
Rule 7     VAR_DECL_R -> EMPTY
Rule 8     VAR_LIST -> ID VAR_LIST2
Rule 9     VAR_LIST2 -> COMMA ID VAR_LIST2
Rule 10    VAR_LIST2 -> EMPTY
Rule 11    TYPE -> INT_K NEURAL_TYPE
Rule 12    TYPE -> FLOAT_K NEURAL_TYPE
Rule 13    TYPE -> STRING_K NEURAL_TYPE
Rule 14    NEURAL_TYPE -> EMPTY
Rule 15    PROC_BLOCK -> PROC_DECL
Rule 16    PROC_DECL -> PROC_DECL_RETURN
Rule 17    PROC_DECL -> PROC_DECL_VOID
Rule 18    PROC_DECL -> EMPTY
Rule 19    PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
Rule 20    neural_proc_void_id -> EMPTY
Rule 21    PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
Rule 22    neural_proc_return_id -> EMPTY
Rule 23    neural_param_decl -> EMPTY
Rule 24    PARAM_DECL -> TYPE ID neuro PARAM_DECL_R
Rule 25    PARAM_DECL -> EMPTY
Rule 26    neuro -> EMPTY
Rule 27    PARAM_DECL_R -> COMMA PARAM_DECL
Rule 28    PARAM_DECL_R -> EMPTY
Rule 29    PROC_BODY -> STATEMENT PROC_BODY_R
Rule 30    PROC_BODY_R -> PROC_BODY
Rule 31    PROC_BODY_R -> EMPTY
Rule 32    STATEMENT -> ASSIGN SEMICOLON
Rule 33    STATEMENT -> FUNC_CALL SEMICOLON
Rule 34    STATEMENT -> READ SEMICOLON
Rule 35    STATEMENT -> WRITE SEMICOLON
Rule 36    STATEMENT -> FLOW
Rule 37    STATEMENT_R -> STATEMENT STATEMENT_R
Rule 38    STATEMENT_R -> EMPTY
Rule 39    FLOW -> DECISION
Rule 40    FLOW -> LOOP
Rule 41    LOOP -> WHILE_LOOP
Rule 42    LOOP -> DO_WHILE_LOOP SEMICOLON
Rule 43    LOOP -> FOR_LOOP
Rule 44    DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
Rule 45    DW_PREV_NEURAL -> EMPTY
Rule 46    DW_END_NEURAL -> EMPTY
Rule 47    WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
Rule 48    WHILE_PREV_NEURAL -> EMPTY
Rule 49    WHILE_POST_NEURAL -> EMPTY
Rule 50    WHILE_END_NEURAL -> EMPTY
Rule 51    FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 52    DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
Rule 53    EXP_RESULT_NEURAL -> EMPTY
Rule 54    DECISION_END_NEURAL -> EMPTY
Rule 55    DECISION_ALT -> ELSE
Rule 56    DECISION_ALT -> EMPTY
Rule 57    ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 58    ELSE_NEURAL -> EMPTY
Rule 59    ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
Rule 60    ASSI_H_EXP_NEURAL -> EMPTY
Rule 61    EQUALS_NEURAL -> EMPTY
Rule 62    ASSIGN_VAR_N -> EMPTY
Rule 63    VAR -> ID
Rule 64    VAR -> ARRAY
Rule 65    ARRAY -> ID LBRACE INT RBRACE
Rule 66    FUNC_CALL -> ID LPAREN ARG_LIST RPAREN
Rule 67    ARG_LIST -> VAR ARG_LIST_R
Rule 68    ARG_LIST -> CONSTANT ARG_LIST_R
Rule 69    ARG_LIST -> ARG_LIST_R
Rule 70    ARG_LIST_R -> COMMA ARG_LIST
Rule 71    ARG_LIST_R -> EMPTY
Rule 72    CONSTANT -> INT
Rule 73    CONSTANT -> FLOAT
Rule 74    CONSTANT -> STRING
Rule 75    READ -> READ_K LPAREN ID_LIST RPAREN
Rule 76    ID_LIST -> ID READ_NEURAL ID_LIST_R
Rule 77    READ_NEURAL -> EMPTY
Rule 78    ID_LIST_R -> COMMA ID_LIST
Rule 79    ID_LIST_R -> EMPTY
Rule 80    WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN
Rule 81    WRITE_LIST -> H_EXPRESSION WRITE_LIST_R
Rule 82    WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
Rule 83    CONSTANT_WRITE_N -> EMPTY
Rule 84    WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST
Rule 85    WRITE_LIST_R -> WRITE_NEURAL EMPTY
Rule 86    WRITE_NEURAL -> EMPTY
Rule 87    RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
Rule 88    EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R
Rule 89    NEURAL_EXPRESSION -> EMPTY
Rule 90    EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION
Rule 91    EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION
Rule 92    EXPRESSION_R -> EMPTY
Rule 93    NEURAL_PLUS -> EMPTY
Rule 94    NEURAL_MINUS -> EMPTY
Rule 95    TERM -> FACTOR NEURAL_TERM TERM_R
Rule 96    NEURAL_TERM -> EMPTY
Rule 97    TERM_R -> TIMES NEURAL_TIMES TERM
Rule 98    TERM_R -> DIVIDE NEURAL_DIVIDE TERM
Rule 99    TERM_R -> EMPTY
Rule 100   NEURAL_TIMES -> EMPTY
Rule 101   NEURAL_DIVIDE -> EMPTY
Rule 102   FACTOR -> ID NEURAL_ID_FAC
Rule 103   FACTOR -> CONSTANT NEURAL_CNT_FACT
Rule 104   FACTOR -> LPAREN H_EXPRESSION RPAREN
Rule 105   NEURAL_ID_FAC -> EMPTY
Rule 106   NEURAL_CNT_FACT -> EMPTY
Rule 107   S_EXPRESSION -> EXPRESSION
Rule 108   S_EXPRESSION -> EXPRESSION GT EXPRESSION
Rule 109   S_EXPRESSION -> EXPRESSION LT EXPRESSION
Rule 110   S_EXPRESSION -> EXPRESSION GTE EXPRESSION
Rule 111   S_EXPRESSION -> EXPRESSION LTE EXPRESSION
Rule 112   S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION
Rule 113   H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R
Rule 114   H_EXPRESSION_R -> OR H_EXPRESSION
Rule 115   H_EXPRESSION_R -> AND H_EXPRESSION
Rule 116   H_EXPRESSION_R -> EMPTY
Rule 117   PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
Rule 118   PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R
Rule 119   PRINCIPAL_BODY -> EMPTY
Rule 120   PRINCIPAL_BODY_R -> PRINCIPAL_BODY
Rule 121   EMPTY -> <empty>

Terminals, with rules where they appear

AND                  : 115
BLOCKEND             : 4 19 21 44 47 51 52 57 117
BLOCKSTART           : 4 19 21 44 47 51 52 57 117
COLON                : 5
COMMA                : 9 27 70 78 84
COMMENT              : 
DIVIDE               : 98
DOUBLEEQUAL          : 112
DO_K                 : 44 51
ELSE_K               : 57
EQUALS               : 51 59
FLOAT                : 73
FLOAT_K              : 12
FOR_K                : 51
FUNCTION_K           : 19 21
GT                   : 108
GTE                  : 110
ID                   : 1 8 9 19 21 24 51 63 65 66 76 102
IF_K                 : 52
INT                  : 51 51 65 72
INT_K                : 11
LBRACE               : 65
LPAREN               : 19 21 44 47 52 66 75 80 87 104 117
LT                   : 109
LTE                  : 111
MAIN_K               : 117
MINUS                : 91
OR                   : 114
PLUS                 : 90
PROGRAM_K            : 1
RBRACE               : 65
READ_K               : 75
RETURN_K             : 87
RPAREN               : 19 21 44 47 52 66 75 80 87 104 117
SEMICOLON            : 1 5 32 33 34 35 42 87
STRING               : 74
STRING_K             : 13
TIMES                : 97
TO_K                 : 51
VARS_K               : 4
VOID_K               : 19
WHILE_K              : 44 47
WRITE_K              : 80
error                : 

Nonterminals, with rules where they appear

ARG_LIST             : 66 70
ARG_LIST_R           : 67 68 69
ARRAY                : 64
ASSIGN               : 32
ASSIGN_VAR_N         : 59
ASSI_H_EXP_NEURAL    : 59
BLOCK                : 1
CONSTANT             : 68 82 103
CONSTANT_WRITE_N     : 82
DECISION             : 39
DECISION_ALT         : 52
DECISION_END_NEURAL  : 52
DO_WHILE_LOOP        : 42
DW_END_NEURAL        : 44
DW_PREV_NEURAL       : 44
ELSE                 : 55
ELSE_NEURAL          : 57
EMPTY                : 2 7 10 14 18 20 22 23 25 26 28 31 38 45 46 48 49 50 53 54 56 58 60 61 62 71 77 79 83 85 86 89 92 93 94 96 99 100 101 105 106 116 119
EQUALS_NEURAL        : 59
EXPRESSION           : 90 91 107 108 108 109 109 110 110 111 111 112 112
EXPRESSION_R         : 88
EXP_RESULT_NEURAL    : 52
FACTOR               : 95
FLOW                 : 36
FOR_LOOP             : 43
FUNC_CALL            : 33
H_EXPRESSION         : 44 47 52 59 81 87 104 114 115
H_EXPRESSION_R       : 113
ID_LIST              : 75 78
ID_LIST_R            : 76
LOOP                 : 40
NEURAL_CNT_FACT      : 103
NEURAL_DIVIDE        : 98
NEURAL_EXPRESSION    : 88
NEURAL_ID_FAC        : 102
NEURAL_MINUS         : 91
NEURAL_PLUS          : 90
NEURAL_TERM          : 95
NEURAL_TIMES         : 97
NEURAL_TYPE          : 11 12 13
PARAM_DECL           : 19 21 27
PARAM_DECL_R         : 24
PRINCIPAL_BLOCK      : 3
PRINCIPAL_BODY       : 117 120
PRINCIPAL_BODY_R     : 118
PROC_BLOCK           : 3
PROC_BODY            : 19 21 30
PROC_BODY_R          : 29
PROC_DECL            : 15 19 21
PROC_DECL_RETURN     : 16
PROC_DECL_VOID       : 17
PROGRAM              : 0
READ                 : 34
READ_NEURAL          : 76
RETURN               : 21
STATEMENT            : 29 37 118
STATEMENT_R          : 37 44 47 51 52 57
S_EXPRESSION         : 113
TERM                 : 88 97 98
TERM_R               : 95
TYPE                 : 5 21 24
VAR                  : 59 67
VAR_BLOCK            : 3
VAR_DECL             : 4 6
VAR_DECL_R           : 5
VAR_LIST             : 5
VAR_LIST2            : 8 9
WHILE_END_NEURAL     : 47
WHILE_LOOP           : 41
WHILE_POST_NEURAL    : 47
WHILE_PREV_NEURAL    : 47
WRITE                : 35
WRITE_LIST           : 80 84
WRITE_LIST_R         : 81 82
WRITE_NEURAL         : 84 85
neural_param_decl    : 19 21
neural_proc_return_id : 21
neural_proc_void_id  : 19
neural_program_id    : 1
neuro                : 24

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROGRAM_K ID neural_program_id SEMICOLON BLOCK

    PROGRAM_K       shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROGRAM_K . ID neural_program_id SEMICOLON BLOCK

    ID              shift and go to state 3


state 3

    (1) PROGRAM -> PROGRAM_K ID . neural_program_id SEMICOLON BLOCK
    (2) neural_program_id -> . EMPTY
    (121) EMPTY -> .

    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    neural_program_id              shift and go to state 4
    EMPTY                          shift and go to state 5

state 4

    (1) PROGRAM -> PROGRAM_K ID neural_program_id . SEMICOLON BLOCK

    SEMICOLON       shift and go to state 6


state 5

    (2) neural_program_id -> EMPTY .

    SEMICOLON       reduce using rule 2 (neural_program_id -> EMPTY .)


state 6

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON . BLOCK
    (3) BLOCK -> . VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
    (4) VAR_BLOCK -> . VARS_K BLOCKSTART VAR_DECL BLOCKEND

    VARS_K          shift and go to state 9

    BLOCK                          shift and go to state 7
    VAR_BLOCK                      shift and go to state 8

state 7

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .

    $end            reduce using rule 1 (PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .)


state 8

    (3) BLOCK -> VAR_BLOCK . PROC_BLOCK PRINCIPAL_BLOCK
    (15) PROC_BLOCK -> . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (121) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 121 (EMPTY -> .)

    PROC_BLOCK                     shift and go to state 10
    PROC_DECL                      shift and go to state 11
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 9

    (4) VAR_BLOCK -> VARS_K . BLOCKSTART VAR_DECL BLOCKEND

    BLOCKSTART      shift and go to state 16


state 10

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK . PRINCIPAL_BLOCK
    (117) PRINCIPAL_BLOCK -> . MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    MAIN_K          shift and go to state 18

    PRINCIPAL_BLOCK                shift and go to state 17

state 11

    (15) PROC_BLOCK -> PROC_DECL .

    MAIN_K          reduce using rule 15 (PROC_BLOCK -> PROC_DECL .)


state 12

    (16) PROC_DECL -> PROC_DECL_RETURN .

    MAIN_K          reduce using rule 16 (PROC_DECL -> PROC_DECL_RETURN .)


state 13

    (17) PROC_DECL -> PROC_DECL_VOID .

    MAIN_K          reduce using rule 17 (PROC_DECL -> PROC_DECL_VOID .)


state 14

    (18) PROC_DECL -> EMPTY .

    MAIN_K          reduce using rule 18 (PROC_DECL -> EMPTY .)


state 15

    (21) PROC_DECL_RETURN -> FUNCTION_K . TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (19) PROC_DECL_VOID -> FUNCTION_K . VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    VOID_K          shift and go to state 20
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 19

state 16

    (4) VAR_BLOCK -> VARS_K BLOCKSTART . VAR_DECL BLOCKEND
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    VAR_DECL                       shift and go to state 24
    TYPE                           shift and go to state 25

state 17

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .

    $end            reduce using rule 3 (BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .)


state 18

    (117) PRINCIPAL_BLOCK -> MAIN_K . LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    LPAREN          shift and go to state 26


state 19

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE . ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    ID              shift and go to state 27


state 20

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K . ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    ID              shift and go to state 28


state 21

    (11) TYPE -> INT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (121) EMPTY -> .

    ID              reduce using rule 121 (EMPTY -> .)
    COLON           reduce using rule 121 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 29
    EMPTY                          shift and go to state 30

state 22

    (12) TYPE -> FLOAT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (121) EMPTY -> .

    ID              reduce using rule 121 (EMPTY -> .)
    COLON           reduce using rule 121 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 31
    EMPTY                          shift and go to state 30

state 23

    (13) TYPE -> STRING_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (121) EMPTY -> .

    ID              reduce using rule 121 (EMPTY -> .)
    COLON           reduce using rule 121 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 32
    EMPTY                          shift and go to state 30

state 24

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL . BLOCKEND

    BLOCKEND        shift and go to state 33


state 25

    (5) VAR_DECL -> TYPE . COLON VAR_LIST SEMICOLON VAR_DECL_R

    COLON           shift and go to state 34


state 26

    (117) PRINCIPAL_BLOCK -> MAIN_K LPAREN . RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    RPAREN          shift and go to state 35


state 27

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID . neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (22) neural_proc_return_id -> . EMPTY
    (121) EMPTY -> .

    LPAREN          reduce using rule 121 (EMPTY -> .)

    neural_proc_return_id          shift and go to state 36
    EMPTY                          shift and go to state 37

state 28

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID . neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (20) neural_proc_void_id -> . EMPTY
    (121) EMPTY -> .

    LPAREN          reduce using rule 121 (EMPTY -> .)

    neural_proc_void_id            shift and go to state 38
    EMPTY                          shift and go to state 39

state 29

    (11) TYPE -> INT_K NEURAL_TYPE .

    ID              reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)
    COLON           reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)


state 30

    (14) NEURAL_TYPE -> EMPTY .

    ID              reduce using rule 14 (NEURAL_TYPE -> EMPTY .)
    COLON           reduce using rule 14 (NEURAL_TYPE -> EMPTY .)


state 31

    (12) TYPE -> FLOAT_K NEURAL_TYPE .

    ID              reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)
    COLON           reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)


state 32

    (13) TYPE -> STRING_K NEURAL_TYPE .

    ID              reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)
    COLON           reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)


state 33

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .

    FUNCTION_K      reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)
    MAIN_K          reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)


state 34

    (5) VAR_DECL -> TYPE COLON . VAR_LIST SEMICOLON VAR_DECL_R
    (8) VAR_LIST -> . ID VAR_LIST2

    ID              shift and go to state 41

    VAR_LIST                       shift and go to state 40

state 35

    (117) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN . BLOCKSTART PRINCIPAL_BODY BLOCKEND

    BLOCKSTART      shift and go to state 42


state 36

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    LPAREN          shift and go to state 43


state 37

    (22) neural_proc_return_id -> EMPTY .

    LPAREN          reduce using rule 22 (neural_proc_return_id -> EMPTY .)


state 38

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    LPAREN          shift and go to state 44


state 39

    (20) neural_proc_void_id -> EMPTY .

    LPAREN          reduce using rule 20 (neural_proc_void_id -> EMPTY .)


state 40

    (5) VAR_DECL -> TYPE COLON VAR_LIST . SEMICOLON VAR_DECL_R

    SEMICOLON       shift and go to state 45


state 41

    (8) VAR_LIST -> ID . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA ID VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (121) EMPTY -> .

    COMMA           shift and go to state 47
    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 46
    EMPTY                          shift and go to state 48

state 42

    (117) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART . PRINCIPAL_BODY BLOCKEND
    (118) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (119) PRINCIPAL_BODY -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (121) EMPTY -> .
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    PRINCIPAL_BODY                 shift and go to state 49
    STATEMENT                      shift and go to state 50
    EMPTY                          shift and go to state 51
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 43

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (24) PARAM_DECL -> . TYPE ID neuro PARAM_DECL_R
    (25) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (121) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 121 (EMPTY -> .)

    TYPE                           shift and go to state 71
    PARAM_DECL                     shift and go to state 72
    EMPTY                          shift and go to state 73

state 44

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (24) PARAM_DECL -> . TYPE ID neuro PARAM_DECL_R
    (25) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (121) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 121 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 74
    TYPE                           shift and go to state 71
    EMPTY                          shift and go to state 73

state 45

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON . VAR_DECL_R
    (6) VAR_DECL_R -> . VAR_DECL
    (7) VAR_DECL_R -> . EMPTY
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (121) EMPTY -> .
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 25
    VAR_DECL_R                     shift and go to state 75
    VAR_DECL                       shift and go to state 76
    EMPTY                          shift and go to state 77

state 46

    (8) VAR_LIST -> ID VAR_LIST2 .

    SEMICOLON       reduce using rule 8 (VAR_LIST -> ID VAR_LIST2 .)


state 47

    (9) VAR_LIST2 -> COMMA . ID VAR_LIST2

    ID              shift and go to state 78


state 48

    (10) VAR_LIST2 -> EMPTY .

    SEMICOLON       reduce using rule 10 (VAR_LIST2 -> EMPTY .)


state 49

    (117) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY . BLOCKEND

    BLOCKEND        shift and go to state 79


state 50

    (118) PRINCIPAL_BODY -> STATEMENT . PRINCIPAL_BODY_R
    (120) PRINCIPAL_BODY_R -> . PRINCIPAL_BODY
    (118) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (119) PRINCIPAL_BODY -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (121) EMPTY -> .
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    STATEMENT                      shift and go to state 50
    PRINCIPAL_BODY_R               shift and go to state 80
    PRINCIPAL_BODY                 shift and go to state 81
    EMPTY                          shift and go to state 51
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 51

    (119) PRINCIPAL_BODY -> EMPTY .

    BLOCKEND        reduce using rule 119 (PRINCIPAL_BODY -> EMPTY .)


state 52

    (32) STATEMENT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 82


state 53

    (33) STATEMENT -> FUNC_CALL . SEMICOLON

    SEMICOLON       shift and go to state 83


state 54

    (34) STATEMENT -> READ . SEMICOLON

    SEMICOLON       shift and go to state 84


state 55

    (35) STATEMENT -> WRITE . SEMICOLON

    SEMICOLON       shift and go to state 85


state 56

    (36) STATEMENT -> FLOW .

    ID              reduce using rule 36 (STATEMENT -> FLOW .)
    READ_K          reduce using rule 36 (STATEMENT -> FLOW .)
    WRITE_K         reduce using rule 36 (STATEMENT -> FLOW .)
    IF_K            reduce using rule 36 (STATEMENT -> FLOW .)
    WHILE_K         reduce using rule 36 (STATEMENT -> FLOW .)
    DO_K            reduce using rule 36 (STATEMENT -> FLOW .)
    FOR_K           reduce using rule 36 (STATEMENT -> FLOW .)
    BLOCKEND        reduce using rule 36 (STATEMENT -> FLOW .)
    RETURN_K        reduce using rule 36 (STATEMENT -> FLOW .)


state 57

    (59) ASSIGN -> VAR . ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (62) ASSIGN_VAR_N -> . EMPTY
    (121) EMPTY -> .

    EQUALS          reduce using rule 121 (EMPTY -> .)

    ASSIGN_VAR_N                   shift and go to state 86
    EMPTY                          shift and go to state 87

state 58

    (66) FUNC_CALL -> ID . LPAREN ARG_LIST RPAREN
    (63) VAR -> ID .
    (65) ARRAY -> ID . LBRACE INT RBRACE

    LPAREN          shift and go to state 88
    EQUALS          reduce using rule 63 (VAR -> ID .)
    LBRACE          shift and go to state 89


state 59

    (75) READ -> READ_K . LPAREN ID_LIST RPAREN

    LPAREN          shift and go to state 90


state 60

    (80) WRITE -> WRITE_K . LPAREN WRITE_LIST RPAREN

    LPAREN          shift and go to state 91


state 61

    (39) FLOW -> DECISION .

    ID              reduce using rule 39 (FLOW -> DECISION .)
    READ_K          reduce using rule 39 (FLOW -> DECISION .)
    WRITE_K         reduce using rule 39 (FLOW -> DECISION .)
    IF_K            reduce using rule 39 (FLOW -> DECISION .)
    WHILE_K         reduce using rule 39 (FLOW -> DECISION .)
    DO_K            reduce using rule 39 (FLOW -> DECISION .)
    FOR_K           reduce using rule 39 (FLOW -> DECISION .)
    BLOCKEND        reduce using rule 39 (FLOW -> DECISION .)
    RETURN_K        reduce using rule 39 (FLOW -> DECISION .)


state 62

    (40) FLOW -> LOOP .

    ID              reduce using rule 40 (FLOW -> LOOP .)
    READ_K          reduce using rule 40 (FLOW -> LOOP .)
    WRITE_K         reduce using rule 40 (FLOW -> LOOP .)
    IF_K            reduce using rule 40 (FLOW -> LOOP .)
    WHILE_K         reduce using rule 40 (FLOW -> LOOP .)
    DO_K            reduce using rule 40 (FLOW -> LOOP .)
    FOR_K           reduce using rule 40 (FLOW -> LOOP .)
    BLOCKEND        reduce using rule 40 (FLOW -> LOOP .)
    RETURN_K        reduce using rule 40 (FLOW -> LOOP .)


state 63

    (64) VAR -> ARRAY .

    EQUALS          reduce using rule 64 (VAR -> ARRAY .)
    COMMA           reduce using rule 64 (VAR -> ARRAY .)
    RPAREN          reduce using rule 64 (VAR -> ARRAY .)


state 64

    (52) DECISION -> IF_K . LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    LPAREN          shift and go to state 92


state 65

    (41) LOOP -> WHILE_LOOP .

    ID              reduce using rule 41 (LOOP -> WHILE_LOOP .)
    READ_K          reduce using rule 41 (LOOP -> WHILE_LOOP .)
    WRITE_K         reduce using rule 41 (LOOP -> WHILE_LOOP .)
    IF_K            reduce using rule 41 (LOOP -> WHILE_LOOP .)
    WHILE_K         reduce using rule 41 (LOOP -> WHILE_LOOP .)
    DO_K            reduce using rule 41 (LOOP -> WHILE_LOOP .)
    FOR_K           reduce using rule 41 (LOOP -> WHILE_LOOP .)
    BLOCKEND        reduce using rule 41 (LOOP -> WHILE_LOOP .)
    RETURN_K        reduce using rule 41 (LOOP -> WHILE_LOOP .)


state 66

    (42) LOOP -> DO_WHILE_LOOP . SEMICOLON

    SEMICOLON       shift and go to state 93


state 67

    (43) LOOP -> FOR_LOOP .

    ID              reduce using rule 43 (LOOP -> FOR_LOOP .)
    READ_K          reduce using rule 43 (LOOP -> FOR_LOOP .)
    WRITE_K         reduce using rule 43 (LOOP -> FOR_LOOP .)
    IF_K            reduce using rule 43 (LOOP -> FOR_LOOP .)
    WHILE_K         reduce using rule 43 (LOOP -> FOR_LOOP .)
    DO_K            reduce using rule 43 (LOOP -> FOR_LOOP .)
    FOR_K           reduce using rule 43 (LOOP -> FOR_LOOP .)
    BLOCKEND        reduce using rule 43 (LOOP -> FOR_LOOP .)
    RETURN_K        reduce using rule 43 (LOOP -> FOR_LOOP .)


state 68

    (47) WHILE_LOOP -> WHILE_K . WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (48) WHILE_PREV_NEURAL -> . EMPTY
    (121) EMPTY -> .

    LPAREN          reduce using rule 121 (EMPTY -> .)

    WHILE_PREV_NEURAL              shift and go to state 94
    EMPTY                          shift and go to state 95

state 69

    (44) DO_WHILE_LOOP -> DO_K . DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (45) DW_PREV_NEURAL -> . EMPTY
    (121) EMPTY -> .

    BLOCKSTART      reduce using rule 121 (EMPTY -> .)

    DW_PREV_NEURAL                 shift and go to state 96
    EMPTY                          shift and go to state 97

state 70

    (51) FOR_LOOP -> FOR_K . ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 98


state 71

    (24) PARAM_DECL -> TYPE . ID neuro PARAM_DECL_R

    ID              shift and go to state 99


state 72

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    RPAREN          shift and go to state 100


state 73

    (25) PARAM_DECL -> EMPTY .

    RPAREN          reduce using rule 25 (PARAM_DECL -> EMPTY .)


state 74

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    RPAREN          shift and go to state 101


state 75

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .

    BLOCKEND        reduce using rule 5 (VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .)


state 76

    (6) VAR_DECL_R -> VAR_DECL .

    BLOCKEND        reduce using rule 6 (VAR_DECL_R -> VAR_DECL .)


state 77

    (7) VAR_DECL_R -> EMPTY .

    BLOCKEND        reduce using rule 7 (VAR_DECL_R -> EMPTY .)


state 78

    (9) VAR_LIST2 -> COMMA ID . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA ID VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (121) EMPTY -> .

    COMMA           shift and go to state 47
    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 102
    EMPTY                          shift and go to state 48

state 79

    (117) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .

    $end            reduce using rule 117 (PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .)


state 80

    (118) PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .

    BLOCKEND        reduce using rule 118 (PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .)


state 81

    (120) PRINCIPAL_BODY_R -> PRINCIPAL_BODY .

    BLOCKEND        reduce using rule 120 (PRINCIPAL_BODY_R -> PRINCIPAL_BODY .)


state 82

    (32) STATEMENT -> ASSIGN SEMICOLON .

    ID              reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    READ_K          reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    WRITE_K         reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    IF_K            reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    WHILE_K         reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    DO_K            reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    FOR_K           reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    BLOCKEND        reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    RETURN_K        reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)


state 83

    (33) STATEMENT -> FUNC_CALL SEMICOLON .

    ID              reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    READ_K          reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WRITE_K         reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    IF_K            reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WHILE_K         reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    DO_K            reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    FOR_K           reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    BLOCKEND        reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    RETURN_K        reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)


state 84

    (34) STATEMENT -> READ SEMICOLON .

    ID              reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    READ_K          reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    WRITE_K         reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    IF_K            reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    WHILE_K         reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    DO_K            reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    FOR_K           reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    BLOCKEND        reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    RETURN_K        reduce using rule 34 (STATEMENT -> READ SEMICOLON .)


state 85

    (35) STATEMENT -> WRITE SEMICOLON .

    ID              reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    READ_K          reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    WRITE_K         reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    IF_K            reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    WHILE_K         reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    DO_K            reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    FOR_K           reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    BLOCKEND        reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    RETURN_K        reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)


state 86

    (59) ASSIGN -> VAR ASSIGN_VAR_N . EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL

    EQUALS          shift and go to state 103


state 87

    (62) ASSIGN_VAR_N -> EMPTY .

    EQUALS          reduce using rule 62 (ASSIGN_VAR_N -> EMPTY .)


state 88

    (66) FUNC_CALL -> ID LPAREN . ARG_LIST RPAREN
    (67) ARG_LIST -> . VAR ARG_LIST_R
    (68) ARG_LIST -> . CONSTANT ARG_LIST_R
    (69) ARG_LIST -> . ARG_LIST_R
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING
    (70) ARG_LIST_R -> . COMMA ARG_LIST
    (71) ARG_LIST_R -> . EMPTY
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (121) EMPTY -> .

    ID              shift and go to state 104
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111
    COMMA           shift and go to state 112
    RPAREN          reduce using rule 121 (EMPTY -> .)

    ARG_LIST                       shift and go to state 105
    VAR                            shift and go to state 106
    ARG_LIST_R                     shift and go to state 107
    CONSTANT                       shift and go to state 108
    ARRAY                          shift and go to state 63
    EMPTY                          shift and go to state 113

state 89

    (65) ARRAY -> ID LBRACE . INT RBRACE

    INT             shift and go to state 114


state 90

    (75) READ -> READ_K LPAREN . ID_LIST RPAREN
    (76) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 116

    ID_LIST                        shift and go to state 115

state 91

    (80) WRITE -> WRITE_K LPAREN . WRITE_LIST RPAREN
    (81) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (82) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (113) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING
    (107) S_EXPRESSION -> . EXPRESSION
    (108) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (109) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (110) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (111) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (112) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111
    ID              shift and go to state 125
    LPAREN          shift and go to state 117

    WRITE_LIST                     shift and go to state 118
    H_EXPRESSION                   shift and go to state 119
    CONSTANT                       shift and go to state 120
    S_EXPRESSION                   shift and go to state 121
    EXPRESSION                     shift and go to state 122
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124

state 92

    (52) DECISION -> IF_K LPAREN . H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (113) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (107) S_EXPRESSION -> . EXPRESSION
    (108) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (109) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (110) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (111) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (112) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    H_EXPRESSION                   shift and go to state 126
    S_EXPRESSION                   shift and go to state 121
    EXPRESSION                     shift and go to state 122
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 93

    (42) LOOP -> DO_WHILE_LOOP SEMICOLON .

    ID              reduce using rule 42 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    READ_K          reduce using rule 42 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    WRITE_K         reduce using rule 42 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    IF_K            reduce using rule 42 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    WHILE_K         reduce using rule 42 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    DO_K            reduce using rule 42 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    FOR_K           reduce using rule 42 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    BLOCKEND        reduce using rule 42 (LOOP -> DO_WHILE_LOOP SEMICOLON .)
    RETURN_K        reduce using rule 42 (LOOP -> DO_WHILE_LOOP SEMICOLON .)


state 94

    (47) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL . LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    LPAREN          shift and go to state 128


state 95

    (48) WHILE_PREV_NEURAL -> EMPTY .

    LPAREN          reduce using rule 48 (WHILE_PREV_NEURAL -> EMPTY .)


state 96

    (44) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    BLOCKSTART      shift and go to state 129


state 97

    (45) DW_PREV_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 45 (DW_PREV_NEURAL -> EMPTY .)


state 98

    (51) FOR_LOOP -> FOR_K ID . EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    EQUALS          shift and go to state 130


state 99

    (24) PARAM_DECL -> TYPE ID . neuro PARAM_DECL_R
    (26) neuro -> . EMPTY
    (121) EMPTY -> .

    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)

    neuro                          shift and go to state 131
    EMPTY                          shift and go to state 132

state 100

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (23) neural_param_decl -> . EMPTY
    (121) EMPTY -> .

    BLOCKSTART      reduce using rule 121 (EMPTY -> .)

    neural_param_decl              shift and go to state 133
    EMPTY                          shift and go to state 134

state 101

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (23) neural_param_decl -> . EMPTY
    (121) EMPTY -> .

    BLOCKSTART      reduce using rule 121 (EMPTY -> .)

    neural_param_decl              shift and go to state 135
    EMPTY                          shift and go to state 134

state 102

    (9) VAR_LIST2 -> COMMA ID VAR_LIST2 .

    SEMICOLON       reduce using rule 9 (VAR_LIST2 -> COMMA ID VAR_LIST2 .)


state 103

    (59) ASSIGN -> VAR ASSIGN_VAR_N EQUALS . EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (61) EQUALS_NEURAL -> . EMPTY
    (121) EMPTY -> .

    ID              reduce using rule 121 (EMPTY -> .)
    LPAREN          reduce using rule 121 (EMPTY -> .)
    INT             reduce using rule 121 (EMPTY -> .)
    FLOAT           reduce using rule 121 (EMPTY -> .)
    STRING          reduce using rule 121 (EMPTY -> .)

    EQUALS_NEURAL                  shift and go to state 136
    EMPTY                          shift and go to state 137

state 104

    (63) VAR -> ID .
    (65) ARRAY -> ID . LBRACE INT RBRACE

    COMMA           reduce using rule 63 (VAR -> ID .)
    RPAREN          reduce using rule 63 (VAR -> ID .)
    LBRACE          shift and go to state 89


state 105

    (66) FUNC_CALL -> ID LPAREN ARG_LIST . RPAREN

    RPAREN          shift and go to state 138


state 106

    (67) ARG_LIST -> VAR . ARG_LIST_R
    (70) ARG_LIST_R -> . COMMA ARG_LIST
    (71) ARG_LIST_R -> . EMPTY
    (121) EMPTY -> .

    COMMA           shift and go to state 112
    RPAREN          reduce using rule 121 (EMPTY -> .)

    ARG_LIST_R                     shift and go to state 139
    EMPTY                          shift and go to state 113

state 107

    (69) ARG_LIST -> ARG_LIST_R .

    RPAREN          reduce using rule 69 (ARG_LIST -> ARG_LIST_R .)


state 108

    (68) ARG_LIST -> CONSTANT . ARG_LIST_R
    (70) ARG_LIST_R -> . COMMA ARG_LIST
    (71) ARG_LIST_R -> . EMPTY
    (121) EMPTY -> .

    COMMA           shift and go to state 112
    RPAREN          reduce using rule 121 (EMPTY -> .)

    ARG_LIST_R                     shift and go to state 140
    EMPTY                          shift and go to state 113

state 109

    (72) CONSTANT -> INT .

    COMMA           reduce using rule 72 (CONSTANT -> INT .)
    RPAREN          reduce using rule 72 (CONSTANT -> INT .)
    TIMES           reduce using rule 72 (CONSTANT -> INT .)
    DIVIDE          reduce using rule 72 (CONSTANT -> INT .)
    PLUS            reduce using rule 72 (CONSTANT -> INT .)
    MINUS           reduce using rule 72 (CONSTANT -> INT .)
    GT              reduce using rule 72 (CONSTANT -> INT .)
    LT              reduce using rule 72 (CONSTANT -> INT .)
    GTE             reduce using rule 72 (CONSTANT -> INT .)
    LTE             reduce using rule 72 (CONSTANT -> INT .)
    DOUBLEEQUAL     reduce using rule 72 (CONSTANT -> INT .)
    OR              reduce using rule 72 (CONSTANT -> INT .)
    AND             reduce using rule 72 (CONSTANT -> INT .)
    SEMICOLON       reduce using rule 72 (CONSTANT -> INT .)


state 110

    (73) CONSTANT -> FLOAT .

    COMMA           reduce using rule 73 (CONSTANT -> FLOAT .)
    RPAREN          reduce using rule 73 (CONSTANT -> FLOAT .)
    TIMES           reduce using rule 73 (CONSTANT -> FLOAT .)
    DIVIDE          reduce using rule 73 (CONSTANT -> FLOAT .)
    PLUS            reduce using rule 73 (CONSTANT -> FLOAT .)
    MINUS           reduce using rule 73 (CONSTANT -> FLOAT .)
    GT              reduce using rule 73 (CONSTANT -> FLOAT .)
    LT              reduce using rule 73 (CONSTANT -> FLOAT .)
    GTE             reduce using rule 73 (CONSTANT -> FLOAT .)
    LTE             reduce using rule 73 (CONSTANT -> FLOAT .)
    DOUBLEEQUAL     reduce using rule 73 (CONSTANT -> FLOAT .)
    OR              reduce using rule 73 (CONSTANT -> FLOAT .)
    AND             reduce using rule 73 (CONSTANT -> FLOAT .)
    SEMICOLON       reduce using rule 73 (CONSTANT -> FLOAT .)


state 111

    (74) CONSTANT -> STRING .

    COMMA           reduce using rule 74 (CONSTANT -> STRING .)
    RPAREN          reduce using rule 74 (CONSTANT -> STRING .)
    TIMES           reduce using rule 74 (CONSTANT -> STRING .)
    DIVIDE          reduce using rule 74 (CONSTANT -> STRING .)
    PLUS            reduce using rule 74 (CONSTANT -> STRING .)
    MINUS           reduce using rule 74 (CONSTANT -> STRING .)
    GT              reduce using rule 74 (CONSTANT -> STRING .)
    LT              reduce using rule 74 (CONSTANT -> STRING .)
    GTE             reduce using rule 74 (CONSTANT -> STRING .)
    LTE             reduce using rule 74 (CONSTANT -> STRING .)
    DOUBLEEQUAL     reduce using rule 74 (CONSTANT -> STRING .)
    OR              reduce using rule 74 (CONSTANT -> STRING .)
    AND             reduce using rule 74 (CONSTANT -> STRING .)
    SEMICOLON       reduce using rule 74 (CONSTANT -> STRING .)


state 112

    (70) ARG_LIST_R -> COMMA . ARG_LIST
    (67) ARG_LIST -> . VAR ARG_LIST_R
    (68) ARG_LIST -> . CONSTANT ARG_LIST_R
    (69) ARG_LIST -> . ARG_LIST_R
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING
    (70) ARG_LIST_R -> . COMMA ARG_LIST
    (71) ARG_LIST_R -> . EMPTY
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (121) EMPTY -> .

    ID              shift and go to state 104
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111
    COMMA           shift and go to state 112
    RPAREN          reduce using rule 121 (EMPTY -> .)

    ARG_LIST                       shift and go to state 141
    VAR                            shift and go to state 106
    ARG_LIST_R                     shift and go to state 107
    CONSTANT                       shift and go to state 108
    ARRAY                          shift and go to state 63
    EMPTY                          shift and go to state 113

state 113

    (71) ARG_LIST_R -> EMPTY .

    RPAREN          reduce using rule 71 (ARG_LIST_R -> EMPTY .)


state 114

    (65) ARRAY -> ID LBRACE INT . RBRACE

    RBRACE          shift and go to state 142


state 115

    (75) READ -> READ_K LPAREN ID_LIST . RPAREN

    RPAREN          shift and go to state 143


state 116

    (76) ID_LIST -> ID . READ_NEURAL ID_LIST_R
    (77) READ_NEURAL -> . EMPTY
    (121) EMPTY -> .

    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)

    READ_NEURAL                    shift and go to state 144
    EMPTY                          shift and go to state 145

state 117

    (104) FACTOR -> LPAREN . H_EXPRESSION RPAREN
    (113) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (107) S_EXPRESSION -> . EXPRESSION
    (108) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (109) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (110) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (111) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (112) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    H_EXPRESSION                   shift and go to state 146
    S_EXPRESSION                   shift and go to state 121
    EXPRESSION                     shift and go to state 122
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 118

    (80) WRITE -> WRITE_K LPAREN WRITE_LIST . RPAREN

    RPAREN          shift and go to state 147


state 119

    (81) WRITE_LIST -> H_EXPRESSION . WRITE_LIST_R
    (84) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (85) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (86) WRITE_NEURAL -> . EMPTY
    (121) EMPTY -> .

    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 148
    WRITE_NEURAL                   shift and go to state 149
    EMPTY                          shift and go to state 150

state 120

    (82) WRITE_LIST -> CONSTANT . CONSTANT_WRITE_N WRITE_LIST_R
    (103) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (83) CONSTANT_WRITE_N -> . EMPTY
    (106) NEURAL_CNT_FACT -> . EMPTY
    (121) EMPTY -> .

    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)
    TIMES           reduce using rule 121 (EMPTY -> .)
    DIVIDE          reduce using rule 121 (EMPTY -> .)
    PLUS            reduce using rule 121 (EMPTY -> .)
    MINUS           reduce using rule 121 (EMPTY -> .)
    GT              reduce using rule 121 (EMPTY -> .)
    LT              reduce using rule 121 (EMPTY -> .)
    GTE             reduce using rule 121 (EMPTY -> .)
    LTE             reduce using rule 121 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 121 (EMPTY -> .)
    OR              reduce using rule 121 (EMPTY -> .)
    AND             reduce using rule 121 (EMPTY -> .)

    CONSTANT_WRITE_N               shift and go to state 151
    NEURAL_CNT_FACT                shift and go to state 152
    EMPTY                          shift and go to state 153

state 121

    (113) H_EXPRESSION -> S_EXPRESSION . H_EXPRESSION_R
    (114) H_EXPRESSION_R -> . OR H_EXPRESSION
    (115) H_EXPRESSION_R -> . AND H_EXPRESSION
    (116) H_EXPRESSION_R -> . EMPTY
    (121) EMPTY -> .

    OR              shift and go to state 155
    AND             shift and go to state 156
    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)
    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    H_EXPRESSION_R                 shift and go to state 154
    EMPTY                          shift and go to state 157

state 122

    (107) S_EXPRESSION -> EXPRESSION .
    (108) S_EXPRESSION -> EXPRESSION . GT EXPRESSION
    (109) S_EXPRESSION -> EXPRESSION . LT EXPRESSION
    (110) S_EXPRESSION -> EXPRESSION . GTE EXPRESSION
    (111) S_EXPRESSION -> EXPRESSION . LTE EXPRESSION
    (112) S_EXPRESSION -> EXPRESSION . DOUBLEEQUAL EXPRESSION

    OR              reduce using rule 107 (S_EXPRESSION -> EXPRESSION .)
    AND             reduce using rule 107 (S_EXPRESSION -> EXPRESSION .)
    COMMA           reduce using rule 107 (S_EXPRESSION -> EXPRESSION .)
    RPAREN          reduce using rule 107 (S_EXPRESSION -> EXPRESSION .)
    SEMICOLON       reduce using rule 107 (S_EXPRESSION -> EXPRESSION .)
    GT              shift and go to state 158
    LT              shift and go to state 159
    GTE             shift and go to state 160
    LTE             shift and go to state 161
    DOUBLEEQUAL     shift and go to state 162


state 123

    (88) EXPRESSION -> TERM . NEURAL_EXPRESSION EXPRESSION_R
    (89) NEURAL_EXPRESSION -> . EMPTY
    (121) EMPTY -> .

    PLUS            reduce using rule 121 (EMPTY -> .)
    MINUS           reduce using rule 121 (EMPTY -> .)
    GT              reduce using rule 121 (EMPTY -> .)
    LT              reduce using rule 121 (EMPTY -> .)
    GTE             reduce using rule 121 (EMPTY -> .)
    LTE             reduce using rule 121 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 121 (EMPTY -> .)
    OR              reduce using rule 121 (EMPTY -> .)
    AND             reduce using rule 121 (EMPTY -> .)
    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)
    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    NEURAL_EXPRESSION              shift and go to state 163
    EMPTY                          shift and go to state 164

state 124

    (95) TERM -> FACTOR . NEURAL_TERM TERM_R
    (96) NEURAL_TERM -> . EMPTY
    (121) EMPTY -> .

    TIMES           reduce using rule 121 (EMPTY -> .)
    DIVIDE          reduce using rule 121 (EMPTY -> .)
    PLUS            reduce using rule 121 (EMPTY -> .)
    MINUS           reduce using rule 121 (EMPTY -> .)
    GT              reduce using rule 121 (EMPTY -> .)
    LT              reduce using rule 121 (EMPTY -> .)
    GTE             reduce using rule 121 (EMPTY -> .)
    LTE             reduce using rule 121 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 121 (EMPTY -> .)
    OR              reduce using rule 121 (EMPTY -> .)
    AND             reduce using rule 121 (EMPTY -> .)
    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)
    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    NEURAL_TERM                    shift and go to state 165
    EMPTY                          shift and go to state 166

state 125

    (102) FACTOR -> ID . NEURAL_ID_FAC
    (105) NEURAL_ID_FAC -> . EMPTY
    (121) EMPTY -> .

    TIMES           reduce using rule 121 (EMPTY -> .)
    DIVIDE          reduce using rule 121 (EMPTY -> .)
    PLUS            reduce using rule 121 (EMPTY -> .)
    MINUS           reduce using rule 121 (EMPTY -> .)
    GT              reduce using rule 121 (EMPTY -> .)
    LT              reduce using rule 121 (EMPTY -> .)
    GTE             reduce using rule 121 (EMPTY -> .)
    LTE             reduce using rule 121 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 121 (EMPTY -> .)
    OR              reduce using rule 121 (EMPTY -> .)
    AND             reduce using rule 121 (EMPTY -> .)
    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)
    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    NEURAL_ID_FAC                  shift and go to state 167
    EMPTY                          shift and go to state 168

state 126

    (52) DECISION -> IF_K LPAREN H_EXPRESSION . RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    RPAREN          shift and go to state 169


state 127

    (103) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (106) NEURAL_CNT_FACT -> . EMPTY
    (121) EMPTY -> .

    TIMES           reduce using rule 121 (EMPTY -> .)
    DIVIDE          reduce using rule 121 (EMPTY -> .)
    PLUS            reduce using rule 121 (EMPTY -> .)
    MINUS           reduce using rule 121 (EMPTY -> .)
    GT              reduce using rule 121 (EMPTY -> .)
    LT              reduce using rule 121 (EMPTY -> .)
    GTE             reduce using rule 121 (EMPTY -> .)
    LTE             reduce using rule 121 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 121 (EMPTY -> .)
    OR              reduce using rule 121 (EMPTY -> .)
    AND             reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)
    SEMICOLON       reduce using rule 121 (EMPTY -> .)
    COMMA           reduce using rule 121 (EMPTY -> .)

    NEURAL_CNT_FACT                shift and go to state 152
    EMPTY                          shift and go to state 170

state 128

    (47) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN . H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (113) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (107) S_EXPRESSION -> . EXPRESSION
    (108) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (109) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (110) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (111) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (112) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    H_EXPRESSION                   shift and go to state 171
    S_EXPRESSION                   shift and go to state 121
    EXPRESSION                     shift and go to state 122
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 129

    (44) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (121) EMPTY -> .
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    STATEMENT_R                    shift and go to state 172
    STATEMENT                      shift and go to state 173
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 130

    (51) FOR_LOOP -> FOR_K ID EQUALS . INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 175


state 131

    (24) PARAM_DECL -> TYPE ID neuro . PARAM_DECL_R
    (27) PARAM_DECL_R -> . COMMA PARAM_DECL
    (28) PARAM_DECL_R -> . EMPTY
    (121) EMPTY -> .

    COMMA           shift and go to state 177
    RPAREN          reduce using rule 121 (EMPTY -> .)

    PARAM_DECL_R                   shift and go to state 176
    EMPTY                          shift and go to state 178

state 132

    (26) neuro -> EMPTY .

    COMMA           reduce using rule 26 (neuro -> EMPTY .)
    RPAREN          reduce using rule 26 (neuro -> EMPTY .)


state 133

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    BLOCKSTART      shift and go to state 179


state 134

    (23) neural_param_decl -> EMPTY .

    BLOCKSTART      reduce using rule 23 (neural_param_decl -> EMPTY .)


state 135

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    BLOCKSTART      shift and go to state 180


state 136

    (59) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL . H_EXPRESSION ASSI_H_EXP_NEURAL
    (113) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (107) S_EXPRESSION -> . EXPRESSION
    (108) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (109) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (110) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (111) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (112) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    H_EXPRESSION                   shift and go to state 181
    S_EXPRESSION                   shift and go to state 121
    EXPRESSION                     shift and go to state 122
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 137

    (61) EQUALS_NEURAL -> EMPTY .

    ID              reduce using rule 61 (EQUALS_NEURAL -> EMPTY .)
    LPAREN          reduce using rule 61 (EQUALS_NEURAL -> EMPTY .)
    INT             reduce using rule 61 (EQUALS_NEURAL -> EMPTY .)
    FLOAT           reduce using rule 61 (EQUALS_NEURAL -> EMPTY .)
    STRING          reduce using rule 61 (EQUALS_NEURAL -> EMPTY .)


state 138

    (66) FUNC_CALL -> ID LPAREN ARG_LIST RPAREN .

    SEMICOLON       reduce using rule 66 (FUNC_CALL -> ID LPAREN ARG_LIST RPAREN .)


state 139

    (67) ARG_LIST -> VAR ARG_LIST_R .

    RPAREN          reduce using rule 67 (ARG_LIST -> VAR ARG_LIST_R .)


state 140

    (68) ARG_LIST -> CONSTANT ARG_LIST_R .

    RPAREN          reduce using rule 68 (ARG_LIST -> CONSTANT ARG_LIST_R .)


state 141

    (70) ARG_LIST_R -> COMMA ARG_LIST .

    RPAREN          reduce using rule 70 (ARG_LIST_R -> COMMA ARG_LIST .)


state 142

    (65) ARRAY -> ID LBRACE INT RBRACE .

    EQUALS          reduce using rule 65 (ARRAY -> ID LBRACE INT RBRACE .)
    COMMA           reduce using rule 65 (ARRAY -> ID LBRACE INT RBRACE .)
    RPAREN          reduce using rule 65 (ARRAY -> ID LBRACE INT RBRACE .)


state 143

    (75) READ -> READ_K LPAREN ID_LIST RPAREN .

    SEMICOLON       reduce using rule 75 (READ -> READ_K LPAREN ID_LIST RPAREN .)


state 144

    (76) ID_LIST -> ID READ_NEURAL . ID_LIST_R
    (78) ID_LIST_R -> . COMMA ID_LIST
    (79) ID_LIST_R -> . EMPTY
    (121) EMPTY -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 121 (EMPTY -> .)

    ID_LIST_R                      shift and go to state 182
    EMPTY                          shift and go to state 184

state 145

    (77) READ_NEURAL -> EMPTY .

    COMMA           reduce using rule 77 (READ_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 77 (READ_NEURAL -> EMPTY .)


state 146

    (104) FACTOR -> LPAREN H_EXPRESSION . RPAREN

    RPAREN          shift and go to state 185


state 147

    (80) WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .

    SEMICOLON       reduce using rule 80 (WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .)


state 148

    (81) WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .

    RPAREN          reduce using rule 81 (WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .)


state 149

    (84) WRITE_LIST_R -> WRITE_NEURAL . COMMA WRITE_LIST
    (85) WRITE_LIST_R -> WRITE_NEURAL . EMPTY
    (121) EMPTY -> .

    COMMA           shift and go to state 186
    RPAREN          reduce using rule 121 (EMPTY -> .)

    EMPTY                          shift and go to state 187

state 150

    (86) WRITE_NEURAL -> EMPTY .

    COMMA           reduce using rule 86 (WRITE_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 86 (WRITE_NEURAL -> EMPTY .)


state 151

    (82) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N . WRITE_LIST_R
    (84) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (85) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (86) WRITE_NEURAL -> . EMPTY
    (121) EMPTY -> .

    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 188
    WRITE_NEURAL                   shift and go to state 149
    EMPTY                          shift and go to state 150

state 152

    (103) FACTOR -> CONSTANT NEURAL_CNT_FACT .

    TIMES           reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DIVIDE          reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    PLUS            reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    MINUS           reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GT              reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LT              reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GTE             reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LTE             reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DOUBLEEQUAL     reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    OR              reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    AND             reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    COMMA           reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    RPAREN          reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    SEMICOLON       reduce using rule 103 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)


state 153

    (83) CONSTANT_WRITE_N -> EMPTY .
    (106) NEURAL_CNT_FACT -> EMPTY .

  ! reduce/reduce conflict for COMMA resolved using rule 83 (CONSTANT_WRITE_N -> EMPTY .)
  ! reduce/reduce conflict for RPAREN resolved using rule 83 (CONSTANT_WRITE_N -> EMPTY .)
    COMMA           reduce using rule 83 (CONSTANT_WRITE_N -> EMPTY .)
    RPAREN          reduce using rule 83 (CONSTANT_WRITE_N -> EMPTY .)
    TIMES           reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)

  ! COMMA           [ reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .) ]
  ! RPAREN          [ reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .) ]


state 154

    (113) H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .

    COMMA           reduce using rule 113 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    RPAREN          reduce using rule 113 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    SEMICOLON       reduce using rule 113 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)


state 155

    (114) H_EXPRESSION_R -> OR . H_EXPRESSION
    (113) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (107) S_EXPRESSION -> . EXPRESSION
    (108) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (109) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (110) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (111) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (112) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    H_EXPRESSION                   shift and go to state 189
    S_EXPRESSION                   shift and go to state 121
    EXPRESSION                     shift and go to state 122
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 156

    (115) H_EXPRESSION_R -> AND . H_EXPRESSION
    (113) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (107) S_EXPRESSION -> . EXPRESSION
    (108) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (109) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (110) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (111) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (112) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    H_EXPRESSION                   shift and go to state 190
    S_EXPRESSION                   shift and go to state 121
    EXPRESSION                     shift and go to state 122
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 157

    (116) H_EXPRESSION_R -> EMPTY .

    COMMA           reduce using rule 116 (H_EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 116 (H_EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 116 (H_EXPRESSION_R -> EMPTY .)


state 158

    (108) S_EXPRESSION -> EXPRESSION GT . EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    EXPRESSION                     shift and go to state 191
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 159

    (109) S_EXPRESSION -> EXPRESSION LT . EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    EXPRESSION                     shift and go to state 192
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 160

    (110) S_EXPRESSION -> EXPRESSION GTE . EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    EXPRESSION                     shift and go to state 193
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 161

    (111) S_EXPRESSION -> EXPRESSION LTE . EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    EXPRESSION                     shift and go to state 194
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 162

    (112) S_EXPRESSION -> EXPRESSION DOUBLEEQUAL . EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    EXPRESSION                     shift and go to state 195
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 163

    (88) EXPRESSION -> TERM NEURAL_EXPRESSION . EXPRESSION_R
    (90) EXPRESSION_R -> . PLUS NEURAL_PLUS EXPRESSION
    (91) EXPRESSION_R -> . MINUS NEURAL_MINUS EXPRESSION
    (92) EXPRESSION_R -> . EMPTY
    (121) EMPTY -> .

    PLUS            shift and go to state 197
    MINUS           shift and go to state 198
    GT              reduce using rule 121 (EMPTY -> .)
    LT              reduce using rule 121 (EMPTY -> .)
    GTE             reduce using rule 121 (EMPTY -> .)
    LTE             reduce using rule 121 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 121 (EMPTY -> .)
    OR              reduce using rule 121 (EMPTY -> .)
    AND             reduce using rule 121 (EMPTY -> .)
    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)
    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    EXPRESSION_R                   shift and go to state 196
    EMPTY                          shift and go to state 199

state 164

    (89) NEURAL_EXPRESSION -> EMPTY .

    PLUS            reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    MINUS           reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    GT              reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    LT              reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    GTE             reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    LTE             reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    OR              reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    AND             reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    COMMA           reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    RPAREN          reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)
    SEMICOLON       reduce using rule 89 (NEURAL_EXPRESSION -> EMPTY .)


state 165

    (95) TERM -> FACTOR NEURAL_TERM . TERM_R
    (97) TERM_R -> . TIMES NEURAL_TIMES TERM
    (98) TERM_R -> . DIVIDE NEURAL_DIVIDE TERM
    (99) TERM_R -> . EMPTY
    (121) EMPTY -> .

    TIMES           shift and go to state 201
    DIVIDE          shift and go to state 202
    PLUS            reduce using rule 121 (EMPTY -> .)
    MINUS           reduce using rule 121 (EMPTY -> .)
    GT              reduce using rule 121 (EMPTY -> .)
    LT              reduce using rule 121 (EMPTY -> .)
    GTE             reduce using rule 121 (EMPTY -> .)
    LTE             reduce using rule 121 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 121 (EMPTY -> .)
    OR              reduce using rule 121 (EMPTY -> .)
    AND             reduce using rule 121 (EMPTY -> .)
    COMMA           reduce using rule 121 (EMPTY -> .)
    RPAREN          reduce using rule 121 (EMPTY -> .)
    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    TERM_R                         shift and go to state 200
    EMPTY                          shift and go to state 203

state 166

    (96) NEURAL_TERM -> EMPTY .

    TIMES           reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    DIVIDE          reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    PLUS            reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    MINUS           reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    GT              reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    LT              reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    GTE             reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    LTE             reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    OR              reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    AND             reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    COMMA           reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    RPAREN          reduce using rule 96 (NEURAL_TERM -> EMPTY .)
    SEMICOLON       reduce using rule 96 (NEURAL_TERM -> EMPTY .)


state 167

    (102) FACTOR -> ID NEURAL_ID_FAC .

    TIMES           reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    DIVIDE          reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    PLUS            reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    MINUS           reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    GT              reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    LT              reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    GTE             reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    LTE             reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    DOUBLEEQUAL     reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    OR              reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    AND             reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    COMMA           reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    RPAREN          reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)
    SEMICOLON       reduce using rule 102 (FACTOR -> ID NEURAL_ID_FAC .)


state 168

    (105) NEURAL_ID_FAC -> EMPTY .

    TIMES           reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    DIVIDE          reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    PLUS            reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    MINUS           reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    GT              reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    LT              reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    GTE             reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    LTE             reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    OR              reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    AND             reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    COMMA           reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    RPAREN          reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)
    SEMICOLON       reduce using rule 105 (NEURAL_ID_FAC -> EMPTY .)


state 169

    (52) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN . EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (53) EXP_RESULT_NEURAL -> . EMPTY
    (121) EMPTY -> .

    BLOCKSTART      reduce using rule 121 (EMPTY -> .)

    EXP_RESULT_NEURAL              shift and go to state 204
    EMPTY                          shift and go to state 205

state 170

    (106) NEURAL_CNT_FACT -> EMPTY .

    TIMES           reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    RPAREN          reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    SEMICOLON       reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)
    COMMA           reduce using rule 106 (NEURAL_CNT_FACT -> EMPTY .)


state 171

    (47) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION . RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    RPAREN          shift and go to state 206


state 172

    (44) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    BLOCKEND        shift and go to state 207


state 173

    (37) STATEMENT_R -> STATEMENT . STATEMENT_R
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (121) EMPTY -> .
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    STATEMENT                      shift and go to state 173
    STATEMENT_R                    shift and go to state 208
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 174

    (38) STATEMENT_R -> EMPTY .

    BLOCKEND        reduce using rule 38 (STATEMENT_R -> EMPTY .)


state 175

    (51) FOR_LOOP -> FOR_K ID EQUALS INT . TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    TO_K            shift and go to state 209


state 176

    (24) PARAM_DECL -> TYPE ID neuro PARAM_DECL_R .

    RPAREN          reduce using rule 24 (PARAM_DECL -> TYPE ID neuro PARAM_DECL_R .)


state 177

    (27) PARAM_DECL_R -> COMMA . PARAM_DECL
    (24) PARAM_DECL -> . TYPE ID neuro PARAM_DECL_R
    (25) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (121) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 121 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 210
    TYPE                           shift and go to state 71
    EMPTY                          shift and go to state 73

state 178

    (28) PARAM_DECL_R -> EMPTY .

    RPAREN          reduce using rule 28 (PARAM_DECL_R -> EMPTY .)


state 179

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . PROC_BODY RETURN BLOCKEND PROC_DECL
    (29) PROC_BODY -> . STATEMENT PROC_BODY_R
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    PROC_BODY                      shift and go to state 211
    STATEMENT                      shift and go to state 212
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 180

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . PROC_BODY BLOCKEND PROC_DECL
    (29) PROC_BODY -> . STATEMENT PROC_BODY_R
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    PROC_BODY                      shift and go to state 213
    STATEMENT                      shift and go to state 212
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 181

    (59) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION . ASSI_H_EXP_NEURAL
    (60) ASSI_H_EXP_NEURAL -> . EMPTY
    (121) EMPTY -> .

    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    ASSI_H_EXP_NEURAL              shift and go to state 214
    EMPTY                          shift and go to state 215

state 182

    (76) ID_LIST -> ID READ_NEURAL ID_LIST_R .

    RPAREN          reduce using rule 76 (ID_LIST -> ID READ_NEURAL ID_LIST_R .)


state 183

    (78) ID_LIST_R -> COMMA . ID_LIST
    (76) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 116

    ID_LIST                        shift and go to state 216

state 184

    (79) ID_LIST_R -> EMPTY .

    RPAREN          reduce using rule 79 (ID_LIST_R -> EMPTY .)


state 185

    (104) FACTOR -> LPAREN H_EXPRESSION RPAREN .

    TIMES           reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DIVIDE          reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    PLUS            reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    MINUS           reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GT              reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LT              reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GTE             reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LTE             reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DOUBLEEQUAL     reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    OR              reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    AND             reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    COMMA           reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    RPAREN          reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    SEMICOLON       reduce using rule 104 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)


state 186

    (84) WRITE_LIST_R -> WRITE_NEURAL COMMA . WRITE_LIST
    (81) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (82) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (113) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING
    (107) S_EXPRESSION -> . EXPRESSION
    (108) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (109) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (110) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (111) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (112) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111
    ID              shift and go to state 125
    LPAREN          shift and go to state 117

    WRITE_LIST                     shift and go to state 217
    H_EXPRESSION                   shift and go to state 119
    CONSTANT                       shift and go to state 120
    S_EXPRESSION                   shift and go to state 121
    EXPRESSION                     shift and go to state 122
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124

state 187

    (85) WRITE_LIST_R -> WRITE_NEURAL EMPTY .

    RPAREN          reduce using rule 85 (WRITE_LIST_R -> WRITE_NEURAL EMPTY .)


state 188

    (82) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .

    RPAREN          reduce using rule 82 (WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .)


state 189

    (114) H_EXPRESSION_R -> OR H_EXPRESSION .

    COMMA           reduce using rule 114 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    RPAREN          reduce using rule 114 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    SEMICOLON       reduce using rule 114 (H_EXPRESSION_R -> OR H_EXPRESSION .)


state 190

    (115) H_EXPRESSION_R -> AND H_EXPRESSION .

    COMMA           reduce using rule 115 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    RPAREN          reduce using rule 115 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    SEMICOLON       reduce using rule 115 (H_EXPRESSION_R -> AND H_EXPRESSION .)


state 191

    (108) S_EXPRESSION -> EXPRESSION GT EXPRESSION .

    OR              reduce using rule 108 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    AND             reduce using rule 108 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    COMMA           reduce using rule 108 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    RPAREN          reduce using rule 108 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    SEMICOLON       reduce using rule 108 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)


state 192

    (109) S_EXPRESSION -> EXPRESSION LT EXPRESSION .

    OR              reduce using rule 109 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    AND             reduce using rule 109 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    COMMA           reduce using rule 109 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    RPAREN          reduce using rule 109 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    SEMICOLON       reduce using rule 109 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)


state 193

    (110) S_EXPRESSION -> EXPRESSION GTE EXPRESSION .

    OR              reduce using rule 110 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    AND             reduce using rule 110 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    COMMA           reduce using rule 110 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    RPAREN          reduce using rule 110 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    SEMICOLON       reduce using rule 110 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)


state 194

    (111) S_EXPRESSION -> EXPRESSION LTE EXPRESSION .

    OR              reduce using rule 111 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    AND             reduce using rule 111 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    COMMA           reduce using rule 111 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    RPAREN          reduce using rule 111 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    SEMICOLON       reduce using rule 111 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)


state 195

    (112) S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .

    OR              reduce using rule 112 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    AND             reduce using rule 112 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    COMMA           reduce using rule 112 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    RPAREN          reduce using rule 112 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    SEMICOLON       reduce using rule 112 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)


state 196

    (88) EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .

    GT              reduce using rule 88 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LT              reduce using rule 88 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    GTE             reduce using rule 88 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LTE             reduce using rule 88 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    DOUBLEEQUAL     reduce using rule 88 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    OR              reduce using rule 88 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    AND             reduce using rule 88 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    COMMA           reduce using rule 88 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    RPAREN          reduce using rule 88 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    SEMICOLON       reduce using rule 88 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)


state 197

    (90) EXPRESSION_R -> PLUS . NEURAL_PLUS EXPRESSION
    (93) NEURAL_PLUS -> . EMPTY
    (121) EMPTY -> .

    ID              reduce using rule 121 (EMPTY -> .)
    LPAREN          reduce using rule 121 (EMPTY -> .)
    INT             reduce using rule 121 (EMPTY -> .)
    FLOAT           reduce using rule 121 (EMPTY -> .)
    STRING          reduce using rule 121 (EMPTY -> .)

    NEURAL_PLUS                    shift and go to state 218
    EMPTY                          shift and go to state 219

state 198

    (91) EXPRESSION_R -> MINUS . NEURAL_MINUS EXPRESSION
    (94) NEURAL_MINUS -> . EMPTY
    (121) EMPTY -> .

    ID              reduce using rule 121 (EMPTY -> .)
    LPAREN          reduce using rule 121 (EMPTY -> .)
    INT             reduce using rule 121 (EMPTY -> .)
    FLOAT           reduce using rule 121 (EMPTY -> .)
    STRING          reduce using rule 121 (EMPTY -> .)

    NEURAL_MINUS                   shift and go to state 220
    EMPTY                          shift and go to state 221

state 199

    (92) EXPRESSION_R -> EMPTY .

    GT              reduce using rule 92 (EXPRESSION_R -> EMPTY .)
    LT              reduce using rule 92 (EXPRESSION_R -> EMPTY .)
    GTE             reduce using rule 92 (EXPRESSION_R -> EMPTY .)
    LTE             reduce using rule 92 (EXPRESSION_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 92 (EXPRESSION_R -> EMPTY .)
    OR              reduce using rule 92 (EXPRESSION_R -> EMPTY .)
    AND             reduce using rule 92 (EXPRESSION_R -> EMPTY .)
    COMMA           reduce using rule 92 (EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 92 (EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 92 (EXPRESSION_R -> EMPTY .)


state 200

    (95) TERM -> FACTOR NEURAL_TERM TERM_R .

    PLUS            reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    MINUS           reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GT              reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LT              reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GTE             reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LTE             reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    DOUBLEEQUAL     reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    OR              reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    AND             reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    COMMA           reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    RPAREN          reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    SEMICOLON       reduce using rule 95 (TERM -> FACTOR NEURAL_TERM TERM_R .)


state 201

    (97) TERM_R -> TIMES . NEURAL_TIMES TERM
    (100) NEURAL_TIMES -> . EMPTY
    (121) EMPTY -> .

    ID              reduce using rule 121 (EMPTY -> .)
    LPAREN          reduce using rule 121 (EMPTY -> .)
    INT             reduce using rule 121 (EMPTY -> .)
    FLOAT           reduce using rule 121 (EMPTY -> .)
    STRING          reduce using rule 121 (EMPTY -> .)

    NEURAL_TIMES                   shift and go to state 222
    EMPTY                          shift and go to state 223

state 202

    (98) TERM_R -> DIVIDE . NEURAL_DIVIDE TERM
    (101) NEURAL_DIVIDE -> . EMPTY
    (121) EMPTY -> .

    ID              reduce using rule 121 (EMPTY -> .)
    LPAREN          reduce using rule 121 (EMPTY -> .)
    INT             reduce using rule 121 (EMPTY -> .)
    FLOAT           reduce using rule 121 (EMPTY -> .)
    STRING          reduce using rule 121 (EMPTY -> .)

    NEURAL_DIVIDE                  shift and go to state 224
    EMPTY                          shift and go to state 225

state 203

    (99) TERM_R -> EMPTY .

    PLUS            reduce using rule 99 (TERM_R -> EMPTY .)
    MINUS           reduce using rule 99 (TERM_R -> EMPTY .)
    GT              reduce using rule 99 (TERM_R -> EMPTY .)
    LT              reduce using rule 99 (TERM_R -> EMPTY .)
    GTE             reduce using rule 99 (TERM_R -> EMPTY .)
    LTE             reduce using rule 99 (TERM_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 99 (TERM_R -> EMPTY .)
    OR              reduce using rule 99 (TERM_R -> EMPTY .)
    AND             reduce using rule 99 (TERM_R -> EMPTY .)
    COMMA           reduce using rule 99 (TERM_R -> EMPTY .)
    RPAREN          reduce using rule 99 (TERM_R -> EMPTY .)
    SEMICOLON       reduce using rule 99 (TERM_R -> EMPTY .)


state 204

    (52) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKSTART      shift and go to state 226


state 205

    (53) EXP_RESULT_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 53 (EXP_RESULT_NEURAL -> EMPTY .)


state 206

    (47) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN . WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (49) WHILE_POST_NEURAL -> . EMPTY
    (121) EMPTY -> .

    BLOCKSTART      reduce using rule 121 (EMPTY -> .)

    WHILE_POST_NEURAL              shift and go to state 227
    EMPTY                          shift and go to state 228

state 207

    (44) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    WHILE_K         shift and go to state 229


state 208

    (37) STATEMENT_R -> STATEMENT STATEMENT_R .

    BLOCKEND        reduce using rule 37 (STATEMENT_R -> STATEMENT STATEMENT_R .)


state 209

    (51) FOR_LOOP -> FOR_K ID EQUALS INT TO_K . INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 230


state 210

    (27) PARAM_DECL_R -> COMMA PARAM_DECL .

    RPAREN          reduce using rule 27 (PARAM_DECL_R -> COMMA PARAM_DECL .)


state 211

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY . RETURN BLOCKEND PROC_DECL
    (87) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON

    RETURN_K        shift and go to state 232

    RETURN                         shift and go to state 231

state 212

    (29) PROC_BODY -> STATEMENT . PROC_BODY_R
    (30) PROC_BODY_R -> . PROC_BODY
    (31) PROC_BODY_R -> . EMPTY
    (29) PROC_BODY -> . STATEMENT PROC_BODY_R
    (121) EMPTY -> .
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    RETURN_K        reduce using rule 121 (EMPTY -> .)
    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    STATEMENT                      shift and go to state 212
    PROC_BODY_R                    shift and go to state 233
    PROC_BODY                      shift and go to state 234
    EMPTY                          shift and go to state 235
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 213

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY . BLOCKEND PROC_DECL

    BLOCKEND        shift and go to state 236


state 214

    (59) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .

    SEMICOLON       reduce using rule 59 (ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .)


state 215

    (60) ASSI_H_EXP_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 60 (ASSI_H_EXP_NEURAL -> EMPTY .)


state 216

    (78) ID_LIST_R -> COMMA ID_LIST .

    RPAREN          reduce using rule 78 (ID_LIST_R -> COMMA ID_LIST .)


state 217

    (84) WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .

    RPAREN          reduce using rule 84 (WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .)


state 218

    (90) EXPRESSION_R -> PLUS NEURAL_PLUS . EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    EXPRESSION                     shift and go to state 237
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 219

    (93) NEURAL_PLUS -> EMPTY .

    ID              reduce using rule 93 (NEURAL_PLUS -> EMPTY .)
    LPAREN          reduce using rule 93 (NEURAL_PLUS -> EMPTY .)
    INT             reduce using rule 93 (NEURAL_PLUS -> EMPTY .)
    FLOAT           reduce using rule 93 (NEURAL_PLUS -> EMPTY .)
    STRING          reduce using rule 93 (NEURAL_PLUS -> EMPTY .)


state 220

    (91) EXPRESSION_R -> MINUS NEURAL_MINUS . EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    EXPRESSION                     shift and go to state 238
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 221

    (94) NEURAL_MINUS -> EMPTY .

    ID              reduce using rule 94 (NEURAL_MINUS -> EMPTY .)
    LPAREN          reduce using rule 94 (NEURAL_MINUS -> EMPTY .)
    INT             reduce using rule 94 (NEURAL_MINUS -> EMPTY .)
    FLOAT           reduce using rule 94 (NEURAL_MINUS -> EMPTY .)
    STRING          reduce using rule 94 (NEURAL_MINUS -> EMPTY .)


state 222

    (97) TERM_R -> TIMES NEURAL_TIMES . TERM
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    TERM                           shift and go to state 239
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 223

    (100) NEURAL_TIMES -> EMPTY .

    ID              reduce using rule 100 (NEURAL_TIMES -> EMPTY .)
    LPAREN          reduce using rule 100 (NEURAL_TIMES -> EMPTY .)
    INT             reduce using rule 100 (NEURAL_TIMES -> EMPTY .)
    FLOAT           reduce using rule 100 (NEURAL_TIMES -> EMPTY .)
    STRING          reduce using rule 100 (NEURAL_TIMES -> EMPTY .)


state 224

    (98) TERM_R -> DIVIDE NEURAL_DIVIDE . TERM
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    TERM                           shift and go to state 240
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 225

    (101) NEURAL_DIVIDE -> EMPTY .

    ID              reduce using rule 101 (NEURAL_DIVIDE -> EMPTY .)
    LPAREN          reduce using rule 101 (NEURAL_DIVIDE -> EMPTY .)
    INT             reduce using rule 101 (NEURAL_DIVIDE -> EMPTY .)
    FLOAT           reduce using rule 101 (NEURAL_DIVIDE -> EMPTY .)
    STRING          reduce using rule 101 (NEURAL_DIVIDE -> EMPTY .)


state 226

    (52) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (121) EMPTY -> .
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    STATEMENT_R                    shift and go to state 241
    STATEMENT                      shift and go to state 173
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 227

    (47) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL

    BLOCKSTART      shift and go to state 242


state 228

    (49) WHILE_POST_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 49 (WHILE_POST_NEURAL -> EMPTY .)


state 229

    (44) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K . LPAREN H_EXPRESSION RPAREN DW_END_NEURAL

    LPAREN          shift and go to state 243


state 230

    (51) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT . DO_K BLOCKSTART STATEMENT_R BLOCKEND

    DO_K            shift and go to state 244


state 231

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN . BLOCKEND PROC_DECL

    BLOCKEND        shift and go to state 245


state 232

    (87) RETURN -> RETURN_K . LPAREN H_EXPRESSION RPAREN SEMICOLON

    LPAREN          shift and go to state 246


state 233

    (29) PROC_BODY -> STATEMENT PROC_BODY_R .

    RETURN_K        reduce using rule 29 (PROC_BODY -> STATEMENT PROC_BODY_R .)
    BLOCKEND        reduce using rule 29 (PROC_BODY -> STATEMENT PROC_BODY_R .)


state 234

    (30) PROC_BODY_R -> PROC_BODY .

    RETURN_K        reduce using rule 30 (PROC_BODY_R -> PROC_BODY .)
    BLOCKEND        reduce using rule 30 (PROC_BODY_R -> PROC_BODY .)


state 235

    (31) PROC_BODY_R -> EMPTY .

    RETURN_K        reduce using rule 31 (PROC_BODY_R -> EMPTY .)
    BLOCKEND        reduce using rule 31 (PROC_BODY_R -> EMPTY .)


state 236

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (121) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 121 (EMPTY -> .)

    PROC_DECL                      shift and go to state 247
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 237

    (90) EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .

    GT              reduce using rule 90 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LT              reduce using rule 90 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    GTE             reduce using rule 90 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LTE             reduce using rule 90 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 90 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    OR              reduce using rule 90 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    AND             reduce using rule 90 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    COMMA           reduce using rule 90 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    RPAREN          reduce using rule 90 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    SEMICOLON       reduce using rule 90 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)


state 238

    (91) EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .

    GT              reduce using rule 91 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LT              reduce using rule 91 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    GTE             reduce using rule 91 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LTE             reduce using rule 91 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 91 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    OR              reduce using rule 91 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    AND             reduce using rule 91 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    COMMA           reduce using rule 91 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    RPAREN          reduce using rule 91 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    SEMICOLON       reduce using rule 91 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)


state 239

    (97) TERM_R -> TIMES NEURAL_TIMES TERM .

    PLUS            reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    MINUS           reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GT              reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LT              reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GTE             reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LTE             reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    DOUBLEEQUAL     reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    OR              reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    AND             reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    COMMA           reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    RPAREN          reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    SEMICOLON       reduce using rule 97 (TERM_R -> TIMES NEURAL_TIMES TERM .)


state 240

    (98) TERM_R -> DIVIDE NEURAL_DIVIDE TERM .

    PLUS            reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    MINUS           reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GT              reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LT              reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GTE             reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LTE             reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    DOUBLEEQUAL     reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    OR              reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    AND             reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    COMMA           reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    RPAREN          reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    SEMICOLON       reduce using rule 98 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)


state 241

    (52) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKEND        shift and go to state 248


state 242

    (47) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (121) EMPTY -> .
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    STATEMENT_R                    shift and go to state 249
    STATEMENT                      shift and go to state 173
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 243

    (44) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN . H_EXPRESSION RPAREN DW_END_NEURAL
    (113) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (107) S_EXPRESSION -> . EXPRESSION
    (108) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (109) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (110) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (111) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (112) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    H_EXPRESSION                   shift and go to state 250
    S_EXPRESSION                   shift and go to state 121
    EXPRESSION                     shift and go to state 122
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 244

    (51) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 251


state 245

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (121) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 121 (EMPTY -> .)

    PROC_DECL                      shift and go to state 252
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 246

    (87) RETURN -> RETURN_K LPAREN . H_EXPRESSION RPAREN SEMICOLON
    (113) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (107) S_EXPRESSION -> . EXPRESSION
    (108) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (109) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (110) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (111) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (112) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (88) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (95) TERM -> . FACTOR NEURAL_TERM TERM_R
    (102) FACTOR -> . ID NEURAL_ID_FAC
    (103) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (104) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (72) CONSTANT -> . INT
    (73) CONSTANT -> . FLOAT
    (74) CONSTANT -> . STRING

    ID              shift and go to state 125
    LPAREN          shift and go to state 117
    INT             shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111

    H_EXPRESSION                   shift and go to state 253
    S_EXPRESSION                   shift and go to state 121
    EXPRESSION                     shift and go to state 122
    TERM                           shift and go to state 123
    FACTOR                         shift and go to state 124
    CONSTANT                       shift and go to state 127

state 247

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL .

    MAIN_K          reduce using rule 19 (PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL .)


state 248

    (52) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . DECISION_ALT DECISION_END_NEURAL
    (55) DECISION_ALT -> . ELSE
    (56) DECISION_ALT -> . EMPTY
    (57) ELSE -> . ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
    (121) EMPTY -> .
    (58) ELSE_NEURAL -> . EMPTY

    ID              reduce using rule 121 (EMPTY -> .)
    READ_K          reduce using rule 121 (EMPTY -> .)
    WRITE_K         reduce using rule 121 (EMPTY -> .)
    IF_K            reduce using rule 121 (EMPTY -> .)
    WHILE_K         reduce using rule 121 (EMPTY -> .)
    DO_K            reduce using rule 121 (EMPTY -> .)
    FOR_K           reduce using rule 121 (EMPTY -> .)
    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    RETURN_K        reduce using rule 121 (EMPTY -> .)
    ELSE_K          reduce using rule 121 (EMPTY -> .)

    DECISION_ALT                   shift and go to state 254
    ELSE                           shift and go to state 255
    EMPTY                          shift and go to state 256
    ELSE_NEURAL                    shift and go to state 257

state 249

    (47) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND WHILE_END_NEURAL

    BLOCKEND        shift and go to state 258


state 250

    (44) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION . RPAREN DW_END_NEURAL

    RPAREN          shift and go to state 259


state 251

    (51) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART . STATEMENT_R BLOCKEND
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (121) EMPTY -> .
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    STATEMENT_R                    shift and go to state 260
    STATEMENT                      shift and go to state 173
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 252

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL .

    MAIN_K          reduce using rule 21 (PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL .)


state 253

    (87) RETURN -> RETURN_K LPAREN H_EXPRESSION . RPAREN SEMICOLON

    RPAREN          shift and go to state 261


state 254

    (52) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT . DECISION_END_NEURAL
    (54) DECISION_END_NEURAL -> . EMPTY
    (121) EMPTY -> .

    ID              reduce using rule 121 (EMPTY -> .)
    READ_K          reduce using rule 121 (EMPTY -> .)
    WRITE_K         reduce using rule 121 (EMPTY -> .)
    IF_K            reduce using rule 121 (EMPTY -> .)
    WHILE_K         reduce using rule 121 (EMPTY -> .)
    DO_K            reduce using rule 121 (EMPTY -> .)
    FOR_K           reduce using rule 121 (EMPTY -> .)
    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    RETURN_K        reduce using rule 121 (EMPTY -> .)

    DECISION_END_NEURAL            shift and go to state 262
    EMPTY                          shift and go to state 263

state 255

    (55) DECISION_ALT -> ELSE .

    ID              reduce using rule 55 (DECISION_ALT -> ELSE .)
    READ_K          reduce using rule 55 (DECISION_ALT -> ELSE .)
    WRITE_K         reduce using rule 55 (DECISION_ALT -> ELSE .)
    IF_K            reduce using rule 55 (DECISION_ALT -> ELSE .)
    WHILE_K         reduce using rule 55 (DECISION_ALT -> ELSE .)
    DO_K            reduce using rule 55 (DECISION_ALT -> ELSE .)
    FOR_K           reduce using rule 55 (DECISION_ALT -> ELSE .)
    BLOCKEND        reduce using rule 55 (DECISION_ALT -> ELSE .)
    RETURN_K        reduce using rule 55 (DECISION_ALT -> ELSE .)


state 256

    (56) DECISION_ALT -> EMPTY .
    (58) ELSE_NEURAL -> EMPTY .

    ID              reduce using rule 56 (DECISION_ALT -> EMPTY .)
    READ_K          reduce using rule 56 (DECISION_ALT -> EMPTY .)
    WRITE_K         reduce using rule 56 (DECISION_ALT -> EMPTY .)
    IF_K            reduce using rule 56 (DECISION_ALT -> EMPTY .)
    WHILE_K         reduce using rule 56 (DECISION_ALT -> EMPTY .)
    DO_K            reduce using rule 56 (DECISION_ALT -> EMPTY .)
    FOR_K           reduce using rule 56 (DECISION_ALT -> EMPTY .)
    BLOCKEND        reduce using rule 56 (DECISION_ALT -> EMPTY .)
    RETURN_K        reduce using rule 56 (DECISION_ALT -> EMPTY .)
    ELSE_K          reduce using rule 58 (ELSE_NEURAL -> EMPTY .)


state 257

    (57) ELSE -> ELSE_NEURAL . ELSE_K BLOCKSTART STATEMENT_R BLOCKEND

    ELSE_K          shift and go to state 264


state 258

    (47) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . WHILE_END_NEURAL
    (50) WHILE_END_NEURAL -> . EMPTY
    (121) EMPTY -> .

    ID              reduce using rule 121 (EMPTY -> .)
    READ_K          reduce using rule 121 (EMPTY -> .)
    WRITE_K         reduce using rule 121 (EMPTY -> .)
    IF_K            reduce using rule 121 (EMPTY -> .)
    WHILE_K         reduce using rule 121 (EMPTY -> .)
    DO_K            reduce using rule 121 (EMPTY -> .)
    FOR_K           reduce using rule 121 (EMPTY -> .)
    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    RETURN_K        reduce using rule 121 (EMPTY -> .)

    WHILE_END_NEURAL               shift and go to state 265
    EMPTY                          shift and go to state 266

state 259

    (44) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN . DW_END_NEURAL
    (46) DW_END_NEURAL -> . EMPTY
    (121) EMPTY -> .

    SEMICOLON       reduce using rule 121 (EMPTY -> .)

    DW_END_NEURAL                  shift and go to state 267
    EMPTY                          shift and go to state 268

state 260

    (51) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 269


state 261

    (87) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 270


state 262

    (52) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .

    ID              reduce using rule 52 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    READ_K          reduce using rule 52 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WRITE_K         reduce using rule 52 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    IF_K            reduce using rule 52 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WHILE_K         reduce using rule 52 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    DO_K            reduce using rule 52 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    FOR_K           reduce using rule 52 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    BLOCKEND        reduce using rule 52 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    RETURN_K        reduce using rule 52 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)


state 263

    (54) DECISION_END_NEURAL -> EMPTY .

    ID              reduce using rule 54 (DECISION_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 54 (DECISION_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 54 (DECISION_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 54 (DECISION_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 54 (DECISION_END_NEURAL -> EMPTY .)
    DO_K            reduce using rule 54 (DECISION_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 54 (DECISION_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 54 (DECISION_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 54 (DECISION_END_NEURAL -> EMPTY .)


state 264

    (57) ELSE -> ELSE_NEURAL ELSE_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 271


state 265

    (47) WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .

    ID              reduce using rule 47 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    READ_K          reduce using rule 47 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    WRITE_K         reduce using rule 47 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    IF_K            reduce using rule 47 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    WHILE_K         reduce using rule 47 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    DO_K            reduce using rule 47 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    FOR_K           reduce using rule 47 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    BLOCKEND        reduce using rule 47 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)
    RETURN_K        reduce using rule 47 (WHILE_LOOP -> WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL .)


state 266

    (50) WHILE_END_NEURAL -> EMPTY .

    ID              reduce using rule 50 (WHILE_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 50 (WHILE_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 50 (WHILE_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 50 (WHILE_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 50 (WHILE_END_NEURAL -> EMPTY .)
    DO_K            reduce using rule 50 (WHILE_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 50 (WHILE_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 50 (WHILE_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 50 (WHILE_END_NEURAL -> EMPTY .)


state 267

    (44) DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL .

    SEMICOLON       reduce using rule 44 (DO_WHILE_LOOP -> DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL .)


state 268

    (46) DW_END_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 46 (DW_END_NEURAL -> EMPTY .)


state 269

    (51) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 51 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 51 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 51 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 51 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 51 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    DO_K            reduce using rule 51 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 51 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 51 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 51 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)


state 270

    (87) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .

    BLOCKEND        reduce using rule 87 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)


state 271

    (57) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART . STATEMENT_R BLOCKEND
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (121) EMPTY -> .
    (59) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (66) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (75) READ -> . READ_K LPAREN ID_LIST RPAREN
    (80) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (63) VAR -> . ID
    (64) VAR -> . ARRAY
    (52) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . DO_WHILE_LOOP SEMICOLON
    (43) LOOP -> . FOR_LOOP
    (65) ARRAY -> . ID LBRACE INT RBRACE
    (47) WHILE_LOOP -> . WHILE_K WHILE_PREV_NEURAL LPAREN H_EXPRESSION RPAREN WHILE_POST_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_END_NEURAL
    (44) DO_WHILE_LOOP -> . DO_K DW_PREV_NEURAL BLOCKSTART STATEMENT_R BLOCKEND WHILE_K LPAREN H_EXPRESSION RPAREN DW_END_NEURAL
    (51) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 121 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 68
    DO_K            shift and go to state 69
    FOR_K           shift and go to state 70

    STATEMENT_R                    shift and go to state 272
    STATEMENT                      shift and go to state 173
    EMPTY                          shift and go to state 174
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    DO_WHILE_LOOP                  shift and go to state 66
    FOR_LOOP                       shift and go to state 67

state 272

    (57) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 273


state 273

    (57) ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 57 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 57 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 57 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 57 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 57 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    DO_K            reduce using rule 57 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 57 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 57 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 57 (ELSE -> ELSE_NEURAL ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 153 resolved using rule (CONSTANT_WRITE_N -> EMPTY)
WARNING: rejected rule (NEURAL_CNT_FACT -> EMPTY) in state 153
