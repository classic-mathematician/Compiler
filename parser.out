Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    THEN_K

Grammar

Rule 0     S' -> PROGRAM
Rule 1     PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK
Rule 2     neural_program_id -> EMPTY
Rule 3     BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
Rule 4     VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND
Rule 5     VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
Rule 6     VAR_DECL_R -> VAR_DECL
Rule 7     VAR_DECL_R -> EMPTY
Rule 8     VAR_LIST -> ID VAR_LIST2
Rule 9     VAR_LIST2 -> COMMA ID VAR_LIST2
Rule 10    VAR_LIST2 -> EMPTY
Rule 11    TYPE -> INT_K NEURAL_TYPE
Rule 12    TYPE -> FLOAT_K NEURAL_TYPE
Rule 13    TYPE -> STRING_K NEURAL_TYPE
Rule 14    NEURAL_TYPE -> EMPTY
Rule 15    PROC_BLOCK -> PROC_DECL
Rule 16    PROC_DECL -> PROC_DECL_RETURN
Rule 17    PROC_DECL -> PROC_DECL_VOID
Rule 18    PROC_DECL -> EMPTY
Rule 19    PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
Rule 20    neural_proc_void_id -> EMPTY
Rule 21    PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
Rule 22    neural_proc_return_id -> EMPTY
Rule 23    neural_param_decl -> EMPTY
Rule 24    PARAM_DECL -> TYPE ID neuro PARAM_DECL_R
Rule 25    PARAM_DECL -> EMPTY
Rule 26    neuro -> EMPTY
Rule 27    PARAM_DECL_R -> COMMA PARAM_DECL
Rule 28    PARAM_DECL_R -> EMPTY
Rule 29    PROC_BODY -> STATEMENT PROC_BODY_R
Rule 30    PROC_BODY_R -> PROC_BODY
Rule 31    PROC_BODY_R -> EMPTY
Rule 32    STATEMENT -> ASSIGN SEMICOLON
Rule 33    STATEMENT -> FUNC_CALL SEMICOLON
Rule 34    STATEMENT -> READ SEMICOLON
Rule 35    STATEMENT -> WRITE SEMICOLON
Rule 36    STATEMENT -> FLOW
Rule 37    STATEMENT_R -> STATEMENT STATEMENT_R
Rule 38    STATEMENT_R -> EMPTY
Rule 39    FLOW -> DECISION
Rule 40    FLOW -> LOOP
Rule 41    LOOP -> WHILE_LOOP
Rule 42    LOOP -> FOR_LOOP
Rule 43    WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
Rule 44    FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 45    DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
Rule 46    EXP_RESULT_NEURAL -> EMPTY
Rule 47    DECISION_END_NEURAL -> EMPTY
Rule 48    DECISION_ALT -> ELSE
Rule 49    DECISION_ALT -> EMPTY
Rule 50    ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
Rule 51    ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
Rule 52    ASSI_H_EXP_NEURAL -> EMPTY
Rule 53    EQUALS_NEURAL -> EMPTY
Rule 54    ASSIGN_VAR_N -> EMPTY
Rule 55    VAR -> ID
Rule 56    VAR -> ARRAY
Rule 57    ARRAY -> ID LBRACE INT RBRACE
Rule 58    FUNC_CALL -> ID LPAREN ARG_LIST RPAREN
Rule 59    ARG_LIST -> VAR ARG_LIST_R
Rule 60    ARG_LIST -> CONSTANT ARG_LIST_R
Rule 61    ARG_LIST -> ARG_LIST_R
Rule 62    ARG_LIST_R -> COMMA ARG_LIST
Rule 63    ARG_LIST_R -> EMPTY
Rule 64    CONSTANT -> INT
Rule 65    CONSTANT -> FLOAT
Rule 66    CONSTANT -> STRING
Rule 67    READ -> READ_K LPAREN ID_LIST RPAREN
Rule 68    ID_LIST -> ID READ_NEURAL ID_LIST_R
Rule 69    READ_NEURAL -> EMPTY
Rule 70    ID_LIST_R -> COMMA ID_LIST
Rule 71    ID_LIST_R -> EMPTY
Rule 72    WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN
Rule 73    WRITE_LIST -> H_EXPRESSION WRITE_LIST_R
Rule 74    WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
Rule 75    CONSTANT_WRITE_N -> EMPTY
Rule 76    WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST
Rule 77    WRITE_LIST_R -> WRITE_NEURAL EMPTY
Rule 78    WRITE_NEURAL -> EMPTY
Rule 79    RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON
Rule 80    EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R
Rule 81    NEURAL_EXPRESSION -> EMPTY
Rule 82    EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION
Rule 83    EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION
Rule 84    EXPRESSION_R -> EMPTY
Rule 85    NEURAL_PLUS -> EMPTY
Rule 86    NEURAL_MINUS -> EMPTY
Rule 87    TERM -> FACTOR NEURAL_TERM TERM_R
Rule 88    NEURAL_TERM -> EMPTY
Rule 89    TERM_R -> TIMES NEURAL_TIMES TERM
Rule 90    TERM_R -> DIVIDE NEURAL_DIVIDE TERM
Rule 91    TERM_R -> EMPTY
Rule 92    NEURAL_TIMES -> EMPTY
Rule 93    NEURAL_DIVIDE -> EMPTY
Rule 94    FACTOR -> ID NEURAL_ID_FAC
Rule 95    FACTOR -> CONSTANT NEURAL_CNT_FACT
Rule 96    FACTOR -> LPAREN H_EXPRESSION RPAREN
Rule 97    NEURAL_ID_FAC -> EMPTY
Rule 98    NEURAL_CNT_FACT -> EMPTY
Rule 99    S_EXPRESSION -> EXPRESSION
Rule 100   S_EXPRESSION -> EXPRESSION GT EXPRESSION
Rule 101   S_EXPRESSION -> EXPRESSION LT EXPRESSION
Rule 102   S_EXPRESSION -> EXPRESSION GTE EXPRESSION
Rule 103   S_EXPRESSION -> EXPRESSION LTE EXPRESSION
Rule 104   S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION
Rule 105   H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R
Rule 106   H_EXPRESSION_R -> OR H_EXPRESSION
Rule 107   H_EXPRESSION_R -> AND H_EXPRESSION
Rule 108   H_EXPRESSION_R -> EMPTY
Rule 109   PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND
Rule 110   PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R
Rule 111   PRINCIPAL_BODY -> EMPTY
Rule 112   PRINCIPAL_BODY_R -> PRINCIPAL_BODY
Rule 113   EMPTY -> <empty>

Terminals, with rules where they appear

AND                  : 107
BLOCKEND             : 4 19 21 43 44 45 50 109
BLOCKSTART           : 4 19 21 43 44 45 50 109
COLON                : 5
COMMA                : 9 27 62 70 76
COMMENT              : 
DIVIDE               : 90
DOUBLEEQUAL          : 104
DO_K                 : 44
ELSE_K               : 50
EQUALS               : 44 51
FLOAT                : 65
FLOAT_K              : 12
FOR_K                : 44
FUNCTION_K           : 19 21
GT                   : 100
GTE                  : 102
ID                   : 1 8 9 19 21 24 44 55 57 58 68 94
IF_K                 : 45
INT                  : 44 44 57 64
INT_K                : 11
LBRACE               : 57
LPAREN               : 19 21 43 45 58 67 72 79 96 109
LT                   : 101
LTE                  : 103
MAIN_K               : 109
MINUS                : 83
OR                   : 106
PLUS                 : 82
PROGRAM_K            : 1
RBRACE               : 57
READ_K               : 67
RETURN_K             : 79
RPAREN               : 19 21 43 45 58 67 72 79 96 109
SEMICOLON            : 1 5 32 33 34 35 79
STRING               : 66
STRING_K             : 13
THEN_K               : 
TIMES                : 89
TO_K                 : 44
VARS_K               : 4
VOID_K               : 19
WHILE_K              : 43
WRITE_K              : 72
error                : 

Nonterminals, with rules where they appear

ARG_LIST             : 58 62
ARG_LIST_R           : 59 60 61
ARRAY                : 56
ASSIGN               : 32
ASSIGN_VAR_N         : 51
ASSI_H_EXP_NEURAL    : 51
BLOCK                : 1
CONSTANT             : 60 74 95
CONSTANT_WRITE_N     : 74
DECISION             : 39
DECISION_ALT         : 45
DECISION_END_NEURAL  : 45
ELSE                 : 48
EMPTY                : 2 7 10 14 18 20 22 23 25 26 28 31 38 46 47 49 52 53 54 63 69 71 75 77 78 81 84 85 86 88 91 92 93 97 98 108 111
EQUALS_NEURAL        : 51
EXPRESSION           : 82 83 99 100 100 101 101 102 102 103 103 104 104
EXPRESSION_R         : 80
EXP_RESULT_NEURAL    : 45
FACTOR               : 87
FLOW                 : 36
FOR_LOOP             : 42
FUNC_CALL            : 33
H_EXPRESSION         : 43 45 51 73 79 96 106 107
H_EXPRESSION_R       : 105
ID_LIST              : 67 70
ID_LIST_R            : 68
LOOP                 : 40
NEURAL_CNT_FACT      : 95
NEURAL_DIVIDE        : 90
NEURAL_EXPRESSION    : 80
NEURAL_ID_FAC        : 94
NEURAL_MINUS         : 83
NEURAL_PLUS          : 82
NEURAL_TERM          : 87
NEURAL_TIMES         : 89
NEURAL_TYPE          : 11 12 13
PARAM_DECL           : 19 21 27
PARAM_DECL_R         : 24
PRINCIPAL_BLOCK      : 3
PRINCIPAL_BODY       : 109 112
PRINCIPAL_BODY_R     : 110
PROC_BLOCK           : 3
PROC_BODY            : 19 21 30
PROC_BODY_R          : 29
PROC_DECL            : 15 19 21
PROC_DECL_RETURN     : 16
PROC_DECL_VOID       : 17
PROGRAM              : 0
READ                 : 34
READ_NEURAL          : 68
RETURN               : 21
STATEMENT            : 29 37 110
STATEMENT_R          : 37 43 44 45 50
S_EXPRESSION         : 105
TERM                 : 80 89 90
TERM_R               : 87
TYPE                 : 5 21 24
VAR                  : 51 59
VAR_BLOCK            : 3
VAR_DECL             : 4 6
VAR_DECL_R           : 5
VAR_LIST             : 5
VAR_LIST2            : 8 9
WHILE_LOOP           : 41
WRITE                : 35
WRITE_LIST           : 72 76
WRITE_LIST_R         : 73 74
WRITE_NEURAL         : 76 77
neural_param_decl    : 19 21
neural_proc_return_id : 21
neural_proc_void_id  : 19
neural_program_id    : 1
neuro                : 24

Parsing method: LALR

state 0

    (0) S' -> . PROGRAM
    (1) PROGRAM -> . PROGRAM_K ID neural_program_id SEMICOLON BLOCK

    PROGRAM_K       shift and go to state 2

    PROGRAM                        shift and go to state 1

state 1

    (0) S' -> PROGRAM .



state 2

    (1) PROGRAM -> PROGRAM_K . ID neural_program_id SEMICOLON BLOCK

    ID              shift and go to state 3


state 3

    (1) PROGRAM -> PROGRAM_K ID . neural_program_id SEMICOLON BLOCK
    (2) neural_program_id -> . EMPTY
    (113) EMPTY -> .

    SEMICOLON       reduce using rule 113 (EMPTY -> .)

    neural_program_id              shift and go to state 4
    EMPTY                          shift and go to state 5

state 4

    (1) PROGRAM -> PROGRAM_K ID neural_program_id . SEMICOLON BLOCK

    SEMICOLON       shift and go to state 6


state 5

    (2) neural_program_id -> EMPTY .

    SEMICOLON       reduce using rule 2 (neural_program_id -> EMPTY .)


state 6

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON . BLOCK
    (3) BLOCK -> . VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK
    (4) VAR_BLOCK -> . VARS_K BLOCKSTART VAR_DECL BLOCKEND

    VARS_K          shift and go to state 9

    BLOCK                          shift and go to state 7
    VAR_BLOCK                      shift and go to state 8

state 7

    (1) PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .

    $end            reduce using rule 1 (PROGRAM -> PROGRAM_K ID neural_program_id SEMICOLON BLOCK .)


state 8

    (3) BLOCK -> VAR_BLOCK . PROC_BLOCK PRINCIPAL_BLOCK
    (15) PROC_BLOCK -> . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (113) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 113 (EMPTY -> .)

    PROC_BLOCK                     shift and go to state 10
    PROC_DECL                      shift and go to state 11
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 9

    (4) VAR_BLOCK -> VARS_K . BLOCKSTART VAR_DECL BLOCKEND

    BLOCKSTART      shift and go to state 16


state 10

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK . PRINCIPAL_BLOCK
    (109) PRINCIPAL_BLOCK -> . MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    MAIN_K          shift and go to state 18

    PRINCIPAL_BLOCK                shift and go to state 17

state 11

    (15) PROC_BLOCK -> PROC_DECL .

    MAIN_K          reduce using rule 15 (PROC_BLOCK -> PROC_DECL .)


state 12

    (16) PROC_DECL -> PROC_DECL_RETURN .

    MAIN_K          reduce using rule 16 (PROC_DECL -> PROC_DECL_RETURN .)


state 13

    (17) PROC_DECL -> PROC_DECL_VOID .

    MAIN_K          reduce using rule 17 (PROC_DECL -> PROC_DECL_VOID .)


state 14

    (18) PROC_DECL -> EMPTY .

    MAIN_K          reduce using rule 18 (PROC_DECL -> EMPTY .)


state 15

    (21) PROC_DECL_RETURN -> FUNCTION_K . TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (19) PROC_DECL_VOID -> FUNCTION_K . VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    VOID_K          shift and go to state 20
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 19

state 16

    (4) VAR_BLOCK -> VARS_K BLOCKSTART . VAR_DECL BLOCKEND
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    VAR_DECL                       shift and go to state 24
    TYPE                           shift and go to state 25

state 17

    (3) BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .

    $end            reduce using rule 3 (BLOCK -> VAR_BLOCK PROC_BLOCK PRINCIPAL_BLOCK .)


state 18

    (109) PRINCIPAL_BLOCK -> MAIN_K . LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    LPAREN          shift and go to state 26


state 19

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE . ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    ID              shift and go to state 27


state 20

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K . ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    ID              shift and go to state 28


state 21

    (11) TYPE -> INT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (113) EMPTY -> .

    ID              reduce using rule 113 (EMPTY -> .)
    COLON           reduce using rule 113 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 29
    EMPTY                          shift and go to state 30

state 22

    (12) TYPE -> FLOAT_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (113) EMPTY -> .

    ID              reduce using rule 113 (EMPTY -> .)
    COLON           reduce using rule 113 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 31
    EMPTY                          shift and go to state 30

state 23

    (13) TYPE -> STRING_K . NEURAL_TYPE
    (14) NEURAL_TYPE -> . EMPTY
    (113) EMPTY -> .

    ID              reduce using rule 113 (EMPTY -> .)
    COLON           reduce using rule 113 (EMPTY -> .)

    NEURAL_TYPE                    shift and go to state 32
    EMPTY                          shift and go to state 30

state 24

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL . BLOCKEND

    BLOCKEND        shift and go to state 33


state 25

    (5) VAR_DECL -> TYPE . COLON VAR_LIST SEMICOLON VAR_DECL_R

    COLON           shift and go to state 34


state 26

    (109) PRINCIPAL_BLOCK -> MAIN_K LPAREN . RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND

    RPAREN          shift and go to state 35


state 27

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID . neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (22) neural_proc_return_id -> . EMPTY
    (113) EMPTY -> .

    LPAREN          reduce using rule 113 (EMPTY -> .)

    neural_proc_return_id          shift and go to state 36
    EMPTY                          shift and go to state 37

state 28

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID . neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (20) neural_proc_void_id -> . EMPTY
    (113) EMPTY -> .

    LPAREN          reduce using rule 113 (EMPTY -> .)

    neural_proc_void_id            shift and go to state 38
    EMPTY                          shift and go to state 39

state 29

    (11) TYPE -> INT_K NEURAL_TYPE .

    ID              reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)
    COLON           reduce using rule 11 (TYPE -> INT_K NEURAL_TYPE .)


state 30

    (14) NEURAL_TYPE -> EMPTY .

    ID              reduce using rule 14 (NEURAL_TYPE -> EMPTY .)
    COLON           reduce using rule 14 (NEURAL_TYPE -> EMPTY .)


state 31

    (12) TYPE -> FLOAT_K NEURAL_TYPE .

    ID              reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)
    COLON           reduce using rule 12 (TYPE -> FLOAT_K NEURAL_TYPE .)


state 32

    (13) TYPE -> STRING_K NEURAL_TYPE .

    ID              reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)
    COLON           reduce using rule 13 (TYPE -> STRING_K NEURAL_TYPE .)


state 33

    (4) VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .

    FUNCTION_K      reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)
    MAIN_K          reduce using rule 4 (VAR_BLOCK -> VARS_K BLOCKSTART VAR_DECL BLOCKEND .)


state 34

    (5) VAR_DECL -> TYPE COLON . VAR_LIST SEMICOLON VAR_DECL_R
    (8) VAR_LIST -> . ID VAR_LIST2

    ID              shift and go to state 41

    VAR_LIST                       shift and go to state 40

state 35

    (109) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN . BLOCKSTART PRINCIPAL_BODY BLOCKEND

    BLOCKSTART      shift and go to state 42


state 36

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    LPAREN          shift and go to state 43


state 37

    (22) neural_proc_return_id -> EMPTY .

    LPAREN          reduce using rule 22 (neural_proc_return_id -> EMPTY .)


state 38

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id . LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    LPAREN          shift and go to state 44


state 39

    (20) neural_proc_void_id -> EMPTY .

    LPAREN          reduce using rule 20 (neural_proc_void_id -> EMPTY .)


state 40

    (5) VAR_DECL -> TYPE COLON VAR_LIST . SEMICOLON VAR_DECL_R

    SEMICOLON       shift and go to state 45


state 41

    (8) VAR_LIST -> ID . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA ID VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (113) EMPTY -> .

    COMMA           shift and go to state 47
    SEMICOLON       reduce using rule 113 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 46
    EMPTY                          shift and go to state 48

state 42

    (109) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART . PRINCIPAL_BODY BLOCKEND
    (110) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (111) PRINCIPAL_BODY -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (113) EMPTY -> .
    (51) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (58) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (67) READ -> . READ_K LPAREN ID_LIST RPAREN
    (72) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (45) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . FOR_LOOP
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (43) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (44) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 67
    FOR_K           shift and go to state 68

    PRINCIPAL_BODY                 shift and go to state 49
    STATEMENT                      shift and go to state 50
    EMPTY                          shift and go to state 51
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    FOR_LOOP                       shift and go to state 66

state 43

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (24) PARAM_DECL -> . TYPE ID neuro PARAM_DECL_R
    (25) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (113) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 113 (EMPTY -> .)

    TYPE                           shift and go to state 69
    PARAM_DECL                     shift and go to state 70
    EMPTY                          shift and go to state 71

state 44

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN . PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (24) PARAM_DECL -> . TYPE ID neuro PARAM_DECL_R
    (25) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (113) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 113 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 72
    TYPE                           shift and go to state 69
    EMPTY                          shift and go to state 71

state 45

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON . VAR_DECL_R
    (6) VAR_DECL_R -> . VAR_DECL
    (7) VAR_DECL_R -> . EMPTY
    (5) VAR_DECL -> . TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R
    (113) EMPTY -> .
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE

    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23

    TYPE                           shift and go to state 25
    VAR_DECL_R                     shift and go to state 73
    VAR_DECL                       shift and go to state 74
    EMPTY                          shift and go to state 75

state 46

    (8) VAR_LIST -> ID VAR_LIST2 .

    SEMICOLON       reduce using rule 8 (VAR_LIST -> ID VAR_LIST2 .)


state 47

    (9) VAR_LIST2 -> COMMA . ID VAR_LIST2

    ID              shift and go to state 76


state 48

    (10) VAR_LIST2 -> EMPTY .

    SEMICOLON       reduce using rule 10 (VAR_LIST2 -> EMPTY .)


state 49

    (109) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY . BLOCKEND

    BLOCKEND        shift and go to state 77


state 50

    (110) PRINCIPAL_BODY -> STATEMENT . PRINCIPAL_BODY_R
    (112) PRINCIPAL_BODY_R -> . PRINCIPAL_BODY
    (110) PRINCIPAL_BODY -> . STATEMENT PRINCIPAL_BODY_R
    (111) PRINCIPAL_BODY -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (113) EMPTY -> .
    (51) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (58) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (67) READ -> . READ_K LPAREN ID_LIST RPAREN
    (72) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (45) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . FOR_LOOP
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (43) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (44) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 67
    FOR_K           shift and go to state 68

    STATEMENT                      shift and go to state 50
    PRINCIPAL_BODY_R               shift and go to state 78
    PRINCIPAL_BODY                 shift and go to state 79
    EMPTY                          shift and go to state 51
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    FOR_LOOP                       shift and go to state 66

state 51

    (111) PRINCIPAL_BODY -> EMPTY .

    BLOCKEND        reduce using rule 111 (PRINCIPAL_BODY -> EMPTY .)


state 52

    (32) STATEMENT -> ASSIGN . SEMICOLON

    SEMICOLON       shift and go to state 80


state 53

    (33) STATEMENT -> FUNC_CALL . SEMICOLON

    SEMICOLON       shift and go to state 81


state 54

    (34) STATEMENT -> READ . SEMICOLON

    SEMICOLON       shift and go to state 82


state 55

    (35) STATEMENT -> WRITE . SEMICOLON

    SEMICOLON       shift and go to state 83


state 56

    (36) STATEMENT -> FLOW .

    ID              reduce using rule 36 (STATEMENT -> FLOW .)
    READ_K          reduce using rule 36 (STATEMENT -> FLOW .)
    WRITE_K         reduce using rule 36 (STATEMENT -> FLOW .)
    IF_K            reduce using rule 36 (STATEMENT -> FLOW .)
    WHILE_K         reduce using rule 36 (STATEMENT -> FLOW .)
    FOR_K           reduce using rule 36 (STATEMENT -> FLOW .)
    BLOCKEND        reduce using rule 36 (STATEMENT -> FLOW .)
    RETURN_K        reduce using rule 36 (STATEMENT -> FLOW .)


state 57

    (51) ASSIGN -> VAR . ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (54) ASSIGN_VAR_N -> . EMPTY
    (113) EMPTY -> .

    EQUALS          reduce using rule 113 (EMPTY -> .)

    ASSIGN_VAR_N                   shift and go to state 84
    EMPTY                          shift and go to state 85

state 58

    (58) FUNC_CALL -> ID . LPAREN ARG_LIST RPAREN
    (55) VAR -> ID .
    (57) ARRAY -> ID . LBRACE INT RBRACE

    LPAREN          shift and go to state 86
    EQUALS          reduce using rule 55 (VAR -> ID .)
    LBRACE          shift and go to state 87


state 59

    (67) READ -> READ_K . LPAREN ID_LIST RPAREN

    LPAREN          shift and go to state 88


state 60

    (72) WRITE -> WRITE_K . LPAREN WRITE_LIST RPAREN

    LPAREN          shift and go to state 89


state 61

    (39) FLOW -> DECISION .

    ID              reduce using rule 39 (FLOW -> DECISION .)
    READ_K          reduce using rule 39 (FLOW -> DECISION .)
    WRITE_K         reduce using rule 39 (FLOW -> DECISION .)
    IF_K            reduce using rule 39 (FLOW -> DECISION .)
    WHILE_K         reduce using rule 39 (FLOW -> DECISION .)
    FOR_K           reduce using rule 39 (FLOW -> DECISION .)
    BLOCKEND        reduce using rule 39 (FLOW -> DECISION .)
    RETURN_K        reduce using rule 39 (FLOW -> DECISION .)


state 62

    (40) FLOW -> LOOP .

    ID              reduce using rule 40 (FLOW -> LOOP .)
    READ_K          reduce using rule 40 (FLOW -> LOOP .)
    WRITE_K         reduce using rule 40 (FLOW -> LOOP .)
    IF_K            reduce using rule 40 (FLOW -> LOOP .)
    WHILE_K         reduce using rule 40 (FLOW -> LOOP .)
    FOR_K           reduce using rule 40 (FLOW -> LOOP .)
    BLOCKEND        reduce using rule 40 (FLOW -> LOOP .)
    RETURN_K        reduce using rule 40 (FLOW -> LOOP .)


state 63

    (56) VAR -> ARRAY .

    EQUALS          reduce using rule 56 (VAR -> ARRAY .)
    COMMA           reduce using rule 56 (VAR -> ARRAY .)
    RPAREN          reduce using rule 56 (VAR -> ARRAY .)


state 64

    (45) DECISION -> IF_K . LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    LPAREN          shift and go to state 90


state 65

    (41) LOOP -> WHILE_LOOP .

    ID              reduce using rule 41 (LOOP -> WHILE_LOOP .)
    READ_K          reduce using rule 41 (LOOP -> WHILE_LOOP .)
    WRITE_K         reduce using rule 41 (LOOP -> WHILE_LOOP .)
    IF_K            reduce using rule 41 (LOOP -> WHILE_LOOP .)
    WHILE_K         reduce using rule 41 (LOOP -> WHILE_LOOP .)
    FOR_K           reduce using rule 41 (LOOP -> WHILE_LOOP .)
    BLOCKEND        reduce using rule 41 (LOOP -> WHILE_LOOP .)
    RETURN_K        reduce using rule 41 (LOOP -> WHILE_LOOP .)


state 66

    (42) LOOP -> FOR_LOOP .

    ID              reduce using rule 42 (LOOP -> FOR_LOOP .)
    READ_K          reduce using rule 42 (LOOP -> FOR_LOOP .)
    WRITE_K         reduce using rule 42 (LOOP -> FOR_LOOP .)
    IF_K            reduce using rule 42 (LOOP -> FOR_LOOP .)
    WHILE_K         reduce using rule 42 (LOOP -> FOR_LOOP .)
    FOR_K           reduce using rule 42 (LOOP -> FOR_LOOP .)
    BLOCKEND        reduce using rule 42 (LOOP -> FOR_LOOP .)
    RETURN_K        reduce using rule 42 (LOOP -> FOR_LOOP .)


state 67

    (43) WHILE_LOOP -> WHILE_K . LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND

    LPAREN          shift and go to state 91


state 68

    (44) FOR_LOOP -> FOR_K . ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 92


state 69

    (24) PARAM_DECL -> TYPE . ID neuro PARAM_DECL_R

    ID              shift and go to state 93


state 70

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    RPAREN          shift and go to state 94


state 71

    (25) PARAM_DECL -> EMPTY .

    RPAREN          reduce using rule 25 (PARAM_DECL -> EMPTY .)


state 72

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL . RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    RPAREN          shift and go to state 95


state 73

    (5) VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .

    BLOCKEND        reduce using rule 5 (VAR_DECL -> TYPE COLON VAR_LIST SEMICOLON VAR_DECL_R .)


state 74

    (6) VAR_DECL_R -> VAR_DECL .

    BLOCKEND        reduce using rule 6 (VAR_DECL_R -> VAR_DECL .)


state 75

    (7) VAR_DECL_R -> EMPTY .

    BLOCKEND        reduce using rule 7 (VAR_DECL_R -> EMPTY .)


state 76

    (9) VAR_LIST2 -> COMMA ID . VAR_LIST2
    (9) VAR_LIST2 -> . COMMA ID VAR_LIST2
    (10) VAR_LIST2 -> . EMPTY
    (113) EMPTY -> .

    COMMA           shift and go to state 47
    SEMICOLON       reduce using rule 113 (EMPTY -> .)

    VAR_LIST2                      shift and go to state 96
    EMPTY                          shift and go to state 48

state 77

    (109) PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .

    $end            reduce using rule 109 (PRINCIPAL_BLOCK -> MAIN_K LPAREN RPAREN BLOCKSTART PRINCIPAL_BODY BLOCKEND .)


state 78

    (110) PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .

    BLOCKEND        reduce using rule 110 (PRINCIPAL_BODY -> STATEMENT PRINCIPAL_BODY_R .)


state 79

    (112) PRINCIPAL_BODY_R -> PRINCIPAL_BODY .

    BLOCKEND        reduce using rule 112 (PRINCIPAL_BODY_R -> PRINCIPAL_BODY .)


state 80

    (32) STATEMENT -> ASSIGN SEMICOLON .

    ID              reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    READ_K          reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    WRITE_K         reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    IF_K            reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    WHILE_K         reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    FOR_K           reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    BLOCKEND        reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)
    RETURN_K        reduce using rule 32 (STATEMENT -> ASSIGN SEMICOLON .)


state 81

    (33) STATEMENT -> FUNC_CALL SEMICOLON .

    ID              reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    READ_K          reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WRITE_K         reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    IF_K            reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    WHILE_K         reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    FOR_K           reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    BLOCKEND        reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)
    RETURN_K        reduce using rule 33 (STATEMENT -> FUNC_CALL SEMICOLON .)


state 82

    (34) STATEMENT -> READ SEMICOLON .

    ID              reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    READ_K          reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    WRITE_K         reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    IF_K            reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    WHILE_K         reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    FOR_K           reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    BLOCKEND        reduce using rule 34 (STATEMENT -> READ SEMICOLON .)
    RETURN_K        reduce using rule 34 (STATEMENT -> READ SEMICOLON .)


state 83

    (35) STATEMENT -> WRITE SEMICOLON .

    ID              reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    READ_K          reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    WRITE_K         reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    IF_K            reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    WHILE_K         reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    FOR_K           reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    BLOCKEND        reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)
    RETURN_K        reduce using rule 35 (STATEMENT -> WRITE SEMICOLON .)


state 84

    (51) ASSIGN -> VAR ASSIGN_VAR_N . EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL

    EQUALS          shift and go to state 97


state 85

    (54) ASSIGN_VAR_N -> EMPTY .

    EQUALS          reduce using rule 54 (ASSIGN_VAR_N -> EMPTY .)


state 86

    (58) FUNC_CALL -> ID LPAREN . ARG_LIST RPAREN
    (59) ARG_LIST -> . VAR ARG_LIST_R
    (60) ARG_LIST -> . CONSTANT ARG_LIST_R
    (61) ARG_LIST -> . ARG_LIST_R
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING
    (62) ARG_LIST_R -> . COMMA ARG_LIST
    (63) ARG_LIST_R -> . EMPTY
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (113) EMPTY -> .

    ID              shift and go to state 98
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105
    COMMA           shift and go to state 106
    RPAREN          reduce using rule 113 (EMPTY -> .)

    ARG_LIST                       shift and go to state 99
    VAR                            shift and go to state 100
    ARG_LIST_R                     shift and go to state 101
    CONSTANT                       shift and go to state 102
    ARRAY                          shift and go to state 63
    EMPTY                          shift and go to state 107

state 87

    (57) ARRAY -> ID LBRACE . INT RBRACE

    INT             shift and go to state 108


state 88

    (67) READ -> READ_K LPAREN . ID_LIST RPAREN
    (68) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 110

    ID_LIST                        shift and go to state 109

state 89

    (72) WRITE -> WRITE_K LPAREN . WRITE_LIST RPAREN
    (73) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (74) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (105) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING
    (99) S_EXPRESSION -> . EXPRESSION
    (100) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (101) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (102) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (103) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (104) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105
    ID              shift and go to state 119
    LPAREN          shift and go to state 111

    WRITE_LIST                     shift and go to state 112
    H_EXPRESSION                   shift and go to state 113
    CONSTANT                       shift and go to state 114
    S_EXPRESSION                   shift and go to state 115
    EXPRESSION                     shift and go to state 116
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118

state 90

    (45) DECISION -> IF_K LPAREN . H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (105) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (99) S_EXPRESSION -> . EXPRESSION
    (100) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (101) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (102) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (103) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (104) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    H_EXPRESSION                   shift and go to state 120
    S_EXPRESSION                   shift and go to state 115
    EXPRESSION                     shift and go to state 116
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 91

    (43) WHILE_LOOP -> WHILE_K LPAREN . H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (105) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (99) S_EXPRESSION -> . EXPRESSION
    (100) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (101) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (102) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (103) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (104) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    H_EXPRESSION                   shift and go to state 122
    S_EXPRESSION                   shift and go to state 115
    EXPRESSION                     shift and go to state 116
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 92

    (44) FOR_LOOP -> FOR_K ID . EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    EQUALS          shift and go to state 123


state 93

    (24) PARAM_DECL -> TYPE ID . neuro PARAM_DECL_R
    (26) neuro -> . EMPTY
    (113) EMPTY -> .

    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)

    neuro                          shift and go to state 124
    EMPTY                          shift and go to state 125

state 94

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (23) neural_param_decl -> . EMPTY
    (113) EMPTY -> .

    BLOCKSTART      reduce using rule 113 (EMPTY -> .)

    neural_param_decl              shift and go to state 126
    EMPTY                          shift and go to state 127

state 95

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN . neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (23) neural_param_decl -> . EMPTY
    (113) EMPTY -> .

    BLOCKSTART      reduce using rule 113 (EMPTY -> .)

    neural_param_decl              shift and go to state 128
    EMPTY                          shift and go to state 127

state 96

    (9) VAR_LIST2 -> COMMA ID VAR_LIST2 .

    SEMICOLON       reduce using rule 9 (VAR_LIST2 -> COMMA ID VAR_LIST2 .)


state 97

    (51) ASSIGN -> VAR ASSIGN_VAR_N EQUALS . EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (53) EQUALS_NEURAL -> . EMPTY
    (113) EMPTY -> .

    ID              reduce using rule 113 (EMPTY -> .)
    LPAREN          reduce using rule 113 (EMPTY -> .)
    INT             reduce using rule 113 (EMPTY -> .)
    FLOAT           reduce using rule 113 (EMPTY -> .)
    STRING          reduce using rule 113 (EMPTY -> .)

    EQUALS_NEURAL                  shift and go to state 129
    EMPTY                          shift and go to state 130

state 98

    (55) VAR -> ID .
    (57) ARRAY -> ID . LBRACE INT RBRACE

    COMMA           reduce using rule 55 (VAR -> ID .)
    RPAREN          reduce using rule 55 (VAR -> ID .)
    LBRACE          shift and go to state 87


state 99

    (58) FUNC_CALL -> ID LPAREN ARG_LIST . RPAREN

    RPAREN          shift and go to state 131


state 100

    (59) ARG_LIST -> VAR . ARG_LIST_R
    (62) ARG_LIST_R -> . COMMA ARG_LIST
    (63) ARG_LIST_R -> . EMPTY
    (113) EMPTY -> .

    COMMA           shift and go to state 106
    RPAREN          reduce using rule 113 (EMPTY -> .)

    ARG_LIST_R                     shift and go to state 132
    EMPTY                          shift and go to state 107

state 101

    (61) ARG_LIST -> ARG_LIST_R .

    RPAREN          reduce using rule 61 (ARG_LIST -> ARG_LIST_R .)


state 102

    (60) ARG_LIST -> CONSTANT . ARG_LIST_R
    (62) ARG_LIST_R -> . COMMA ARG_LIST
    (63) ARG_LIST_R -> . EMPTY
    (113) EMPTY -> .

    COMMA           shift and go to state 106
    RPAREN          reduce using rule 113 (EMPTY -> .)

    ARG_LIST_R                     shift and go to state 133
    EMPTY                          shift and go to state 107

state 103

    (64) CONSTANT -> INT .

    COMMA           reduce using rule 64 (CONSTANT -> INT .)
    RPAREN          reduce using rule 64 (CONSTANT -> INT .)
    TIMES           reduce using rule 64 (CONSTANT -> INT .)
    DIVIDE          reduce using rule 64 (CONSTANT -> INT .)
    PLUS            reduce using rule 64 (CONSTANT -> INT .)
    MINUS           reduce using rule 64 (CONSTANT -> INT .)
    GT              reduce using rule 64 (CONSTANT -> INT .)
    LT              reduce using rule 64 (CONSTANT -> INT .)
    GTE             reduce using rule 64 (CONSTANT -> INT .)
    LTE             reduce using rule 64 (CONSTANT -> INT .)
    DOUBLEEQUAL     reduce using rule 64 (CONSTANT -> INT .)
    OR              reduce using rule 64 (CONSTANT -> INT .)
    AND             reduce using rule 64 (CONSTANT -> INT .)
    SEMICOLON       reduce using rule 64 (CONSTANT -> INT .)


state 104

    (65) CONSTANT -> FLOAT .

    COMMA           reduce using rule 65 (CONSTANT -> FLOAT .)
    RPAREN          reduce using rule 65 (CONSTANT -> FLOAT .)
    TIMES           reduce using rule 65 (CONSTANT -> FLOAT .)
    DIVIDE          reduce using rule 65 (CONSTANT -> FLOAT .)
    PLUS            reduce using rule 65 (CONSTANT -> FLOAT .)
    MINUS           reduce using rule 65 (CONSTANT -> FLOAT .)
    GT              reduce using rule 65 (CONSTANT -> FLOAT .)
    LT              reduce using rule 65 (CONSTANT -> FLOAT .)
    GTE             reduce using rule 65 (CONSTANT -> FLOAT .)
    LTE             reduce using rule 65 (CONSTANT -> FLOAT .)
    DOUBLEEQUAL     reduce using rule 65 (CONSTANT -> FLOAT .)
    OR              reduce using rule 65 (CONSTANT -> FLOAT .)
    AND             reduce using rule 65 (CONSTANT -> FLOAT .)
    SEMICOLON       reduce using rule 65 (CONSTANT -> FLOAT .)


state 105

    (66) CONSTANT -> STRING .

    COMMA           reduce using rule 66 (CONSTANT -> STRING .)
    RPAREN          reduce using rule 66 (CONSTANT -> STRING .)
    TIMES           reduce using rule 66 (CONSTANT -> STRING .)
    DIVIDE          reduce using rule 66 (CONSTANT -> STRING .)
    PLUS            reduce using rule 66 (CONSTANT -> STRING .)
    MINUS           reduce using rule 66 (CONSTANT -> STRING .)
    GT              reduce using rule 66 (CONSTANT -> STRING .)
    LT              reduce using rule 66 (CONSTANT -> STRING .)
    GTE             reduce using rule 66 (CONSTANT -> STRING .)
    LTE             reduce using rule 66 (CONSTANT -> STRING .)
    DOUBLEEQUAL     reduce using rule 66 (CONSTANT -> STRING .)
    OR              reduce using rule 66 (CONSTANT -> STRING .)
    AND             reduce using rule 66 (CONSTANT -> STRING .)
    SEMICOLON       reduce using rule 66 (CONSTANT -> STRING .)


state 106

    (62) ARG_LIST_R -> COMMA . ARG_LIST
    (59) ARG_LIST -> . VAR ARG_LIST_R
    (60) ARG_LIST -> . CONSTANT ARG_LIST_R
    (61) ARG_LIST -> . ARG_LIST_R
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING
    (62) ARG_LIST_R -> . COMMA ARG_LIST
    (63) ARG_LIST_R -> . EMPTY
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (113) EMPTY -> .

    ID              shift and go to state 98
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105
    COMMA           shift and go to state 106
    RPAREN          reduce using rule 113 (EMPTY -> .)

    ARG_LIST                       shift and go to state 134
    VAR                            shift and go to state 100
    ARG_LIST_R                     shift and go to state 101
    CONSTANT                       shift and go to state 102
    ARRAY                          shift and go to state 63
    EMPTY                          shift and go to state 107

state 107

    (63) ARG_LIST_R -> EMPTY .

    RPAREN          reduce using rule 63 (ARG_LIST_R -> EMPTY .)


state 108

    (57) ARRAY -> ID LBRACE INT . RBRACE

    RBRACE          shift and go to state 135


state 109

    (67) READ -> READ_K LPAREN ID_LIST . RPAREN

    RPAREN          shift and go to state 136


state 110

    (68) ID_LIST -> ID . READ_NEURAL ID_LIST_R
    (69) READ_NEURAL -> . EMPTY
    (113) EMPTY -> .

    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)

    READ_NEURAL                    shift and go to state 137
    EMPTY                          shift and go to state 138

state 111

    (96) FACTOR -> LPAREN . H_EXPRESSION RPAREN
    (105) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (99) S_EXPRESSION -> . EXPRESSION
    (100) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (101) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (102) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (103) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (104) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    H_EXPRESSION                   shift and go to state 139
    S_EXPRESSION                   shift and go to state 115
    EXPRESSION                     shift and go to state 116
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 112

    (72) WRITE -> WRITE_K LPAREN WRITE_LIST . RPAREN

    RPAREN          shift and go to state 140


state 113

    (73) WRITE_LIST -> H_EXPRESSION . WRITE_LIST_R
    (76) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (77) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (78) WRITE_NEURAL -> . EMPTY
    (113) EMPTY -> .

    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 141
    WRITE_NEURAL                   shift and go to state 142
    EMPTY                          shift and go to state 143

state 114

    (74) WRITE_LIST -> CONSTANT . CONSTANT_WRITE_N WRITE_LIST_R
    (95) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (75) CONSTANT_WRITE_N -> . EMPTY
    (98) NEURAL_CNT_FACT -> . EMPTY
    (113) EMPTY -> .

    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)
    TIMES           reduce using rule 113 (EMPTY -> .)
    DIVIDE          reduce using rule 113 (EMPTY -> .)
    PLUS            reduce using rule 113 (EMPTY -> .)
    MINUS           reduce using rule 113 (EMPTY -> .)
    GT              reduce using rule 113 (EMPTY -> .)
    LT              reduce using rule 113 (EMPTY -> .)
    GTE             reduce using rule 113 (EMPTY -> .)
    LTE             reduce using rule 113 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 113 (EMPTY -> .)
    OR              reduce using rule 113 (EMPTY -> .)
    AND             reduce using rule 113 (EMPTY -> .)

    CONSTANT_WRITE_N               shift and go to state 144
    NEURAL_CNT_FACT                shift and go to state 145
    EMPTY                          shift and go to state 146

state 115

    (105) H_EXPRESSION -> S_EXPRESSION . H_EXPRESSION_R
    (106) H_EXPRESSION_R -> . OR H_EXPRESSION
    (107) H_EXPRESSION_R -> . AND H_EXPRESSION
    (108) H_EXPRESSION_R -> . EMPTY
    (113) EMPTY -> .

    OR              shift and go to state 148
    AND             shift and go to state 149
    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)
    SEMICOLON       reduce using rule 113 (EMPTY -> .)

    H_EXPRESSION_R                 shift and go to state 147
    EMPTY                          shift and go to state 150

state 116

    (99) S_EXPRESSION -> EXPRESSION .
    (100) S_EXPRESSION -> EXPRESSION . GT EXPRESSION
    (101) S_EXPRESSION -> EXPRESSION . LT EXPRESSION
    (102) S_EXPRESSION -> EXPRESSION . GTE EXPRESSION
    (103) S_EXPRESSION -> EXPRESSION . LTE EXPRESSION
    (104) S_EXPRESSION -> EXPRESSION . DOUBLEEQUAL EXPRESSION

    OR              reduce using rule 99 (S_EXPRESSION -> EXPRESSION .)
    AND             reduce using rule 99 (S_EXPRESSION -> EXPRESSION .)
    COMMA           reduce using rule 99 (S_EXPRESSION -> EXPRESSION .)
    RPAREN          reduce using rule 99 (S_EXPRESSION -> EXPRESSION .)
    SEMICOLON       reduce using rule 99 (S_EXPRESSION -> EXPRESSION .)
    GT              shift and go to state 151
    LT              shift and go to state 152
    GTE             shift and go to state 153
    LTE             shift and go to state 154
    DOUBLEEQUAL     shift and go to state 155


state 117

    (80) EXPRESSION -> TERM . NEURAL_EXPRESSION EXPRESSION_R
    (81) NEURAL_EXPRESSION -> . EMPTY
    (113) EMPTY -> .

    PLUS            reduce using rule 113 (EMPTY -> .)
    MINUS           reduce using rule 113 (EMPTY -> .)
    GT              reduce using rule 113 (EMPTY -> .)
    LT              reduce using rule 113 (EMPTY -> .)
    GTE             reduce using rule 113 (EMPTY -> .)
    LTE             reduce using rule 113 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 113 (EMPTY -> .)
    OR              reduce using rule 113 (EMPTY -> .)
    AND             reduce using rule 113 (EMPTY -> .)
    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)
    SEMICOLON       reduce using rule 113 (EMPTY -> .)

    NEURAL_EXPRESSION              shift and go to state 156
    EMPTY                          shift and go to state 157

state 118

    (87) TERM -> FACTOR . NEURAL_TERM TERM_R
    (88) NEURAL_TERM -> . EMPTY
    (113) EMPTY -> .

    TIMES           reduce using rule 113 (EMPTY -> .)
    DIVIDE          reduce using rule 113 (EMPTY -> .)
    PLUS            reduce using rule 113 (EMPTY -> .)
    MINUS           reduce using rule 113 (EMPTY -> .)
    GT              reduce using rule 113 (EMPTY -> .)
    LT              reduce using rule 113 (EMPTY -> .)
    GTE             reduce using rule 113 (EMPTY -> .)
    LTE             reduce using rule 113 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 113 (EMPTY -> .)
    OR              reduce using rule 113 (EMPTY -> .)
    AND             reduce using rule 113 (EMPTY -> .)
    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)
    SEMICOLON       reduce using rule 113 (EMPTY -> .)

    NEURAL_TERM                    shift and go to state 158
    EMPTY                          shift and go to state 159

state 119

    (94) FACTOR -> ID . NEURAL_ID_FAC
    (97) NEURAL_ID_FAC -> . EMPTY
    (113) EMPTY -> .

    TIMES           reduce using rule 113 (EMPTY -> .)
    DIVIDE          reduce using rule 113 (EMPTY -> .)
    PLUS            reduce using rule 113 (EMPTY -> .)
    MINUS           reduce using rule 113 (EMPTY -> .)
    GT              reduce using rule 113 (EMPTY -> .)
    LT              reduce using rule 113 (EMPTY -> .)
    GTE             reduce using rule 113 (EMPTY -> .)
    LTE             reduce using rule 113 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 113 (EMPTY -> .)
    OR              reduce using rule 113 (EMPTY -> .)
    AND             reduce using rule 113 (EMPTY -> .)
    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)
    SEMICOLON       reduce using rule 113 (EMPTY -> .)

    NEURAL_ID_FAC                  shift and go to state 160
    EMPTY                          shift and go to state 161

state 120

    (45) DECISION -> IF_K LPAREN H_EXPRESSION . RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    RPAREN          shift and go to state 162


state 121

    (95) FACTOR -> CONSTANT . NEURAL_CNT_FACT
    (98) NEURAL_CNT_FACT -> . EMPTY
    (113) EMPTY -> .

    TIMES           reduce using rule 113 (EMPTY -> .)
    DIVIDE          reduce using rule 113 (EMPTY -> .)
    PLUS            reduce using rule 113 (EMPTY -> .)
    MINUS           reduce using rule 113 (EMPTY -> .)
    GT              reduce using rule 113 (EMPTY -> .)
    LT              reduce using rule 113 (EMPTY -> .)
    GTE             reduce using rule 113 (EMPTY -> .)
    LTE             reduce using rule 113 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 113 (EMPTY -> .)
    OR              reduce using rule 113 (EMPTY -> .)
    AND             reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)
    SEMICOLON       reduce using rule 113 (EMPTY -> .)
    COMMA           reduce using rule 113 (EMPTY -> .)

    NEURAL_CNT_FACT                shift and go to state 145
    EMPTY                          shift and go to state 163

state 122

    (43) WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION . RPAREN BLOCKSTART STATEMENT_R BLOCKEND

    RPAREN          shift and go to state 164


state 123

    (44) FOR_LOOP -> FOR_K ID EQUALS . INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 165


state 124

    (24) PARAM_DECL -> TYPE ID neuro . PARAM_DECL_R
    (27) PARAM_DECL_R -> . COMMA PARAM_DECL
    (28) PARAM_DECL_R -> . EMPTY
    (113) EMPTY -> .

    COMMA           shift and go to state 167
    RPAREN          reduce using rule 113 (EMPTY -> .)

    PARAM_DECL_R                   shift and go to state 166
    EMPTY                          shift and go to state 168

state 125

    (26) neuro -> EMPTY .

    COMMA           reduce using rule 26 (neuro -> EMPTY .)
    RPAREN          reduce using rule 26 (neuro -> EMPTY .)


state 126

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL

    BLOCKSTART      shift and go to state 169


state 127

    (23) neural_param_decl -> EMPTY .

    BLOCKSTART      reduce using rule 23 (neural_param_decl -> EMPTY .)


state 128

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl . BLOCKSTART PROC_BODY BLOCKEND PROC_DECL

    BLOCKSTART      shift and go to state 170


state 129

    (51) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL . H_EXPRESSION ASSI_H_EXP_NEURAL
    (105) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (99) S_EXPRESSION -> . EXPRESSION
    (100) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (101) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (102) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (103) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (104) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    H_EXPRESSION                   shift and go to state 171
    S_EXPRESSION                   shift and go to state 115
    EXPRESSION                     shift and go to state 116
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 130

    (53) EQUALS_NEURAL -> EMPTY .

    ID              reduce using rule 53 (EQUALS_NEURAL -> EMPTY .)
    LPAREN          reduce using rule 53 (EQUALS_NEURAL -> EMPTY .)
    INT             reduce using rule 53 (EQUALS_NEURAL -> EMPTY .)
    FLOAT           reduce using rule 53 (EQUALS_NEURAL -> EMPTY .)
    STRING          reduce using rule 53 (EQUALS_NEURAL -> EMPTY .)


state 131

    (58) FUNC_CALL -> ID LPAREN ARG_LIST RPAREN .

    SEMICOLON       reduce using rule 58 (FUNC_CALL -> ID LPAREN ARG_LIST RPAREN .)


state 132

    (59) ARG_LIST -> VAR ARG_LIST_R .

    RPAREN          reduce using rule 59 (ARG_LIST -> VAR ARG_LIST_R .)


state 133

    (60) ARG_LIST -> CONSTANT ARG_LIST_R .

    RPAREN          reduce using rule 60 (ARG_LIST -> CONSTANT ARG_LIST_R .)


state 134

    (62) ARG_LIST_R -> COMMA ARG_LIST .

    RPAREN          reduce using rule 62 (ARG_LIST_R -> COMMA ARG_LIST .)


state 135

    (57) ARRAY -> ID LBRACE INT RBRACE .

    EQUALS          reduce using rule 57 (ARRAY -> ID LBRACE INT RBRACE .)
    COMMA           reduce using rule 57 (ARRAY -> ID LBRACE INT RBRACE .)
    RPAREN          reduce using rule 57 (ARRAY -> ID LBRACE INT RBRACE .)


state 136

    (67) READ -> READ_K LPAREN ID_LIST RPAREN .

    SEMICOLON       reduce using rule 67 (READ -> READ_K LPAREN ID_LIST RPAREN .)


state 137

    (68) ID_LIST -> ID READ_NEURAL . ID_LIST_R
    (70) ID_LIST_R -> . COMMA ID_LIST
    (71) ID_LIST_R -> . EMPTY
    (113) EMPTY -> .

    COMMA           shift and go to state 173
    RPAREN          reduce using rule 113 (EMPTY -> .)

    ID_LIST_R                      shift and go to state 172
    EMPTY                          shift and go to state 174

state 138

    (69) READ_NEURAL -> EMPTY .

    COMMA           reduce using rule 69 (READ_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 69 (READ_NEURAL -> EMPTY .)


state 139

    (96) FACTOR -> LPAREN H_EXPRESSION . RPAREN

    RPAREN          shift and go to state 175


state 140

    (72) WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .

    SEMICOLON       reduce using rule 72 (WRITE -> WRITE_K LPAREN WRITE_LIST RPAREN .)


state 141

    (73) WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .

    RPAREN          reduce using rule 73 (WRITE_LIST -> H_EXPRESSION WRITE_LIST_R .)


state 142

    (76) WRITE_LIST_R -> WRITE_NEURAL . COMMA WRITE_LIST
    (77) WRITE_LIST_R -> WRITE_NEURAL . EMPTY
    (113) EMPTY -> .

    COMMA           shift and go to state 176
    RPAREN          reduce using rule 113 (EMPTY -> .)

    EMPTY                          shift and go to state 177

state 143

    (78) WRITE_NEURAL -> EMPTY .

    COMMA           reduce using rule 78 (WRITE_NEURAL -> EMPTY .)
    RPAREN          reduce using rule 78 (WRITE_NEURAL -> EMPTY .)


state 144

    (74) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N . WRITE_LIST_R
    (76) WRITE_LIST_R -> . WRITE_NEURAL COMMA WRITE_LIST
    (77) WRITE_LIST_R -> . WRITE_NEURAL EMPTY
    (78) WRITE_NEURAL -> . EMPTY
    (113) EMPTY -> .

    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)

    WRITE_LIST_R                   shift and go to state 178
    WRITE_NEURAL                   shift and go to state 142
    EMPTY                          shift and go to state 143

state 145

    (95) FACTOR -> CONSTANT NEURAL_CNT_FACT .

    TIMES           reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DIVIDE          reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    PLUS            reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    MINUS           reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GT              reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LT              reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    GTE             reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    LTE             reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    DOUBLEEQUAL     reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    OR              reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    AND             reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    COMMA           reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    RPAREN          reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)
    SEMICOLON       reduce using rule 95 (FACTOR -> CONSTANT NEURAL_CNT_FACT .)


state 146

    (75) CONSTANT_WRITE_N -> EMPTY .
    (98) NEURAL_CNT_FACT -> EMPTY .

  ! reduce/reduce conflict for COMMA resolved using rule 75 (CONSTANT_WRITE_N -> EMPTY .)
  ! reduce/reduce conflict for RPAREN resolved using rule 75 (CONSTANT_WRITE_N -> EMPTY .)
    COMMA           reduce using rule 75 (CONSTANT_WRITE_N -> EMPTY .)
    RPAREN          reduce using rule 75 (CONSTANT_WRITE_N -> EMPTY .)
    TIMES           reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)

  ! COMMA           [ reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .) ]
  ! RPAREN          [ reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .) ]


state 147

    (105) H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .

    COMMA           reduce using rule 105 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    RPAREN          reduce using rule 105 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)
    SEMICOLON       reduce using rule 105 (H_EXPRESSION -> S_EXPRESSION H_EXPRESSION_R .)


state 148

    (106) H_EXPRESSION_R -> OR . H_EXPRESSION
    (105) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (99) S_EXPRESSION -> . EXPRESSION
    (100) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (101) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (102) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (103) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (104) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    H_EXPRESSION                   shift and go to state 179
    S_EXPRESSION                   shift and go to state 115
    EXPRESSION                     shift and go to state 116
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 149

    (107) H_EXPRESSION_R -> AND . H_EXPRESSION
    (105) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (99) S_EXPRESSION -> . EXPRESSION
    (100) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (101) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (102) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (103) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (104) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    H_EXPRESSION                   shift and go to state 180
    S_EXPRESSION                   shift and go to state 115
    EXPRESSION                     shift and go to state 116
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 150

    (108) H_EXPRESSION_R -> EMPTY .

    COMMA           reduce using rule 108 (H_EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 108 (H_EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 108 (H_EXPRESSION_R -> EMPTY .)


state 151

    (100) S_EXPRESSION -> EXPRESSION GT . EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    EXPRESSION                     shift and go to state 181
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 152

    (101) S_EXPRESSION -> EXPRESSION LT . EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    EXPRESSION                     shift and go to state 182
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 153

    (102) S_EXPRESSION -> EXPRESSION GTE . EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    EXPRESSION                     shift and go to state 183
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 154

    (103) S_EXPRESSION -> EXPRESSION LTE . EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    EXPRESSION                     shift and go to state 184
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 155

    (104) S_EXPRESSION -> EXPRESSION DOUBLEEQUAL . EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    EXPRESSION                     shift and go to state 185
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 156

    (80) EXPRESSION -> TERM NEURAL_EXPRESSION . EXPRESSION_R
    (82) EXPRESSION_R -> . PLUS NEURAL_PLUS EXPRESSION
    (83) EXPRESSION_R -> . MINUS NEURAL_MINUS EXPRESSION
    (84) EXPRESSION_R -> . EMPTY
    (113) EMPTY -> .

    PLUS            shift and go to state 187
    MINUS           shift and go to state 188
    GT              reduce using rule 113 (EMPTY -> .)
    LT              reduce using rule 113 (EMPTY -> .)
    GTE             reduce using rule 113 (EMPTY -> .)
    LTE             reduce using rule 113 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 113 (EMPTY -> .)
    OR              reduce using rule 113 (EMPTY -> .)
    AND             reduce using rule 113 (EMPTY -> .)
    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)
    SEMICOLON       reduce using rule 113 (EMPTY -> .)

    EXPRESSION_R                   shift and go to state 186
    EMPTY                          shift and go to state 189

state 157

    (81) NEURAL_EXPRESSION -> EMPTY .

    PLUS            reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    MINUS           reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    GT              reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    LT              reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    GTE             reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    LTE             reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    OR              reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    AND             reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    COMMA           reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    RPAREN          reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)
    SEMICOLON       reduce using rule 81 (NEURAL_EXPRESSION -> EMPTY .)


state 158

    (87) TERM -> FACTOR NEURAL_TERM . TERM_R
    (89) TERM_R -> . TIMES NEURAL_TIMES TERM
    (90) TERM_R -> . DIVIDE NEURAL_DIVIDE TERM
    (91) TERM_R -> . EMPTY
    (113) EMPTY -> .

    TIMES           shift and go to state 191
    DIVIDE          shift and go to state 192
    PLUS            reduce using rule 113 (EMPTY -> .)
    MINUS           reduce using rule 113 (EMPTY -> .)
    GT              reduce using rule 113 (EMPTY -> .)
    LT              reduce using rule 113 (EMPTY -> .)
    GTE             reduce using rule 113 (EMPTY -> .)
    LTE             reduce using rule 113 (EMPTY -> .)
    DOUBLEEQUAL     reduce using rule 113 (EMPTY -> .)
    OR              reduce using rule 113 (EMPTY -> .)
    AND             reduce using rule 113 (EMPTY -> .)
    COMMA           reduce using rule 113 (EMPTY -> .)
    RPAREN          reduce using rule 113 (EMPTY -> .)
    SEMICOLON       reduce using rule 113 (EMPTY -> .)

    TERM_R                         shift and go to state 190
    EMPTY                          shift and go to state 193

state 159

    (88) NEURAL_TERM -> EMPTY .

    TIMES           reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    DIVIDE          reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    PLUS            reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    MINUS           reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    GT              reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    LT              reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    GTE             reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    LTE             reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    OR              reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    AND             reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    COMMA           reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    RPAREN          reduce using rule 88 (NEURAL_TERM -> EMPTY .)
    SEMICOLON       reduce using rule 88 (NEURAL_TERM -> EMPTY .)


state 160

    (94) FACTOR -> ID NEURAL_ID_FAC .

    TIMES           reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    DIVIDE          reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    PLUS            reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    MINUS           reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    GT              reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    LT              reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    GTE             reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    LTE             reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    DOUBLEEQUAL     reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    OR              reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    AND             reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    COMMA           reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    RPAREN          reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)
    SEMICOLON       reduce using rule 94 (FACTOR -> ID NEURAL_ID_FAC .)


state 161

    (97) NEURAL_ID_FAC -> EMPTY .

    TIMES           reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    DIVIDE          reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    PLUS            reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    MINUS           reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    GT              reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    LT              reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    GTE             reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    LTE             reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    OR              reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    AND             reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    COMMA           reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    RPAREN          reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)
    SEMICOLON       reduce using rule 97 (NEURAL_ID_FAC -> EMPTY .)


state 162

    (45) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN . EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (46) EXP_RESULT_NEURAL -> . EMPTY
    (113) EMPTY -> .

    BLOCKSTART      reduce using rule 113 (EMPTY -> .)

    EXP_RESULT_NEURAL              shift and go to state 194
    EMPTY                          shift and go to state 195

state 163

    (98) NEURAL_CNT_FACT -> EMPTY .

    TIMES           reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    DIVIDE          reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    PLUS            reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    MINUS           reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    GT              reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    LT              reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    GTE             reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    LTE             reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    OR              reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    AND             reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    RPAREN          reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    SEMICOLON       reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)
    COMMA           reduce using rule 98 (NEURAL_CNT_FACT -> EMPTY .)


state 164

    (43) WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 196


state 165

    (44) FOR_LOOP -> FOR_K ID EQUALS INT . TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    TO_K            shift and go to state 197


state 166

    (24) PARAM_DECL -> TYPE ID neuro PARAM_DECL_R .

    RPAREN          reduce using rule 24 (PARAM_DECL -> TYPE ID neuro PARAM_DECL_R .)


state 167

    (27) PARAM_DECL_R -> COMMA . PARAM_DECL
    (24) PARAM_DECL -> . TYPE ID neuro PARAM_DECL_R
    (25) PARAM_DECL -> . EMPTY
    (11) TYPE -> . INT_K NEURAL_TYPE
    (12) TYPE -> . FLOAT_K NEURAL_TYPE
    (13) TYPE -> . STRING_K NEURAL_TYPE
    (113) EMPTY -> .

    INT_K           shift and go to state 21
    FLOAT_K         shift and go to state 22
    STRING_K        shift and go to state 23
    RPAREN          reduce using rule 113 (EMPTY -> .)

    PARAM_DECL                     shift and go to state 198
    TYPE                           shift and go to state 69
    EMPTY                          shift and go to state 71

state 168

    (28) PARAM_DECL_R -> EMPTY .

    RPAREN          reduce using rule 28 (PARAM_DECL_R -> EMPTY .)


state 169

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . PROC_BODY RETURN BLOCKEND PROC_DECL
    (29) PROC_BODY -> . STATEMENT PROC_BODY_R
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (51) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (58) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (67) READ -> . READ_K LPAREN ID_LIST RPAREN
    (72) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (45) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . FOR_LOOP
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (43) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (44) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 67
    FOR_K           shift and go to state 68

    PROC_BODY                      shift and go to state 199
    STATEMENT                      shift and go to state 200
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    FOR_LOOP                       shift and go to state 66

state 170

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART . PROC_BODY BLOCKEND PROC_DECL
    (29) PROC_BODY -> . STATEMENT PROC_BODY_R
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (51) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (58) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (67) READ -> . READ_K LPAREN ID_LIST RPAREN
    (72) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (45) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . FOR_LOOP
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (43) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (44) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 67
    FOR_K           shift and go to state 68

    PROC_BODY                      shift and go to state 201
    STATEMENT                      shift and go to state 200
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    FOR_LOOP                       shift and go to state 66

state 171

    (51) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION . ASSI_H_EXP_NEURAL
    (52) ASSI_H_EXP_NEURAL -> . EMPTY
    (113) EMPTY -> .

    SEMICOLON       reduce using rule 113 (EMPTY -> .)

    ASSI_H_EXP_NEURAL              shift and go to state 202
    EMPTY                          shift and go to state 203

state 172

    (68) ID_LIST -> ID READ_NEURAL ID_LIST_R .

    RPAREN          reduce using rule 68 (ID_LIST -> ID READ_NEURAL ID_LIST_R .)


state 173

    (70) ID_LIST_R -> COMMA . ID_LIST
    (68) ID_LIST -> . ID READ_NEURAL ID_LIST_R

    ID              shift and go to state 110

    ID_LIST                        shift and go to state 204

state 174

    (71) ID_LIST_R -> EMPTY .

    RPAREN          reduce using rule 71 (ID_LIST_R -> EMPTY .)


state 175

    (96) FACTOR -> LPAREN H_EXPRESSION RPAREN .

    TIMES           reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DIVIDE          reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    PLUS            reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    MINUS           reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GT              reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LT              reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    GTE             reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    LTE             reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    DOUBLEEQUAL     reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    OR              reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    AND             reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    COMMA           reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    RPAREN          reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)
    SEMICOLON       reduce using rule 96 (FACTOR -> LPAREN H_EXPRESSION RPAREN .)


state 176

    (76) WRITE_LIST_R -> WRITE_NEURAL COMMA . WRITE_LIST
    (73) WRITE_LIST -> . H_EXPRESSION WRITE_LIST_R
    (74) WRITE_LIST -> . CONSTANT CONSTANT_WRITE_N WRITE_LIST_R
    (105) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING
    (99) S_EXPRESSION -> . EXPRESSION
    (100) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (101) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (102) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (103) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (104) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN

    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105
    ID              shift and go to state 119
    LPAREN          shift and go to state 111

    WRITE_LIST                     shift and go to state 205
    H_EXPRESSION                   shift and go to state 113
    CONSTANT                       shift and go to state 114
    S_EXPRESSION                   shift and go to state 115
    EXPRESSION                     shift and go to state 116
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118

state 177

    (77) WRITE_LIST_R -> WRITE_NEURAL EMPTY .

    RPAREN          reduce using rule 77 (WRITE_LIST_R -> WRITE_NEURAL EMPTY .)


state 178

    (74) WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .

    RPAREN          reduce using rule 74 (WRITE_LIST -> CONSTANT CONSTANT_WRITE_N WRITE_LIST_R .)


state 179

    (106) H_EXPRESSION_R -> OR H_EXPRESSION .

    COMMA           reduce using rule 106 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    RPAREN          reduce using rule 106 (H_EXPRESSION_R -> OR H_EXPRESSION .)
    SEMICOLON       reduce using rule 106 (H_EXPRESSION_R -> OR H_EXPRESSION .)


state 180

    (107) H_EXPRESSION_R -> AND H_EXPRESSION .

    COMMA           reduce using rule 107 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    RPAREN          reduce using rule 107 (H_EXPRESSION_R -> AND H_EXPRESSION .)
    SEMICOLON       reduce using rule 107 (H_EXPRESSION_R -> AND H_EXPRESSION .)


state 181

    (100) S_EXPRESSION -> EXPRESSION GT EXPRESSION .

    OR              reduce using rule 100 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    AND             reduce using rule 100 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    COMMA           reduce using rule 100 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    RPAREN          reduce using rule 100 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)
    SEMICOLON       reduce using rule 100 (S_EXPRESSION -> EXPRESSION GT EXPRESSION .)


state 182

    (101) S_EXPRESSION -> EXPRESSION LT EXPRESSION .

    OR              reduce using rule 101 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    AND             reduce using rule 101 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    COMMA           reduce using rule 101 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    RPAREN          reduce using rule 101 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)
    SEMICOLON       reduce using rule 101 (S_EXPRESSION -> EXPRESSION LT EXPRESSION .)


state 183

    (102) S_EXPRESSION -> EXPRESSION GTE EXPRESSION .

    OR              reduce using rule 102 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    AND             reduce using rule 102 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    COMMA           reduce using rule 102 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    RPAREN          reduce using rule 102 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)
    SEMICOLON       reduce using rule 102 (S_EXPRESSION -> EXPRESSION GTE EXPRESSION .)


state 184

    (103) S_EXPRESSION -> EXPRESSION LTE EXPRESSION .

    OR              reduce using rule 103 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    AND             reduce using rule 103 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    COMMA           reduce using rule 103 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    RPAREN          reduce using rule 103 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)
    SEMICOLON       reduce using rule 103 (S_EXPRESSION -> EXPRESSION LTE EXPRESSION .)


state 185

    (104) S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .

    OR              reduce using rule 104 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    AND             reduce using rule 104 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    COMMA           reduce using rule 104 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    RPAREN          reduce using rule 104 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)
    SEMICOLON       reduce using rule 104 (S_EXPRESSION -> EXPRESSION DOUBLEEQUAL EXPRESSION .)


state 186

    (80) EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .

    GT              reduce using rule 80 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LT              reduce using rule 80 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    GTE             reduce using rule 80 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    LTE             reduce using rule 80 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    DOUBLEEQUAL     reduce using rule 80 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    OR              reduce using rule 80 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    AND             reduce using rule 80 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    COMMA           reduce using rule 80 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    RPAREN          reduce using rule 80 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)
    SEMICOLON       reduce using rule 80 (EXPRESSION -> TERM NEURAL_EXPRESSION EXPRESSION_R .)


state 187

    (82) EXPRESSION_R -> PLUS . NEURAL_PLUS EXPRESSION
    (85) NEURAL_PLUS -> . EMPTY
    (113) EMPTY -> .

    ID              reduce using rule 113 (EMPTY -> .)
    LPAREN          reduce using rule 113 (EMPTY -> .)
    INT             reduce using rule 113 (EMPTY -> .)
    FLOAT           reduce using rule 113 (EMPTY -> .)
    STRING          reduce using rule 113 (EMPTY -> .)

    NEURAL_PLUS                    shift and go to state 206
    EMPTY                          shift and go to state 207

state 188

    (83) EXPRESSION_R -> MINUS . NEURAL_MINUS EXPRESSION
    (86) NEURAL_MINUS -> . EMPTY
    (113) EMPTY -> .

    ID              reduce using rule 113 (EMPTY -> .)
    LPAREN          reduce using rule 113 (EMPTY -> .)
    INT             reduce using rule 113 (EMPTY -> .)
    FLOAT           reduce using rule 113 (EMPTY -> .)
    STRING          reduce using rule 113 (EMPTY -> .)

    NEURAL_MINUS                   shift and go to state 208
    EMPTY                          shift and go to state 209

state 189

    (84) EXPRESSION_R -> EMPTY .

    GT              reduce using rule 84 (EXPRESSION_R -> EMPTY .)
    LT              reduce using rule 84 (EXPRESSION_R -> EMPTY .)
    GTE             reduce using rule 84 (EXPRESSION_R -> EMPTY .)
    LTE             reduce using rule 84 (EXPRESSION_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 84 (EXPRESSION_R -> EMPTY .)
    OR              reduce using rule 84 (EXPRESSION_R -> EMPTY .)
    AND             reduce using rule 84 (EXPRESSION_R -> EMPTY .)
    COMMA           reduce using rule 84 (EXPRESSION_R -> EMPTY .)
    RPAREN          reduce using rule 84 (EXPRESSION_R -> EMPTY .)
    SEMICOLON       reduce using rule 84 (EXPRESSION_R -> EMPTY .)


state 190

    (87) TERM -> FACTOR NEURAL_TERM TERM_R .

    PLUS            reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    MINUS           reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GT              reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LT              reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    GTE             reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    LTE             reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    DOUBLEEQUAL     reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    OR              reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    AND             reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    COMMA           reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    RPAREN          reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)
    SEMICOLON       reduce using rule 87 (TERM -> FACTOR NEURAL_TERM TERM_R .)


state 191

    (89) TERM_R -> TIMES . NEURAL_TIMES TERM
    (92) NEURAL_TIMES -> . EMPTY
    (113) EMPTY -> .

    ID              reduce using rule 113 (EMPTY -> .)
    LPAREN          reduce using rule 113 (EMPTY -> .)
    INT             reduce using rule 113 (EMPTY -> .)
    FLOAT           reduce using rule 113 (EMPTY -> .)
    STRING          reduce using rule 113 (EMPTY -> .)

    NEURAL_TIMES                   shift and go to state 210
    EMPTY                          shift and go to state 211

state 192

    (90) TERM_R -> DIVIDE . NEURAL_DIVIDE TERM
    (93) NEURAL_DIVIDE -> . EMPTY
    (113) EMPTY -> .

    ID              reduce using rule 113 (EMPTY -> .)
    LPAREN          reduce using rule 113 (EMPTY -> .)
    INT             reduce using rule 113 (EMPTY -> .)
    FLOAT           reduce using rule 113 (EMPTY -> .)
    STRING          reduce using rule 113 (EMPTY -> .)

    NEURAL_DIVIDE                  shift and go to state 212
    EMPTY                          shift and go to state 213

state 193

    (91) TERM_R -> EMPTY .

    PLUS            reduce using rule 91 (TERM_R -> EMPTY .)
    MINUS           reduce using rule 91 (TERM_R -> EMPTY .)
    GT              reduce using rule 91 (TERM_R -> EMPTY .)
    LT              reduce using rule 91 (TERM_R -> EMPTY .)
    GTE             reduce using rule 91 (TERM_R -> EMPTY .)
    LTE             reduce using rule 91 (TERM_R -> EMPTY .)
    DOUBLEEQUAL     reduce using rule 91 (TERM_R -> EMPTY .)
    OR              reduce using rule 91 (TERM_R -> EMPTY .)
    AND             reduce using rule 91 (TERM_R -> EMPTY .)
    COMMA           reduce using rule 91 (TERM_R -> EMPTY .)
    RPAREN          reduce using rule 91 (TERM_R -> EMPTY .)
    SEMICOLON       reduce using rule 91 (TERM_R -> EMPTY .)


state 194

    (45) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL . BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKSTART      shift and go to state 214


state 195

    (46) EXP_RESULT_NEURAL -> EMPTY .

    BLOCKSTART      reduce using rule 46 (EXP_RESULT_NEURAL -> EMPTY .)


state 196

    (43) WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART . STATEMENT_R BLOCKEND
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (113) EMPTY -> .
    (51) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (58) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (67) READ -> . READ_K LPAREN ID_LIST RPAREN
    (72) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (45) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . FOR_LOOP
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (43) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (44) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 67
    FOR_K           shift and go to state 68

    STATEMENT_R                    shift and go to state 215
    STATEMENT                      shift and go to state 216
    EMPTY                          shift and go to state 217
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    FOR_LOOP                       shift and go to state 66

state 197

    (44) FOR_LOOP -> FOR_K ID EQUALS INT TO_K . INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    INT             shift and go to state 218


state 198

    (27) PARAM_DECL_R -> COMMA PARAM_DECL .

    RPAREN          reduce using rule 27 (PARAM_DECL_R -> COMMA PARAM_DECL .)


state 199

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY . RETURN BLOCKEND PROC_DECL
    (79) RETURN -> . RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON

    RETURN_K        shift and go to state 220

    RETURN                         shift and go to state 219

state 200

    (29) PROC_BODY -> STATEMENT . PROC_BODY_R
    (30) PROC_BODY_R -> . PROC_BODY
    (31) PROC_BODY_R -> . EMPTY
    (29) PROC_BODY -> . STATEMENT PROC_BODY_R
    (113) EMPTY -> .
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (51) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (58) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (67) READ -> . READ_K LPAREN ID_LIST RPAREN
    (72) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (45) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . FOR_LOOP
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (43) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (44) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    RETURN_K        reduce using rule 113 (EMPTY -> .)
    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 67
    FOR_K           shift and go to state 68

    STATEMENT                      shift and go to state 200
    PROC_BODY_R                    shift and go to state 221
    PROC_BODY                      shift and go to state 222
    EMPTY                          shift and go to state 223
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    FOR_LOOP                       shift and go to state 66

state 201

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY . BLOCKEND PROC_DECL

    BLOCKEND        shift and go to state 224


state 202

    (51) ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .

    SEMICOLON       reduce using rule 51 (ASSIGN -> VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL .)


state 203

    (52) ASSI_H_EXP_NEURAL -> EMPTY .

    SEMICOLON       reduce using rule 52 (ASSI_H_EXP_NEURAL -> EMPTY .)


state 204

    (70) ID_LIST_R -> COMMA ID_LIST .

    RPAREN          reduce using rule 70 (ID_LIST_R -> COMMA ID_LIST .)


state 205

    (76) WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .

    RPAREN          reduce using rule 76 (WRITE_LIST_R -> WRITE_NEURAL COMMA WRITE_LIST .)


state 206

    (82) EXPRESSION_R -> PLUS NEURAL_PLUS . EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    EXPRESSION                     shift and go to state 225
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 207

    (85) NEURAL_PLUS -> EMPTY .

    ID              reduce using rule 85 (NEURAL_PLUS -> EMPTY .)
    LPAREN          reduce using rule 85 (NEURAL_PLUS -> EMPTY .)
    INT             reduce using rule 85 (NEURAL_PLUS -> EMPTY .)
    FLOAT           reduce using rule 85 (NEURAL_PLUS -> EMPTY .)
    STRING          reduce using rule 85 (NEURAL_PLUS -> EMPTY .)


state 208

    (83) EXPRESSION_R -> MINUS NEURAL_MINUS . EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    EXPRESSION                     shift and go to state 226
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 209

    (86) NEURAL_MINUS -> EMPTY .

    ID              reduce using rule 86 (NEURAL_MINUS -> EMPTY .)
    LPAREN          reduce using rule 86 (NEURAL_MINUS -> EMPTY .)
    INT             reduce using rule 86 (NEURAL_MINUS -> EMPTY .)
    FLOAT           reduce using rule 86 (NEURAL_MINUS -> EMPTY .)
    STRING          reduce using rule 86 (NEURAL_MINUS -> EMPTY .)


state 210

    (89) TERM_R -> TIMES NEURAL_TIMES . TERM
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    TERM                           shift and go to state 227
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 211

    (92) NEURAL_TIMES -> EMPTY .

    ID              reduce using rule 92 (NEURAL_TIMES -> EMPTY .)
    LPAREN          reduce using rule 92 (NEURAL_TIMES -> EMPTY .)
    INT             reduce using rule 92 (NEURAL_TIMES -> EMPTY .)
    FLOAT           reduce using rule 92 (NEURAL_TIMES -> EMPTY .)
    STRING          reduce using rule 92 (NEURAL_TIMES -> EMPTY .)


state 212

    (90) TERM_R -> DIVIDE NEURAL_DIVIDE . TERM
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    TERM                           shift and go to state 228
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 213

    (93) NEURAL_DIVIDE -> EMPTY .

    ID              reduce using rule 93 (NEURAL_DIVIDE -> EMPTY .)
    LPAREN          reduce using rule 93 (NEURAL_DIVIDE -> EMPTY .)
    INT             reduce using rule 93 (NEURAL_DIVIDE -> EMPTY .)
    FLOAT           reduce using rule 93 (NEURAL_DIVIDE -> EMPTY .)
    STRING          reduce using rule 93 (NEURAL_DIVIDE -> EMPTY .)


state 214

    (45) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART . STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (113) EMPTY -> .
    (51) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (58) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (67) READ -> . READ_K LPAREN ID_LIST RPAREN
    (72) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (45) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . FOR_LOOP
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (43) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (44) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 67
    FOR_K           shift and go to state 68

    STATEMENT_R                    shift and go to state 229
    STATEMENT                      shift and go to state 216
    EMPTY                          shift and go to state 217
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    FOR_LOOP                       shift and go to state 66

state 215

    (43) WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 230


state 216

    (37) STATEMENT_R -> STATEMENT . STATEMENT_R
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (113) EMPTY -> .
    (51) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (58) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (67) READ -> . READ_K LPAREN ID_LIST RPAREN
    (72) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (45) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . FOR_LOOP
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (43) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (44) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 67
    FOR_K           shift and go to state 68

    STATEMENT                      shift and go to state 216
    STATEMENT_R                    shift and go to state 231
    EMPTY                          shift and go to state 217
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    FOR_LOOP                       shift and go to state 66

state 217

    (38) STATEMENT_R -> EMPTY .

    BLOCKEND        reduce using rule 38 (STATEMENT_R -> EMPTY .)


state 218

    (44) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT . DO_K BLOCKSTART STATEMENT_R BLOCKEND

    DO_K            shift and go to state 232


state 219

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN . BLOCKEND PROC_DECL

    BLOCKEND        shift and go to state 233


state 220

    (79) RETURN -> RETURN_K . LPAREN H_EXPRESSION RPAREN SEMICOLON

    LPAREN          shift and go to state 234


state 221

    (29) PROC_BODY -> STATEMENT PROC_BODY_R .

    RETURN_K        reduce using rule 29 (PROC_BODY -> STATEMENT PROC_BODY_R .)
    BLOCKEND        reduce using rule 29 (PROC_BODY -> STATEMENT PROC_BODY_R .)


state 222

    (30) PROC_BODY_R -> PROC_BODY .

    RETURN_K        reduce using rule 30 (PROC_BODY_R -> PROC_BODY .)
    BLOCKEND        reduce using rule 30 (PROC_BODY_R -> PROC_BODY .)


state 223

    (31) PROC_BODY_R -> EMPTY .

    RETURN_K        reduce using rule 31 (PROC_BODY_R -> EMPTY .)
    BLOCKEND        reduce using rule 31 (PROC_BODY_R -> EMPTY .)


state 224

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (113) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 113 (EMPTY -> .)

    PROC_DECL                      shift and go to state 235
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 225

    (82) EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .

    GT              reduce using rule 82 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LT              reduce using rule 82 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    GTE             reduce using rule 82 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    LTE             reduce using rule 82 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 82 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    OR              reduce using rule 82 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    AND             reduce using rule 82 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    COMMA           reduce using rule 82 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    RPAREN          reduce using rule 82 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)
    SEMICOLON       reduce using rule 82 (EXPRESSION_R -> PLUS NEURAL_PLUS EXPRESSION .)


state 226

    (83) EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .

    GT              reduce using rule 83 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LT              reduce using rule 83 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    GTE             reduce using rule 83 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    LTE             reduce using rule 83 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    DOUBLEEQUAL     reduce using rule 83 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    OR              reduce using rule 83 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    AND             reduce using rule 83 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    COMMA           reduce using rule 83 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    RPAREN          reduce using rule 83 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)
    SEMICOLON       reduce using rule 83 (EXPRESSION_R -> MINUS NEURAL_MINUS EXPRESSION .)


state 227

    (89) TERM_R -> TIMES NEURAL_TIMES TERM .

    PLUS            reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    MINUS           reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GT              reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LT              reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    GTE             reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    LTE             reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    DOUBLEEQUAL     reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    OR              reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    AND             reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    COMMA           reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    RPAREN          reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)
    SEMICOLON       reduce using rule 89 (TERM_R -> TIMES NEURAL_TIMES TERM .)


state 228

    (90) TERM_R -> DIVIDE NEURAL_DIVIDE TERM .

    PLUS            reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    MINUS           reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GT              reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LT              reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    GTE             reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    LTE             reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    DOUBLEEQUAL     reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    OR              reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    AND             reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    COMMA           reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    RPAREN          reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)
    SEMICOLON       reduce using rule 90 (TERM_R -> DIVIDE NEURAL_DIVIDE TERM .)


state 229

    (45) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R . BLOCKEND DECISION_ALT DECISION_END_NEURAL

    BLOCKEND        shift and go to state 236


state 230

    (43) WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 43 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 43 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 43 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 43 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 43 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 43 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 43 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 43 (WHILE_LOOP -> WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND .)


state 231

    (37) STATEMENT_R -> STATEMENT STATEMENT_R .

    BLOCKEND        reduce using rule 37 (STATEMENT_R -> STATEMENT STATEMENT_R .)


state 232

    (44) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 237


state 233

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND . PROC_DECL
    (16) PROC_DECL -> . PROC_DECL_RETURN
    (17) PROC_DECL -> . PROC_DECL_VOID
    (18) PROC_DECL -> . EMPTY
    (21) PROC_DECL_RETURN -> . FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL
    (19) PROC_DECL_VOID -> . FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL
    (113) EMPTY -> .

    FUNCTION_K      shift and go to state 15
    MAIN_K          reduce using rule 113 (EMPTY -> .)

    PROC_DECL                      shift and go to state 238
    PROC_DECL_RETURN               shift and go to state 12
    PROC_DECL_VOID                 shift and go to state 13
    EMPTY                          shift and go to state 14

state 234

    (79) RETURN -> RETURN_K LPAREN . H_EXPRESSION RPAREN SEMICOLON
    (105) H_EXPRESSION -> . S_EXPRESSION H_EXPRESSION_R
    (99) S_EXPRESSION -> . EXPRESSION
    (100) S_EXPRESSION -> . EXPRESSION GT EXPRESSION
    (101) S_EXPRESSION -> . EXPRESSION LT EXPRESSION
    (102) S_EXPRESSION -> . EXPRESSION GTE EXPRESSION
    (103) S_EXPRESSION -> . EXPRESSION LTE EXPRESSION
    (104) S_EXPRESSION -> . EXPRESSION DOUBLEEQUAL EXPRESSION
    (80) EXPRESSION -> . TERM NEURAL_EXPRESSION EXPRESSION_R
    (87) TERM -> . FACTOR NEURAL_TERM TERM_R
    (94) FACTOR -> . ID NEURAL_ID_FAC
    (95) FACTOR -> . CONSTANT NEURAL_CNT_FACT
    (96) FACTOR -> . LPAREN H_EXPRESSION RPAREN
    (64) CONSTANT -> . INT
    (65) CONSTANT -> . FLOAT
    (66) CONSTANT -> . STRING

    ID              shift and go to state 119
    LPAREN          shift and go to state 111
    INT             shift and go to state 103
    FLOAT           shift and go to state 104
    STRING          shift and go to state 105

    H_EXPRESSION                   shift and go to state 239
    S_EXPRESSION                   shift and go to state 115
    EXPRESSION                     shift and go to state 116
    TERM                           shift and go to state 117
    FACTOR                         shift and go to state 118
    CONSTANT                       shift and go to state 121

state 235

    (19) PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL .

    MAIN_K          reduce using rule 19 (PROC_DECL_VOID -> FUNCTION_K VOID_K ID neural_proc_void_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY BLOCKEND PROC_DECL .)


state 236

    (45) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND . DECISION_ALT DECISION_END_NEURAL
    (48) DECISION_ALT -> . ELSE
    (49) DECISION_ALT -> . EMPTY
    (50) ELSE -> . ELSE_K BLOCKSTART STATEMENT_R BLOCKEND
    (113) EMPTY -> .

    ELSE_K          shift and go to state 243
    ID              reduce using rule 113 (EMPTY -> .)
    READ_K          reduce using rule 113 (EMPTY -> .)
    WRITE_K         reduce using rule 113 (EMPTY -> .)
    IF_K            reduce using rule 113 (EMPTY -> .)
    WHILE_K         reduce using rule 113 (EMPTY -> .)
    FOR_K           reduce using rule 113 (EMPTY -> .)
    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    RETURN_K        reduce using rule 113 (EMPTY -> .)

    DECISION_ALT                   shift and go to state 240
    ELSE                           shift and go to state 241
    EMPTY                          shift and go to state 242

state 237

    (44) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART . STATEMENT_R BLOCKEND
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (113) EMPTY -> .
    (51) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (58) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (67) READ -> . READ_K LPAREN ID_LIST RPAREN
    (72) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (45) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . FOR_LOOP
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (43) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (44) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 67
    FOR_K           shift and go to state 68

    STATEMENT_R                    shift and go to state 244
    STATEMENT                      shift and go to state 216
    EMPTY                          shift and go to state 217
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    FOR_LOOP                       shift and go to state 66

state 238

    (21) PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL .

    MAIN_K          reduce using rule 21 (PROC_DECL_RETURN -> FUNCTION_K TYPE ID neural_proc_return_id LPAREN PARAM_DECL RPAREN neural_param_decl BLOCKSTART PROC_BODY RETURN BLOCKEND PROC_DECL .)


state 239

    (79) RETURN -> RETURN_K LPAREN H_EXPRESSION . RPAREN SEMICOLON

    RPAREN          shift and go to state 245


state 240

    (45) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT . DECISION_END_NEURAL
    (47) DECISION_END_NEURAL -> . EMPTY
    (113) EMPTY -> .

    ID              reduce using rule 113 (EMPTY -> .)
    READ_K          reduce using rule 113 (EMPTY -> .)
    WRITE_K         reduce using rule 113 (EMPTY -> .)
    IF_K            reduce using rule 113 (EMPTY -> .)
    WHILE_K         reduce using rule 113 (EMPTY -> .)
    FOR_K           reduce using rule 113 (EMPTY -> .)
    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    RETURN_K        reduce using rule 113 (EMPTY -> .)

    DECISION_END_NEURAL            shift and go to state 246
    EMPTY                          shift and go to state 247

state 241

    (48) DECISION_ALT -> ELSE .

    ID              reduce using rule 48 (DECISION_ALT -> ELSE .)
    READ_K          reduce using rule 48 (DECISION_ALT -> ELSE .)
    WRITE_K         reduce using rule 48 (DECISION_ALT -> ELSE .)
    IF_K            reduce using rule 48 (DECISION_ALT -> ELSE .)
    WHILE_K         reduce using rule 48 (DECISION_ALT -> ELSE .)
    FOR_K           reduce using rule 48 (DECISION_ALT -> ELSE .)
    BLOCKEND        reduce using rule 48 (DECISION_ALT -> ELSE .)
    RETURN_K        reduce using rule 48 (DECISION_ALT -> ELSE .)


state 242

    (49) DECISION_ALT -> EMPTY .

    ID              reduce using rule 49 (DECISION_ALT -> EMPTY .)
    READ_K          reduce using rule 49 (DECISION_ALT -> EMPTY .)
    WRITE_K         reduce using rule 49 (DECISION_ALT -> EMPTY .)
    IF_K            reduce using rule 49 (DECISION_ALT -> EMPTY .)
    WHILE_K         reduce using rule 49 (DECISION_ALT -> EMPTY .)
    FOR_K           reduce using rule 49 (DECISION_ALT -> EMPTY .)
    BLOCKEND        reduce using rule 49 (DECISION_ALT -> EMPTY .)
    RETURN_K        reduce using rule 49 (DECISION_ALT -> EMPTY .)


state 243

    (50) ELSE -> ELSE_K . BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKSTART      shift and go to state 248


state 244

    (44) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 249


state 245

    (79) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 250


state 246

    (45) DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .

    ID              reduce using rule 45 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    READ_K          reduce using rule 45 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WRITE_K         reduce using rule 45 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    IF_K            reduce using rule 45 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    WHILE_K         reduce using rule 45 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    FOR_K           reduce using rule 45 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    BLOCKEND        reduce using rule 45 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)
    RETURN_K        reduce using rule 45 (DECISION -> IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL .)


state 247

    (47) DECISION_END_NEURAL -> EMPTY .

    ID              reduce using rule 47 (DECISION_END_NEURAL -> EMPTY .)
    READ_K          reduce using rule 47 (DECISION_END_NEURAL -> EMPTY .)
    WRITE_K         reduce using rule 47 (DECISION_END_NEURAL -> EMPTY .)
    IF_K            reduce using rule 47 (DECISION_END_NEURAL -> EMPTY .)
    WHILE_K         reduce using rule 47 (DECISION_END_NEURAL -> EMPTY .)
    FOR_K           reduce using rule 47 (DECISION_END_NEURAL -> EMPTY .)
    BLOCKEND        reduce using rule 47 (DECISION_END_NEURAL -> EMPTY .)
    RETURN_K        reduce using rule 47 (DECISION_END_NEURAL -> EMPTY .)


state 248

    (50) ELSE -> ELSE_K BLOCKSTART . STATEMENT_R BLOCKEND
    (37) STATEMENT_R -> . STATEMENT STATEMENT_R
    (38) STATEMENT_R -> . EMPTY
    (32) STATEMENT -> . ASSIGN SEMICOLON
    (33) STATEMENT -> . FUNC_CALL SEMICOLON
    (34) STATEMENT -> . READ SEMICOLON
    (35) STATEMENT -> . WRITE SEMICOLON
    (36) STATEMENT -> . FLOW
    (113) EMPTY -> .
    (51) ASSIGN -> . VAR ASSIGN_VAR_N EQUALS EQUALS_NEURAL H_EXPRESSION ASSI_H_EXP_NEURAL
    (58) FUNC_CALL -> . ID LPAREN ARG_LIST RPAREN
    (67) READ -> . READ_K LPAREN ID_LIST RPAREN
    (72) WRITE -> . WRITE_K LPAREN WRITE_LIST RPAREN
    (39) FLOW -> . DECISION
    (40) FLOW -> . LOOP
    (55) VAR -> . ID
    (56) VAR -> . ARRAY
    (45) DECISION -> . IF_K LPAREN H_EXPRESSION RPAREN EXP_RESULT_NEURAL BLOCKSTART STATEMENT_R BLOCKEND DECISION_ALT DECISION_END_NEURAL
    (41) LOOP -> . WHILE_LOOP
    (42) LOOP -> . FOR_LOOP
    (57) ARRAY -> . ID LBRACE INT RBRACE
    (43) WHILE_LOOP -> . WHILE_K LPAREN H_EXPRESSION RPAREN BLOCKSTART STATEMENT_R BLOCKEND
    (44) FOR_LOOP -> . FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND

    BLOCKEND        reduce using rule 113 (EMPTY -> .)
    ID              shift and go to state 58
    READ_K          shift and go to state 59
    WRITE_K         shift and go to state 60
    IF_K            shift and go to state 64
    WHILE_K         shift and go to state 67
    FOR_K           shift and go to state 68

    STATEMENT_R                    shift and go to state 251
    STATEMENT                      shift and go to state 216
    EMPTY                          shift and go to state 217
    ASSIGN                         shift and go to state 52
    FUNC_CALL                      shift and go to state 53
    READ                           shift and go to state 54
    WRITE                          shift and go to state 55
    FLOW                           shift and go to state 56
    VAR                            shift and go to state 57
    DECISION                       shift and go to state 61
    LOOP                           shift and go to state 62
    ARRAY                          shift and go to state 63
    WHILE_LOOP                     shift and go to state 65
    FOR_LOOP                       shift and go to state 66

state 249

    (44) FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 44 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 44 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 44 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 44 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 44 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 44 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 44 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 44 (FOR_LOOP -> FOR_K ID EQUALS INT TO_K INT DO_K BLOCKSTART STATEMENT_R BLOCKEND .)


state 250

    (79) RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .

    BLOCKEND        reduce using rule 79 (RETURN -> RETURN_K LPAREN H_EXPRESSION RPAREN SEMICOLON .)


state 251

    (50) ELSE -> ELSE_K BLOCKSTART STATEMENT_R . BLOCKEND

    BLOCKEND        shift and go to state 252


state 252

    (50) ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .

    ID              reduce using rule 50 (ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    READ_K          reduce using rule 50 (ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WRITE_K         reduce using rule 50 (ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    IF_K            reduce using rule 50 (ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    WHILE_K         reduce using rule 50 (ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    FOR_K           reduce using rule 50 (ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    BLOCKEND        reduce using rule 50 (ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)
    RETURN_K        reduce using rule 50 (ELSE -> ELSE_K BLOCKSTART STATEMENT_R BLOCKEND .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 146 resolved using rule (CONSTANT_WRITE_N -> EMPTY)
WARNING: rejected rule (NEURAL_CNT_FACT -> EMPTY) in state 146
